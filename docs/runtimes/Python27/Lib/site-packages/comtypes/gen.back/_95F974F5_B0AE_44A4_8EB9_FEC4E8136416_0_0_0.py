# -*- coding: mbcs -*-
typelib_path = 'C:\\Python27\\lib\\site-packages\\PyDbgEng\\data\\DbgEng.tlb'
_lcid = 0 # change this if required
from ctypes import *
import comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0
from comtypes import GUID
from ctypes import HRESULT
from comtypes import helpstring
from comtypes import COMMETHOD
from comtypes import dispid
STRING = c_char_p
from comtypes.automation import VARIANT
from comtypes.automation import _midlSAFEARRAY



# values for enumeration '__MIDL___MIDL_itf_DbgEng_0000_0000_0015'
CREATE_SHARED_WOW_VDM = 4096
__MIDL___MIDL_itf_DbgEng_0000_0000_0015 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0098_0006'
DEBUG_NOTIFY_SESSION_ACTIVE = 0
__MIDL___MIDL_itf_DbgEng_0001_0098_0006 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0098_0010'
DEBUG_KNOWN_STRUCT_GET_NAMES = 1
__MIDL___MIDL_itf_DbgEng_0001_0098_0010 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0098_0007'
DEBUG_NOTIFY_SESSION_INACTIVE = 1
__MIDL___MIDL_itf_DbgEng_0001_0098_0007 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0098_0009'
DEBUG_NOTIFY_SESSION_INACCESSIBLE = 3
__MIDL___MIDL_itf_DbgEng_0001_0098_0009 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0000_0000_0016'
CREATE_FORCEDOS = 8192
__MIDL___MIDL_itf_DbgEng_0000_0000_0016 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0021'
DEBUG_OUTCTL_LOG_ONLY = 4
__MIDL___MIDL_itf_DbgEng_0001_0073_0021 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0039'
DEBUG_DATA_MmNonPagedPoolStartAddr = 272
__MIDL___MIDL_itf_DbgEng_0001_0077_0039 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0069_0001'
DEBUG_FORMAT_DEFAULT = 0
__MIDL___MIDL_itf_DbgEng_0001_0069_0001 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0098_0008'
DEBUG_NOTIFY_SESSION_ACCESSIBLE = 2
__MIDL___MIDL_itf_DbgEng_0001_0098_0008 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0000_0000_0006'
DETACHED_PROCESS = 8
__MIDL___MIDL_itf_DbgEng_0000_0000_0006 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0098_0015'
DEBUG_EXT_PVTYPE_IS_VALUE = 0
__MIDL___MIDL_itf_DbgEng_0001_0098_0015 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0000_0000_0003'
DEBUG_PROCESS = 1
__MIDL___MIDL_itf_DbgEng_0000_0000_0003 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0098_0016'
DEBUG_EXT_PVTYPE_IS_POINTER = 1
__MIDL___MIDL_itf_DbgEng_0001_0098_0016 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0095'
DEBUG_EXECUTE_NO_REPEAT = 4
__MIDL___MIDL_itf_DbgEng_0001_0073_0095 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0087'
DEBUG_KERNEL_EXDI_DRIVER = 2
__MIDL___MIDL_itf_DbgEng_0001_0073_0087 = c_int # enum
class _DEBUG_PROCESSOR_IDENTIFICATION_AMD64(Structure):
    pass
_DEBUG_PROCESSOR_IDENTIFICATION_AMD64._fields_ = [
    ('Family', c_ulong),
    ('Model', c_ulong),
    ('Stepping', c_ulong),
    ('VendorString', c_char * 16),
]
assert sizeof(_DEBUG_PROCESSOR_IDENTIFICATION_AMD64) == 28, sizeof(_DEBUG_PROCESSOR_IDENTIFICATION_AMD64)
assert alignment(_DEBUG_PROCESSOR_IDENTIFICATION_AMD64) == 4, alignment(_DEBUG_PROCESSOR_IDENTIFICATION_AMD64)

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0000_0000_0001'
EXCEPTION_MAXIMUM_PARAMETERS = 15
__MIDL___MIDL_itf_DbgEng_0000_0000_0001 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0000_0000_0004'
DEBUG_ONLY_THIS_PROCESS = 2
__MIDL___MIDL_itf_DbgEng_0000_0000_0004 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0000_0000_0002'
IMAGE_NUMBEROF_DIRECTORY_ENTRIES = 16
__MIDL___MIDL_itf_DbgEng_0000_0000_0002 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0000_0000_0013'
CREATE_UNICODE_ENVIRONMENT = 1024
__MIDL___MIDL_itf_DbgEng_0000_0000_0013 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0000_0000_0005'
CREATE_SUSPENDED = 4
__MIDL___MIDL_itf_DbgEng_0000_0000_0005 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0000_0000_0017'
BELOW_NORMAL_PRIORITY_CLASS = 16384
__MIDL___MIDL_itf_DbgEng_0000_0000_0017 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0000_0000_0022'
CREATE_DEFAULT_ERROR_MODE = 67108864
__MIDL___MIDL_itf_DbgEng_0000_0000_0022 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0000_0000_0014'
CREATE_SEPARATE_WOW_VDM = 2048
__MIDL___MIDL_itf_DbgEng_0000_0000_0014 = c_int # enum
class IDebugClient2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'IDebugClient2'
    _iid_ = GUID('{EDBED635-372E-4DAB-BBFE-ED0D2F63BE81}')
    _idlflags_ = []
class IDebugClient(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'IDebugClient'
    _iid_ = GUID('{27FE5639-8407-4F47-8364-EE118FB08AC8}')
    _idlflags_ = []
class IDebugInputCallbacks(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'IDebugInputCallbacks'
    _iid_ = GUID('{9F50E42C-F136-499E-9A97-73036C94ED2D}')
    _idlflags_ = []
class IDebugOutputCallbacks(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'IDebugOutputCallbacks'
    _iid_ = GUID('{4BF58045-D654-4C40-B0AF-683090F356DC}')
    _idlflags_ = []
class IDebugEventCallbacks(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'IDebugEventCallbacks'
    _iid_ = GUID('{337BE28B-5036-4D72-B6BF-C45FBB9F2EAA}')
    _idlflags_ = []
IDebugClient2._methods_ = [
    COMMETHOD([], HRESULT, 'AttachKernel',
              ( ['in'], c_ulong, 'Flags' ),
              ( ['in', 'optional'], STRING, 'ConnectOptions' )),
    COMMETHOD([], HRESULT, 'GetKernelConnectionOptions',
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'OptionsSize' )),
    COMMETHOD([], HRESULT, 'SetKernelConnectionOptions',
              ( ['in'], STRING, 'Options' )),
    COMMETHOD([], HRESULT, 'StartProcessServer',
              ( ['in'], c_ulong, 'Flags' ),
              ( ['in'], STRING, 'Options' ),
              ( ['in', 'optional'], c_void_p, 'Reserved' )),
    COMMETHOD([], HRESULT, 'ConnectProcessServer',
              ( ['in'], STRING, 'RemoteOptions' ),
              ( ['out'], POINTER(c_ulonglong), 'Server' )),
    COMMETHOD([], HRESULT, 'DisconnectProcessServer',
              ( ['in'], c_ulonglong, 'Server' )),
    COMMETHOD([], HRESULT, 'GetRunningProcessSystemIds',
              ( ['in'], c_ulonglong, 'Server' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'Ids' ),
              ( ['in', 'optional'], c_ulong, 'Count' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ActualCount' )),
    COMMETHOD([], HRESULT, 'GetRunningProcessSystemIdByExecutableName',
              ( ['in'], c_ulonglong, 'Server' ),
              ( ['in'], STRING, 'ExeName' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetRunningProcessDescription',
              ( ['in'], c_ulonglong, 'Server' ),
              ( ['in'], c_ulong, 'SystemId' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out', 'optional'], STRING, 'ExeName' ),
              ( ['in', 'optional'], c_ulong, 'ExeNameSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ActualExeNameSize' ),
              ( ['out', 'optional'], STRING, 'Description' ),
              ( ['in', 'optional'], c_ulong, 'DescriptionSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ActualDescriptionSize' )),
    COMMETHOD([], HRESULT, 'AttachProcess',
              ( ['in'], c_ulonglong, 'Server' ),
              ( ['in'], c_ulong, 'ProcessId' ),
              ( ['in'], c_ulong, 'AttachFlags' )),
    COMMETHOD([], HRESULT, 'CreateProcess',
              ( ['in'], c_ulonglong, 'Server' ),
              ( ['in'], STRING, 'CommandLine' ),
              ( ['in'], c_ulong, 'CreateFlags' )),
    COMMETHOD([], HRESULT, 'CreateProcessAndAttach',
              ( ['in'], c_ulonglong, 'Server' ),
              ( ['in', 'optional'], STRING, 'CommandLine' ),
              ( ['in', 'optional'], c_ulong, 'CreateFlags' ),
              ( ['in', 'optional'], c_ulong, 'ProcessId' ),
              ( ['in', 'optional'], c_ulong, 'AttachFlags' )),
    COMMETHOD([], HRESULT, 'GetProcessOptions',
              ( ['out'], POINTER(c_ulong), 'Options' )),
    COMMETHOD([], HRESULT, 'AddProcessOptions',
              ( ['in'], c_ulong, 'Options' )),
    COMMETHOD([], HRESULT, 'RemoveProcessOptions',
              ( ['in'], c_ulong, 'Options' )),
    COMMETHOD([], HRESULT, 'SetProcessOptions',
              ( ['in'], c_ulong, 'Options' )),
    COMMETHOD([], HRESULT, 'OpenDumpFile',
              ( ['in'], STRING, 'DumpFile' )),
    COMMETHOD([], HRESULT, 'WriteDumpFile',
              ( ['in'], STRING, 'DumpFile' ),
              ( ['in'], c_ulong, 'Qualifier' )),
    COMMETHOD([], HRESULT, 'ConnectSession',
              ( ['in'], c_ulong, 'Flags' ),
              ( ['in'], c_ulong, 'HistoryLimit' )),
    COMMETHOD([], HRESULT, 'StartServer',
              ( ['in'], STRING, 'Options' )),
    COMMETHOD([], HRESULT, 'OutputServers',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], STRING, 'Machine' ),
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'TerminateProcesses'),
    COMMETHOD([], HRESULT, 'DetachProcesses'),
    COMMETHOD([], HRESULT, 'EndSession',
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'GetExitCode',
              ( ['out'], POINTER(c_ulong), 'Code' )),
    COMMETHOD([], HRESULT, 'DispatchCallbacks',
              ( ['in'], c_ulong, 'Timeout' )),
    COMMETHOD([], HRESULT, 'ExitDispatch',
              ( ['in'], POINTER(IDebugClient), 'Client' )),
    COMMETHOD([], HRESULT, 'CreateClient',
              ( ['out'], POINTER(POINTER(IDebugClient)), 'Client' )),
    COMMETHOD([], HRESULT, 'GetInputCallbacks',
              ( ['out'], POINTER(POINTER(IDebugInputCallbacks)), 'Callbacks' )),
    COMMETHOD([], HRESULT, 'SetInputCallbacks',
              ( ['in', 'optional'], POINTER(IDebugInputCallbacks), 'Callbacks' )),
    COMMETHOD([], HRESULT, 'GetOutputCallbacks',
              ( ['out'], POINTER(POINTER(IDebugOutputCallbacks)), 'Callbacks' )),
    COMMETHOD([], HRESULT, 'SetOutputCallbacks',
              ( ['in', 'optional'], POINTER(IDebugOutputCallbacks), 'Callbacks' )),
    COMMETHOD([], HRESULT, 'GetOutputMask',
              ( ['out'], POINTER(c_ulong), 'Mask' )),
    COMMETHOD([], HRESULT, 'SetOutputMask',
              ( ['in'], c_ulong, 'Mask' )),
    COMMETHOD([], HRESULT, 'GetOtherOutputMask',
              ( ['in'], POINTER(IDebugClient), 'Client' ),
              ( ['out'], POINTER(c_ulong), 'Mask' )),
    COMMETHOD([], HRESULT, 'SetOtherOutputMask',
              ( ['in'], POINTER(IDebugClient), 'Client' ),
              ( ['in'], c_ulong, 'Mask' )),
    COMMETHOD([], HRESULT, 'GetOutputWidth',
              ( ['out'], POINTER(c_ulong), 'Columns' )),
    COMMETHOD([], HRESULT, 'SetOutputWidth',
              ( ['in'], c_ulong, 'Columns' )),
    COMMETHOD([], HRESULT, 'GetOutputLinePrefix',
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'PrefixSize' )),
    COMMETHOD([], HRESULT, 'SetOutputLinePrefix',
              ( ['in', 'optional'], STRING, 'Prefix' )),
    COMMETHOD([], HRESULT, 'GetIdentity',
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'IdentitySize' )),
    COMMETHOD([], HRESULT, 'OutputIdentity',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['in'], STRING, 'Format' )),
    COMMETHOD([], HRESULT, 'GetEventCallbacks',
              ( ['out'], POINTER(POINTER(IDebugEventCallbacks)), 'Callbacks' )),
    COMMETHOD([], HRESULT, 'SetEventCallbacks',
              ( ['in', 'optional'], POINTER(IDebugEventCallbacks), 'Callbacks' )),
    COMMETHOD([], HRESULT, 'FlushCallbacks'),
    COMMETHOD([], HRESULT, 'WriteDumpFile2',
              ( ['in'], STRING, 'DumpFile' ),
              ( ['in'], c_ulong, 'Qualifier' ),
              ( ['in'], c_ulong, 'FormatFlags' ),
              ( ['in', 'optional'], STRING, 'Comment' )),
    COMMETHOD([], HRESULT, 'AddDumpInformationFile',
              ( ['in'], STRING, 'InfoFile' ),
              ( ['in'], c_ulong, 'Type' )),
    COMMETHOD([], HRESULT, 'EndProcessServer',
              ( ['in'], c_ulonglong, 'Server' )),
    COMMETHOD([], HRESULT, 'WaitForProcessServerEnd',
              ( ['in'], c_ulong, 'Timeout' )),
    COMMETHOD([], HRESULT, 'IsKernelDebuggerEnabled'),
    COMMETHOD([], HRESULT, 'TerminateCurrentProcess'),
    COMMETHOD([], HRESULT, 'DetachCurrentProcess'),
    COMMETHOD([], HRESULT, 'AbandonCurrentProcess'),
]
################################################################
## code template for IDebugClient2 implementation
##class IDebugClient2_Impl(object):
##    def StartProcessServer(self, Flags, Options, Reserved):
##        '-no docstring-'
##        #return 
##
##    def SetEventCallbacks(self, Callbacks):
##        '-no docstring-'
##        #return 
##
##    def GetOutputMask(self):
##        '-no docstring-'
##        #return Mask
##
##    def OpenDumpFile(self, DumpFile):
##        '-no docstring-'
##        #return 
##
##    def SetOutputMask(self, Mask):
##        '-no docstring-'
##        #return 
##
##    def TerminateProcesses(self):
##        '-no docstring-'
##        #return 
##
##    def CreateClient(self):
##        '-no docstring-'
##        #return Client
##
##    def GetRunningProcessSystemIdByExecutableName(self, Server, ExeName, Flags):
##        '-no docstring-'
##        #return Id
##
##    def ConnectSession(self, Flags, HistoryLimit):
##        '-no docstring-'
##        #return 
##
##    def GetExitCode(self):
##        '-no docstring-'
##        #return Code
##
##    def SetOutputLinePrefix(self, Prefix):
##        '-no docstring-'
##        #return 
##
##    def AddProcessOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def AttachKernel(self, Flags, ConnectOptions):
##        '-no docstring-'
##        #return 
##
##    def GetKernelConnectionOptions(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, OptionsSize
##
##    def DispatchCallbacks(self, Timeout):
##        '-no docstring-'
##        #return 
##
##    def WriteDumpFile(self, DumpFile, Qualifier):
##        '-no docstring-'
##        #return 
##
##    def ExitDispatch(self, Client):
##        '-no docstring-'
##        #return 
##
##    def DetachCurrentProcess(self):
##        '-no docstring-'
##        #return 
##
##    def SetOutputWidth(self, Columns):
##        '-no docstring-'
##        #return 
##
##    def CreateProcessAndAttach(self, Server, CommandLine, CreateFlags, ProcessId, AttachFlags):
##        '-no docstring-'
##        #return 
##
##    def RemoveProcessOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def OutputServers(self, OutputControl, Machine, Flags):
##        '-no docstring-'
##        #return 
##
##    def GetOutputLinePrefix(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, PrefixSize
##
##    def IsKernelDebuggerEnabled(self):
##        '-no docstring-'
##        #return 
##
##    def EndSession(self, Flags):
##        '-no docstring-'
##        #return 
##
##    def TerminateCurrentProcess(self):
##        '-no docstring-'
##        #return 
##
##    def EndProcessServer(self, Server):
##        '-no docstring-'
##        #return 
##
##    def GetRunningProcessSystemIds(self, Server, Count):
##        '-no docstring-'
##        #return Ids, ActualCount
##
##    def CreateProcess(self, Server, CommandLine, CreateFlags):
##        '-no docstring-'
##        #return 
##
##    def SetKernelConnectionOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def DisconnectProcessServer(self, Server):
##        '-no docstring-'
##        #return 
##
##    def GetOutputCallbacks(self):
##        '-no docstring-'
##        #return Callbacks
##
##    def SetOtherOutputMask(self, Client, Mask):
##        '-no docstring-'
##        #return 
##
##    def SetOutputCallbacks(self, Callbacks):
##        '-no docstring-'
##        #return 
##
##    def OutputIdentity(self, OutputControl, Flags, Format):
##        '-no docstring-'
##        #return 
##
##    def GetRunningProcessDescription(self, Server, SystemId, Flags, ExeNameSize, DescriptionSize):
##        '-no docstring-'
##        #return ExeName, ActualExeNameSize, Description, ActualDescriptionSize
##
##    def WriteDumpFile2(self, DumpFile, Qualifier, FormatFlags, Comment):
##        '-no docstring-'
##        #return 
##
##    def GetIdentity(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, IdentitySize
##
##    def WaitForProcessServerEnd(self, Timeout):
##        '-no docstring-'
##        #return 
##
##    def StartServer(self, Options):
##        '-no docstring-'
##        #return 
##
##    def AttachProcess(self, Server, ProcessId, AttachFlags):
##        '-no docstring-'
##        #return 
##
##    def FlushCallbacks(self):
##        '-no docstring-'
##        #return 
##
##    def GetEventCallbacks(self):
##        '-no docstring-'
##        #return Callbacks
##
##    def DetachProcesses(self):
##        '-no docstring-'
##        #return 
##
##    def AbandonCurrentProcess(self):
##        '-no docstring-'
##        #return 
##
##    def GetOtherOutputMask(self, Client):
##        '-no docstring-'
##        #return Mask
##
##    def GetOutputWidth(self):
##        '-no docstring-'
##        #return Columns
##
##    def ConnectProcessServer(self, RemoteOptions):
##        '-no docstring-'
##        #return Server
##
##    def SetInputCallbacks(self, Callbacks):
##        '-no docstring-'
##        #return 
##
##    def SetProcessOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def GetProcessOptions(self):
##        '-no docstring-'
##        #return Options
##
##    def AddDumpInformationFile(self, InfoFile, Type):
##        '-no docstring-'
##        #return 
##
##    def GetInputCallbacks(self):
##        '-no docstring-'
##        #return Callbacks
##


# values for enumeration '__MIDL___MIDL_itf_DbgEng_0000_0000_0019'
STACK_SIZE_PARAM_IS_A_RESERVATION = 65536
__MIDL___MIDL_itf_DbgEng_0000_0000_0019 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0000_0000_0020'
CREATE_BREAKAWAY_FROM_JOB = 16777216
__MIDL___MIDL_itf_DbgEng_0000_0000_0020 = c_int # enum
class _IMAGE_DATA_DIRECTORY(Structure):
    pass
_IMAGE_DATA_DIRECTORY._fields_ = [
    ('VirtualAddress', c_ulong),
    ('Size', c_ulong),
]
assert sizeof(_IMAGE_DATA_DIRECTORY) == 8, sizeof(_IMAGE_DATA_DIRECTORY)
assert alignment(_IMAGE_DATA_DIRECTORY) == 4, alignment(_IMAGE_DATA_DIRECTORY)

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0102'
DEBUG_DATA_OffsetPrcbCurrentThread = 692
__MIDL___MIDL_itf_DbgEng_0001_0077_0102 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0000_0000_0018'
ABOVE_NORMAL_PRIORITY_CLASS = 32768
__MIDL___MIDL_itf_DbgEng_0000_0000_0018 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0000_0000_0023'
CREATE_NO_WINDOW = 134217728
__MIDL___MIDL_itf_DbgEng_0000_0000_0023 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0098_0011'
DEBUG_KNOWN_STRUCT_GET_SINGLE_LINE_OUTPUT = 2
__MIDL___MIDL_itf_DbgEng_0001_0098_0011 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0061'
DEBUG_ENGOPT_ALL = 524287
__MIDL___MIDL_itf_DbgEng_0001_0073_0061 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0000_0000_0024'
PROFILE_USER = 268435456
__MIDL___MIDL_itf_DbgEng_0000_0000_0024 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0085'
DEBUG_KERNEL_CONNECTION = 0
__MIDL___MIDL_itf_DbgEng_0001_0073_0085 = c_int # enum
class IDebugClient3(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'IDebugClient3'
    _iid_ = GUID('{DD492D7F-71B8-4AD6-A8DC-1C887479FF91}')
    _idlflags_ = []
IDebugClient3._methods_ = [
    COMMETHOD([], HRESULT, 'AttachKernel',
              ( ['in'], c_ulong, 'Flags' ),
              ( ['in', 'optional'], STRING, 'ConnectOptions' )),
    COMMETHOD([], HRESULT, 'GetKernelConnectionOptions',
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'OptionsSize' )),
    COMMETHOD([], HRESULT, 'SetKernelConnectionOptions',
              ( ['in'], STRING, 'Options' )),
    COMMETHOD([], HRESULT, 'StartProcessServer',
              ( ['in'], c_ulong, 'Flags' ),
              ( ['in'], STRING, 'Options' ),
              ( ['in', 'optional'], c_void_p, 'Reserved' )),
    COMMETHOD([], HRESULT, 'ConnectProcessServer',
              ( ['in'], STRING, 'RemoteOptions' ),
              ( ['out'], POINTER(c_ulonglong), 'Server' )),
    COMMETHOD([], HRESULT, 'DisconnectProcessServer',
              ( ['in'], c_ulonglong, 'Server' )),
    COMMETHOD([], HRESULT, 'GetRunningProcessSystemIds',
              ( ['in'], c_ulonglong, 'Server' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'Ids' ),
              ( ['in', 'optional'], c_ulong, 'Count' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ActualCount' )),
    COMMETHOD([], HRESULT, 'GetRunningProcessSystemIdByExecutableName',
              ( ['in'], c_ulonglong, 'Server' ),
              ( ['in'], STRING, 'ExeName' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetRunningProcessDescription',
              ( ['in'], c_ulonglong, 'Server' ),
              ( ['in'], c_ulong, 'SystemId' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out', 'optional'], STRING, 'ExeName' ),
              ( ['in', 'optional'], c_ulong, 'ExeNameSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ActualExeNameSize' ),
              ( ['out', 'optional'], STRING, 'Description' ),
              ( ['in', 'optional'], c_ulong, 'DescriptionSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ActualDescriptionSize' )),
    COMMETHOD([], HRESULT, 'AttachProcess',
              ( ['in'], c_ulonglong, 'Server' ),
              ( ['in'], c_ulong, 'ProcessId' ),
              ( ['in'], c_ulong, 'AttachFlags' )),
    COMMETHOD([], HRESULT, 'CreateProcess',
              ( ['in'], c_ulonglong, 'Server' ),
              ( ['in'], STRING, 'CommandLine' ),
              ( ['in'], c_ulong, 'CreateFlags' )),
    COMMETHOD([], HRESULT, 'CreateProcessAndAttach',
              ( ['in'], c_ulonglong, 'Server' ),
              ( ['in', 'optional'], STRING, 'CommandLine' ),
              ( ['in', 'optional'], c_ulong, 'CreateFlags' ),
              ( ['in', 'optional'], c_ulong, 'ProcessId' ),
              ( ['in', 'optional'], c_ulong, 'AttachFlags' )),
    COMMETHOD([], HRESULT, 'GetProcessOptions',
              ( ['out'], POINTER(c_ulong), 'Options' )),
    COMMETHOD([], HRESULT, 'AddProcessOptions',
              ( ['in'], c_ulong, 'Options' )),
    COMMETHOD([], HRESULT, 'RemoveProcessOptions',
              ( ['in'], c_ulong, 'Options' )),
    COMMETHOD([], HRESULT, 'SetProcessOptions',
              ( ['in'], c_ulong, 'Options' )),
    COMMETHOD([], HRESULT, 'OpenDumpFile',
              ( ['in'], STRING, 'DumpFile' )),
    COMMETHOD([], HRESULT, 'WriteDumpFile',
              ( ['in'], STRING, 'DumpFile' ),
              ( ['in'], c_ulong, 'Qualifier' )),
    COMMETHOD([], HRESULT, 'ConnectSession',
              ( ['in'], c_ulong, 'Flags' ),
              ( ['in'], c_ulong, 'HistoryLimit' )),
    COMMETHOD([], HRESULT, 'StartServer',
              ( ['in'], STRING, 'Options' )),
    COMMETHOD([], HRESULT, 'OutputServers',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], STRING, 'Machine' ),
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'TerminateProcesses'),
    COMMETHOD([], HRESULT, 'DetachProcesses'),
    COMMETHOD([], HRESULT, 'EndSession',
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'GetExitCode',
              ( ['out'], POINTER(c_ulong), 'Code' )),
    COMMETHOD([], HRESULT, 'DispatchCallbacks',
              ( ['in'], c_ulong, 'Timeout' )),
    COMMETHOD([], HRESULT, 'ExitDispatch',
              ( ['in'], POINTER(IDebugClient), 'Client' )),
    COMMETHOD([], HRESULT, 'CreateClient',
              ( ['out'], POINTER(POINTER(IDebugClient)), 'Client' )),
    COMMETHOD([], HRESULT, 'GetInputCallbacks',
              ( ['out'], POINTER(POINTER(IDebugInputCallbacks)), 'Callbacks' )),
    COMMETHOD([], HRESULT, 'SetInputCallbacks',
              ( ['in', 'optional'], POINTER(IDebugInputCallbacks), 'Callbacks' )),
    COMMETHOD([], HRESULT, 'GetOutputCallbacks',
              ( ['out'], POINTER(POINTER(IDebugOutputCallbacks)), 'Callbacks' )),
    COMMETHOD([], HRESULT, 'SetOutputCallbacks',
              ( ['in', 'optional'], POINTER(IDebugOutputCallbacks), 'Callbacks' )),
    COMMETHOD([], HRESULT, 'GetOutputMask',
              ( ['out'], POINTER(c_ulong), 'Mask' )),
    COMMETHOD([], HRESULT, 'SetOutputMask',
              ( ['in'], c_ulong, 'Mask' )),
    COMMETHOD([], HRESULT, 'GetOtherOutputMask',
              ( ['in'], POINTER(IDebugClient), 'Client' ),
              ( ['out'], POINTER(c_ulong), 'Mask' )),
    COMMETHOD([], HRESULT, 'SetOtherOutputMask',
              ( ['in'], POINTER(IDebugClient), 'Client' ),
              ( ['in'], c_ulong, 'Mask' )),
    COMMETHOD([], HRESULT, 'GetOutputWidth',
              ( ['out'], POINTER(c_ulong), 'Columns' )),
    COMMETHOD([], HRESULT, 'SetOutputWidth',
              ( ['in'], c_ulong, 'Columns' )),
    COMMETHOD([], HRESULT, 'GetOutputLinePrefix',
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'PrefixSize' )),
    COMMETHOD([], HRESULT, 'SetOutputLinePrefix',
              ( ['in', 'optional'], STRING, 'Prefix' )),
    COMMETHOD([], HRESULT, 'GetIdentity',
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'IdentitySize' )),
    COMMETHOD([], HRESULT, 'OutputIdentity',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['in'], STRING, 'Format' )),
    COMMETHOD([], HRESULT, 'GetEventCallbacks',
              ( ['out'], POINTER(POINTER(IDebugEventCallbacks)), 'Callbacks' )),
    COMMETHOD([], HRESULT, 'SetEventCallbacks',
              ( ['in', 'optional'], POINTER(IDebugEventCallbacks), 'Callbacks' )),
    COMMETHOD([], HRESULT, 'FlushCallbacks'),
    COMMETHOD([], HRESULT, 'WriteDumpFile2',
              ( ['in'], STRING, 'DumpFile' ),
              ( ['in'], c_ulong, 'Qualifier' ),
              ( ['in'], c_ulong, 'FormatFlags' ),
              ( ['in', 'optional'], STRING, 'Comment' )),
    COMMETHOD([], HRESULT, 'AddDumpInformationFile',
              ( ['in'], STRING, 'InfoFile' ),
              ( ['in'], c_ulong, 'Type' )),
    COMMETHOD([], HRESULT, 'EndProcessServer',
              ( ['in'], c_ulonglong, 'Server' )),
    COMMETHOD([], HRESULT, 'WaitForProcessServerEnd',
              ( ['in'], c_ulong, 'Timeout' )),
    COMMETHOD([], HRESULT, 'IsKernelDebuggerEnabled'),
    COMMETHOD([], HRESULT, 'TerminateCurrentProcess'),
    COMMETHOD([], HRESULT, 'DetachCurrentProcess'),
    COMMETHOD([], HRESULT, 'AbandonCurrentProcess'),
    COMMETHOD([], HRESULT, 'GetRunningProcessSystemIdByExecutableNameWide',
              ( ['in'], c_ulonglong, 'Server' ),
              ( ['in'], POINTER(c_ushort), 'ExeName' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetRunningProcessDescriptionWide',
              ( ['in'], c_ulonglong, 'Server' ),
              ( ['in'], c_ulong, 'SystemId' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out', 'optional'], POINTER(c_ushort), 'ExeName' ),
              ( ['in', 'optional'], c_ulong, 'ExeNameSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ActualExeNameSize' ),
              ( ['out', 'optional'], POINTER(c_ushort), 'Description' ),
              ( ['in', 'optional'], c_ulong, 'DescriptionSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ActualDescriptionSize' )),
    COMMETHOD([], HRESULT, 'CreateProcessWide',
              ( ['in'], c_ulonglong, 'Server' ),
              ( ['in'], POINTER(c_ushort), 'CommandLine' ),
              ( ['in'], c_ulong, 'CreateFlags' )),
    COMMETHOD([], HRESULT, 'CreateProcessAndAttachWide',
              ( ['in'], c_ulonglong, 'Server' ),
              ( ['in', 'optional'], POINTER(c_ushort), 'CommandLine' ),
              ( ['in', 'optional'], c_ulong, 'CreateFlags' ),
              ( ['in', 'optional'], c_ulong, 'ProcessId' ),
              ( ['in', 'optional'], c_ulong, 'AttachFlags' )),
]
################################################################
## code template for IDebugClient3 implementation
##class IDebugClient3_Impl(object):
##    def StartProcessServer(self, Flags, Options, Reserved):
##        '-no docstring-'
##        #return 
##
##    def SetEventCallbacks(self, Callbacks):
##        '-no docstring-'
##        #return 
##
##    def GetOutputMask(self):
##        '-no docstring-'
##        #return Mask
##
##    def OpenDumpFile(self, DumpFile):
##        '-no docstring-'
##        #return 
##
##    def SetOutputMask(self, Mask):
##        '-no docstring-'
##        #return 
##
##    def TerminateProcesses(self):
##        '-no docstring-'
##        #return 
##
##    def CreateClient(self):
##        '-no docstring-'
##        #return Client
##
##    def GetRunningProcessSystemIdByExecutableName(self, Server, ExeName, Flags):
##        '-no docstring-'
##        #return Id
##
##    def ConnectSession(self, Flags, HistoryLimit):
##        '-no docstring-'
##        #return 
##
##    def GetExitCode(self):
##        '-no docstring-'
##        #return Code
##
##    def SetOutputLinePrefix(self, Prefix):
##        '-no docstring-'
##        #return 
##
##    def AddProcessOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def AttachKernel(self, Flags, ConnectOptions):
##        '-no docstring-'
##        #return 
##
##    def GetKernelConnectionOptions(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, OptionsSize
##
##    def DispatchCallbacks(self, Timeout):
##        '-no docstring-'
##        #return 
##
##    def WriteDumpFile(self, DumpFile, Qualifier):
##        '-no docstring-'
##        #return 
##
##    def ExitDispatch(self, Client):
##        '-no docstring-'
##        #return 
##
##    def DetachCurrentProcess(self):
##        '-no docstring-'
##        #return 
##
##    def SetOutputWidth(self, Columns):
##        '-no docstring-'
##        #return 
##
##    def CreateProcessAndAttach(self, Server, CommandLine, CreateFlags, ProcessId, AttachFlags):
##        '-no docstring-'
##        #return 
##
##    def RemoveProcessOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def OutputServers(self, OutputControl, Machine, Flags):
##        '-no docstring-'
##        #return 
##
##    def GetOutputLinePrefix(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, PrefixSize
##
##    def IsKernelDebuggerEnabled(self):
##        '-no docstring-'
##        #return 
##
##    def EndSession(self, Flags):
##        '-no docstring-'
##        #return 
##
##    def TerminateCurrentProcess(self):
##        '-no docstring-'
##        #return 
##
##    def EndProcessServer(self, Server):
##        '-no docstring-'
##        #return 
##
##    def GetRunningProcessSystemIds(self, Server, Count):
##        '-no docstring-'
##        #return Ids, ActualCount
##
##    def CreateProcess(self, Server, CommandLine, CreateFlags):
##        '-no docstring-'
##        #return 
##
##    def SetKernelConnectionOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def DisconnectProcessServer(self, Server):
##        '-no docstring-'
##        #return 
##
##    def GetOutputCallbacks(self):
##        '-no docstring-'
##        #return Callbacks
##
##    def SetOtherOutputMask(self, Client, Mask):
##        '-no docstring-'
##        #return 
##
##    def SetOutputCallbacks(self, Callbacks):
##        '-no docstring-'
##        #return 
##
##    def OutputIdentity(self, OutputControl, Flags, Format):
##        '-no docstring-'
##        #return 
##
##    def GetRunningProcessDescription(self, Server, SystemId, Flags, ExeNameSize, DescriptionSize):
##        '-no docstring-'
##        #return ExeName, ActualExeNameSize, Description, ActualDescriptionSize
##
##    def WriteDumpFile2(self, DumpFile, Qualifier, FormatFlags, Comment):
##        '-no docstring-'
##        #return 
##
##    def GetIdentity(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, IdentitySize
##
##    def WaitForProcessServerEnd(self, Timeout):
##        '-no docstring-'
##        #return 
##
##    def CreateProcessWide(self, Server, CommandLine, CreateFlags):
##        '-no docstring-'
##        #return 
##
##    def StartServer(self, Options):
##        '-no docstring-'
##        #return 
##
##    def AttachProcess(self, Server, ProcessId, AttachFlags):
##        '-no docstring-'
##        #return 
##
##    def FlushCallbacks(self):
##        '-no docstring-'
##        #return 
##
##    def GetEventCallbacks(self):
##        '-no docstring-'
##        #return Callbacks
##
##    def DetachProcesses(self):
##        '-no docstring-'
##        #return 
##
##    def AbandonCurrentProcess(self):
##        '-no docstring-'
##        #return 
##
##    def GetOtherOutputMask(self, Client):
##        '-no docstring-'
##        #return Mask
##
##    def GetOutputWidth(self):
##        '-no docstring-'
##        #return Columns
##
##    def GetRunningProcessSystemIdByExecutableNameWide(self, Server, ExeName, Flags):
##        '-no docstring-'
##        #return Id
##
##    def ConnectProcessServer(self, RemoteOptions):
##        '-no docstring-'
##        #return Server
##
##    def SetInputCallbacks(self, Callbacks):
##        '-no docstring-'
##        #return 
##
##    def SetProcessOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def GetRunningProcessDescriptionWide(self, Server, SystemId, Flags, ExeNameSize, DescriptionSize):
##        '-no docstring-'
##        #return ExeName, ActualExeNameSize, Description, ActualDescriptionSize
##
##    def GetProcessOptions(self):
##        '-no docstring-'
##        #return Options
##
##    def CreateProcessAndAttachWide(self, Server, CommandLine, CreateFlags, ProcessId, AttachFlags):
##        '-no docstring-'
##        #return 
##
##    def AddDumpInformationFile(self, InfoFile, Type):
##        '-no docstring-'
##        #return 
##
##    def GetInputCallbacks(self):
##        '-no docstring-'
##        #return Callbacks
##


# values for enumeration '__MIDL___MIDL_itf_DbgEng_0000_0000_0026'
PROFILE_SERVER = 1073741824
__MIDL___MIDL_itf_DbgEng_0000_0000_0026 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0000_0000_0027'
CREATE_IGNORE_SYSTEM_DEFAULT = -2147483648
__MIDL___MIDL_itf_DbgEng_0000_0000_0027 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0064_0001'
DEBUG_GET_TEXT_COMPLETIONS_NO_DOT_COMMANDS = 1
__MIDL___MIDL_itf_DbgEng_0001_0064_0001 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0064_0002'
DEBUG_GET_TEXT_COMPLETIONS_NO_EXTENSION_COMMANDS = 2
__MIDL___MIDL_itf_DbgEng_0001_0064_0002 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0022'
DEBUG_OUTCTL_SEND_MASK = 7
__MIDL___MIDL_itf_DbgEng_0001_0073_0022 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0086'
DEBUG_KERNEL_LOCAL = 1
__MIDL___MIDL_itf_DbgEng_0001_0073_0086 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0064_0006'
DEBUG_GET_TEXT_COMPLETIONS_IS_SYMBOL = 4
__MIDL___MIDL_itf_DbgEng_0001_0064_0006 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0064_0003'
DEBUG_GET_TEXT_COMPLETIONS_NO_SYMBOLS = 4
__MIDL___MIDL_itf_DbgEng_0001_0064_0003 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0069_0007'
DEBUG_FORMAT_USER_SMALL_UNLOADED_MODULES = 4
__MIDL___MIDL_itf_DbgEng_0001_0069_0007 = c_int # enum
class _DEBUG_GET_TEXT_COMPLETIONS_IN(Structure):
    pass
_DEBUG_GET_TEXT_COMPLETIONS_IN._fields_ = [
    ('Flags', c_ulong),
    ('MatchCountLimit', c_ulong),
    ('Reserved', c_ulonglong * 3),
]
assert sizeof(_DEBUG_GET_TEXT_COMPLETIONS_IN) == 32, sizeof(_DEBUG_GET_TEXT_COMPLETIONS_IN)
assert alignment(_DEBUG_GET_TEXT_COMPLETIONS_IN) == 8, alignment(_DEBUG_GET_TEXT_COMPLETIONS_IN)

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0083'
DEBUG_DUMP_TRACE_LOG = 1028
__MIDL___MIDL_itf_DbgEng_0001_0073_0083 = c_int # enum
class _DEBUG_LAST_EVENT_INFO_EXCEPTION(Structure):
    pass
class _EXCEPTION_RECORD64(Structure):
    pass
_EXCEPTION_RECORD64._fields_ = [
    ('ExceptionCode', c_ulong),
    ('ExceptionFlags', c_ulong),
    ('ExceptionRecord', c_longlong),
    ('ExceptionAddress', c_longlong),
    ('NumberParameters', c_ulong),
    ('__unusedAlignment', c_ulong),
    ('ExceptionInformation', c_longlong * 15),
]
assert sizeof(_EXCEPTION_RECORD64) == 152, sizeof(_EXCEPTION_RECORD64)
assert alignment(_EXCEPTION_RECORD64) == 8, alignment(_EXCEPTION_RECORD64)
_DEBUG_LAST_EVENT_INFO_EXCEPTION._fields_ = [
    ('ExceptionRecord', _EXCEPTION_RECORD64),
    ('FirstChance', c_ulong),
]
assert sizeof(_DEBUG_LAST_EVENT_INFO_EXCEPTION) == 160, sizeof(_DEBUG_LAST_EVENT_INFO_EXCEPTION)
assert alignment(_DEBUG_LAST_EVENT_INFO_EXCEPTION) == 8, alignment(_DEBUG_LAST_EVENT_INFO_EXCEPTION)

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0064_0007'
DEBUG_REQUEST_SOURCE_PATH_HAS_SOURCE_SERVER = 0
__MIDL___MIDL_itf_DbgEng_0001_0064_0007 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0064_0004'
DEBUG_GET_TEXT_COMPLETIONS_IS_DOT_COMMAND = 1
__MIDL___MIDL_itf_DbgEng_0001_0064_0004 = c_int # enum
class _IMAGE_NT_HEADERS64(Structure):
    pass
class _IMAGE_FILE_HEADER(Structure):
    pass
_IMAGE_FILE_HEADER._fields_ = [
    ('Machine', c_ushort),
    ('NumberOfSections', c_ushort),
    ('TimeDateStamp', c_ulong),
    ('PointerToSymbolTable', c_ulong),
    ('NumberOfSymbols', c_ulong),
    ('SizeOfOptionalHeader', c_ushort),
    ('Characteristics', c_ushort),
]
assert sizeof(_IMAGE_FILE_HEADER) == 20, sizeof(_IMAGE_FILE_HEADER)
assert alignment(_IMAGE_FILE_HEADER) == 4, alignment(_IMAGE_FILE_HEADER)
class _IMAGE_OPTIONAL_HEADER64(Structure):
    pass
_IMAGE_OPTIONAL_HEADER64._fields_ = [
    ('Magic', c_ushort),
    ('MajorLinkerVersion', c_ubyte),
    ('MinorLinkerVersion', c_ubyte),
    ('SizeOfCode', c_ulong),
    ('SizeOfInitializedData', c_ulong),
    ('SizeOfUninitializedData', c_ulong),
    ('AddressOfEntryPoint', c_ulong),
    ('BaseOfCode', c_ulong),
    ('ImageBase', c_ulonglong),
    ('SectionAlignment', c_ulong),
    ('FileAlignment', c_ulong),
    ('MajorOperatingSystemVersion', c_ushort),
    ('MinorOperatingSystemVersion', c_ushort),
    ('MajorImageVersion', c_ushort),
    ('MinorImageVersion', c_ushort),
    ('MajorSubsystemVersion', c_ushort),
    ('MinorSubsystemVersion', c_ushort),
    ('Win32VersionValue', c_ulong),
    ('SizeOfImage', c_ulong),
    ('SizeOfHeaders', c_ulong),
    ('CheckSum', c_ulong),
    ('Subsystem', c_ushort),
    ('DllCharacteristics', c_ushort),
    ('SizeOfStackReserve', c_ulonglong),
    ('SizeOfStackCommit', c_ulonglong),
    ('SizeOfHeapReserve', c_ulonglong),
    ('SizeOfHeapCommit', c_ulonglong),
    ('LoaderFlags', c_ulong),
    ('NumberOfRvaAndSizes', c_ulong),
    ('DataDirectory', _IMAGE_DATA_DIRECTORY * 16),
]
assert sizeof(_IMAGE_OPTIONAL_HEADER64) == 240, sizeof(_IMAGE_OPTIONAL_HEADER64)
assert alignment(_IMAGE_OPTIONAL_HEADER64) == 8, alignment(_IMAGE_OPTIONAL_HEADER64)
_IMAGE_NT_HEADERS64._fields_ = [
    ('Signature', c_ulong),
    ('FileHeader', _IMAGE_FILE_HEADER),
    ('OptionalHeader', _IMAGE_OPTIONAL_HEADER64),
]
assert sizeof(_IMAGE_NT_HEADERS64) == 264, sizeof(_IMAGE_NT_HEADERS64)
assert alignment(_IMAGE_NT_HEADERS64) == 8, alignment(_IMAGE_NT_HEADERS64)
class IDebugSymbolGroup(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'IDebugSymbolGroup'
    _iid_ = GUID('{F2528316-0F1A-4431-AEED-11D096E1E2AB}')
    _idlflags_ = []
class _DEBUG_SYMBOL_PARAMETERS(Structure):
    pass
IDebugSymbolGroup._methods_ = [
    COMMETHOD([], HRESULT, 'GetNumberSymbols',
              ( ['out'], POINTER(c_ulong), 'Number' )),
    COMMETHOD([], HRESULT, 'AddSymbol',
              ( ['in'], STRING, 'Name' ),
              ( ['in', 'out'], POINTER(c_ulong), 'Index' )),
    COMMETHOD([], HRESULT, 'RemoveSymbolByName',
              ( ['in'], STRING, 'Name' )),
    COMMETHOD([], HRESULT, 'RemoveSymbolByIndex',
              ( ['in'], c_ulong, 'Index' )),
    COMMETHOD([], HRESULT, 'GetSymbolName',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'NameSize' )),
    COMMETHOD([], HRESULT, 'GetSymbolParameters',
              ( ['in'], c_ulong, 'Start' ),
              ( ['in'], c_ulong, 'Count' ),
              ( ['out'], POINTER(_DEBUG_SYMBOL_PARAMETERS), 'Params' )),
    COMMETHOD([], HRESULT, 'ExpandSymbol',
              ( ['in'], c_ulong, 'Index' ),
              ( ['in'], c_int, 'Expand' )),
    COMMETHOD([], HRESULT, 'OutputSymbols',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['in'], c_ulong, 'Start' ),
              ( ['in'], c_ulong, 'Count' )),
    COMMETHOD([], HRESULT, 'WriteSymbol',
              ( ['in'], c_ulong, 'Index' ),
              ( ['in'], STRING, 'Value' )),
    COMMETHOD([], HRESULT, 'OutputAsType',
              ( ['in'], c_ulong, 'Index' ),
              ( ['in'], STRING, 'Type' )),
]
################################################################
## code template for IDebugSymbolGroup implementation
##class IDebugSymbolGroup_Impl(object):
##    def GetSymbolName(self, Index, BufferSize):
##        '-no docstring-'
##        #return Buffer, NameSize
##
##    def WriteSymbol(self, Index, Value):
##        '-no docstring-'
##        #return 
##
##    def RemoveSymbolByIndex(self, Index):
##        '-no docstring-'
##        #return 
##
##    def OutputSymbols(self, OutputControl, Flags, Start, Count):
##        '-no docstring-'
##        #return 
##
##    def ExpandSymbol(self, Index, Expand):
##        '-no docstring-'
##        #return 
##
##    def GetNumberSymbols(self):
##        '-no docstring-'
##        #return Number
##
##    def OutputAsType(self, Index, Type):
##        '-no docstring-'
##        #return 
##
##    def GetSymbolParameters(self, Start, Count):
##        '-no docstring-'
##        #return Params
##
##    def AddSymbol(self, Name):
##        '-no docstring-'
##        #return Index
##
##    def RemoveSymbolByName(self, Name):
##        '-no docstring-'
##        #return 
##


# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0064_0005'
DEBUG_GET_TEXT_COMPLETIONS_IS_EXTENSION_COMMAND = 2
__MIDL___MIDL_itf_DbgEng_0001_0064_0005 = c_int # enum
class _DEBUG_GET_TEXT_COMPLETIONS_OUT(Structure):
    pass
_DEBUG_GET_TEXT_COMPLETIONS_OUT._fields_ = [
    ('Flags', c_ulong),
    ('ReplaceIndex', c_ulong),
    ('MatchCount', c_ulong),
    ('Reserved1', c_ulong),
    ('Reserved2', c_ulonglong * 2),
]
assert sizeof(_DEBUG_GET_TEXT_COMPLETIONS_OUT) == 32, sizeof(_DEBUG_GET_TEXT_COMPLETIONS_OUT)
assert alignment(_DEBUG_GET_TEXT_COMPLETIONS_OUT) == 8, alignment(_DEBUG_GET_TEXT_COMPLETIONS_OUT)
class _DEBUG_PROCESSOR_IDENTIFICATION_ARM(Structure):
    pass
_DEBUG_PROCESSOR_IDENTIFICATION_ARM._fields_ = [
    ('Type', c_ulong),
    ('Revision', c_ulong),
]
assert sizeof(_DEBUG_PROCESSOR_IDENTIFICATION_ARM) == 8, sizeof(_DEBUG_PROCESSOR_IDENTIFICATION_ARM)
assert alignment(_DEBUG_PROCESSOR_IDENTIFICATION_ARM) == 4, alignment(_DEBUG_PROCESSOR_IDENTIFICATION_ARM)

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0013'
DEBUG_PROC_DESC_NO_SESSION_ID = 16
__MIDL___MIDL_itf_DbgEng_0001_0068_0013 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0103'
DEBUG_DATA_OffsetPrcbMhz = 694
__MIDL___MIDL_itf_DbgEng_0001_0077_0103 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0080_0002'
DEBUG_VSOURCE_INVALID = 0
__MIDL___MIDL_itf_DbgEng_0001_0080_0002 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0064_0009'
DEBUG_REQUEST_TARGET_EXCEPTION_THREAD = 2
__MIDL___MIDL_itf_DbgEng_0001_0064_0009 = c_int # enum
class IDebugClient5(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'IDebugClient5'
    _iid_ = GUID('{E3ACB9D7-7EC2-4F0C-A0DA-E81E0CBBE628}')
    _idlflags_ = []
class IDebugOutputCallbacksWide(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'IDebugOutputCallbacksWide'
    _iid_ = GUID('{4C7FD663-C394-4E26-8EF1-34AD5ED3764C}')
    _idlflags_ = []
class IDebugEventCallbacksWide(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'IDebugEventCallbacksWide'
    _iid_ = GUID('{0690E046-9C23-45AC-A04F-987AC29AD0D3}')
    _idlflags_ = []
IDebugClient5._methods_ = [
    COMMETHOD([], HRESULT, 'AttachKernel',
              ( ['in'], c_ulong, 'Flags' ),
              ( ['in', 'optional'], STRING, 'ConnectOptions' )),
    COMMETHOD([], HRESULT, 'GetKernelConnectionOptions',
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'OptionsSize' )),
    COMMETHOD([], HRESULT, 'SetKernelConnectionOptions',
              ( ['in'], STRING, 'Options' )),
    COMMETHOD([], HRESULT, 'StartProcessServer',
              ( ['in'], c_ulong, 'Flags' ),
              ( ['in'], STRING, 'Options' ),
              ( ['in', 'optional'], c_void_p, 'Reserved' )),
    COMMETHOD([], HRESULT, 'ConnectProcessServer',
              ( ['in'], STRING, 'RemoteOptions' ),
              ( ['out'], POINTER(c_ulonglong), 'Server' )),
    COMMETHOD([], HRESULT, 'DisconnectProcessServer',
              ( ['in'], c_ulonglong, 'Server' )),
    COMMETHOD([], HRESULT, 'GetRunningProcessSystemIds',
              ( ['in'], c_ulonglong, 'Server' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'Ids' ),
              ( ['in', 'optional'], c_ulong, 'Count' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ActualCount' )),
    COMMETHOD([], HRESULT, 'GetRunningProcessSystemIdByExecutableName',
              ( ['in'], c_ulonglong, 'Server' ),
              ( ['in'], STRING, 'ExeName' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetRunningProcessDescription',
              ( ['in'], c_ulonglong, 'Server' ),
              ( ['in'], c_ulong, 'SystemId' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out', 'optional'], STRING, 'ExeName' ),
              ( ['in', 'optional'], c_ulong, 'ExeNameSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ActualExeNameSize' ),
              ( ['out', 'optional'], STRING, 'Description' ),
              ( ['in', 'optional'], c_ulong, 'DescriptionSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ActualDescriptionSize' )),
    COMMETHOD([], HRESULT, 'AttachProcess',
              ( ['in'], c_ulonglong, 'Server' ),
              ( ['in'], c_ulong, 'ProcessId' ),
              ( ['in'], c_ulong, 'AttachFlags' )),
    COMMETHOD([], HRESULT, 'CreateProcess',
              ( ['in'], c_ulonglong, 'Server' ),
              ( ['in'], STRING, 'CommandLine' ),
              ( ['in'], c_ulong, 'CreateFlags' )),
    COMMETHOD([], HRESULT, 'CreateProcessAndAttach',
              ( ['in'], c_ulonglong, 'Server' ),
              ( ['in', 'optional'], STRING, 'CommandLine' ),
              ( ['in', 'optional'], c_ulong, 'CreateFlags' ),
              ( ['in', 'optional'], c_ulong, 'ProcessId' ),
              ( ['in', 'optional'], c_ulong, 'AttachFlags' )),
    COMMETHOD([], HRESULT, 'GetProcessOptions',
              ( ['out'], POINTER(c_ulong), 'Options' )),
    COMMETHOD([], HRESULT, 'AddProcessOptions',
              ( ['in'], c_ulong, 'Options' )),
    COMMETHOD([], HRESULT, 'RemoveProcessOptions',
              ( ['in'], c_ulong, 'Options' )),
    COMMETHOD([], HRESULT, 'SetProcessOptions',
              ( ['in'], c_ulong, 'Options' )),
    COMMETHOD([], HRESULT, 'OpenDumpFile',
              ( ['in'], STRING, 'DumpFile' )),
    COMMETHOD([], HRESULT, 'WriteDumpFile',
              ( ['in'], STRING, 'DumpFile' ),
              ( ['in'], c_ulong, 'Qualifier' )),
    COMMETHOD([], HRESULT, 'ConnectSession',
              ( ['in'], c_ulong, 'Flags' ),
              ( ['in'], c_ulong, 'HistoryLimit' )),
    COMMETHOD([], HRESULT, 'StartServer',
              ( ['in'], STRING, 'Options' )),
    COMMETHOD([], HRESULT, 'OutputServers',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], STRING, 'Machine' ),
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'TerminateProcesses'),
    COMMETHOD([], HRESULT, 'DetachProcesses'),
    COMMETHOD([], HRESULT, 'EndSession',
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'GetExitCode',
              ( ['out'], POINTER(c_ulong), 'Code' )),
    COMMETHOD([], HRESULT, 'DispatchCallbacks',
              ( ['in'], c_ulong, 'Timeout' )),
    COMMETHOD([], HRESULT, 'ExitDispatch',
              ( ['in'], POINTER(IDebugClient), 'Client' )),
    COMMETHOD([], HRESULT, 'CreateClient',
              ( ['out'], POINTER(POINTER(IDebugClient)), 'Client' )),
    COMMETHOD([], HRESULT, 'GetInputCallbacks',
              ( ['out'], POINTER(POINTER(IDebugInputCallbacks)), 'Callbacks' )),
    COMMETHOD([], HRESULT, 'SetInputCallbacks',
              ( ['in', 'optional'], POINTER(IDebugInputCallbacks), 'Callbacks' )),
    COMMETHOD([], HRESULT, 'GetOutputCallbacks',
              ( ['out'], POINTER(POINTER(IDebugOutputCallbacks)), 'Callbacks' )),
    COMMETHOD([], HRESULT, 'SetOutputCallbacks',
              ( ['in', 'optional'], POINTER(IDebugOutputCallbacks), 'Callbacks' )),
    COMMETHOD([], HRESULT, 'GetOutputMask',
              ( ['out'], POINTER(c_ulong), 'Mask' )),
    COMMETHOD([], HRESULT, 'SetOutputMask',
              ( ['in'], c_ulong, 'Mask' )),
    COMMETHOD([], HRESULT, 'GetOtherOutputMask',
              ( ['in'], POINTER(IDebugClient), 'Client' ),
              ( ['out'], POINTER(c_ulong), 'Mask' )),
    COMMETHOD([], HRESULT, 'SetOtherOutputMask',
              ( ['in'], POINTER(IDebugClient), 'Client' ),
              ( ['in'], c_ulong, 'Mask' )),
    COMMETHOD([], HRESULT, 'GetOutputWidth',
              ( ['out'], POINTER(c_ulong), 'Columns' )),
    COMMETHOD([], HRESULT, 'SetOutputWidth',
              ( ['in'], c_ulong, 'Columns' )),
    COMMETHOD([], HRESULT, 'GetOutputLinePrefix',
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'PrefixSize' )),
    COMMETHOD([], HRESULT, 'SetOutputLinePrefix',
              ( ['in', 'optional'], STRING, 'Prefix' )),
    COMMETHOD([], HRESULT, 'GetIdentity',
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'IdentitySize' )),
    COMMETHOD([], HRESULT, 'OutputIdentity',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['in'], STRING, 'Format' )),
    COMMETHOD([], HRESULT, 'GetEventCallbacks',
              ( ['out'], POINTER(POINTER(IDebugEventCallbacks)), 'Callbacks' )),
    COMMETHOD([], HRESULT, 'SetEventCallbacks',
              ( ['in', 'optional'], POINTER(IDebugEventCallbacks), 'Callbacks' )),
    COMMETHOD([], HRESULT, 'FlushCallbacks'),
    COMMETHOD([], HRESULT, 'WriteDumpFile2',
              ( ['in'], STRING, 'DumpFile' ),
              ( ['in'], c_ulong, 'Qualifier' ),
              ( ['in'], c_ulong, 'FormatFlags' ),
              ( ['in', 'optional'], STRING, 'Comment' )),
    COMMETHOD([], HRESULT, 'AddDumpInformationFile',
              ( ['in'], STRING, 'InfoFile' ),
              ( ['in'], c_ulong, 'Type' )),
    COMMETHOD([], HRESULT, 'EndProcessServer',
              ( ['in'], c_ulonglong, 'Server' )),
    COMMETHOD([], HRESULT, 'WaitForProcessServerEnd',
              ( ['in'], c_ulong, 'Timeout' )),
    COMMETHOD([], HRESULT, 'IsKernelDebuggerEnabled'),
    COMMETHOD([], HRESULT, 'TerminateCurrentProcess'),
    COMMETHOD([], HRESULT, 'DetachCurrentProcess'),
    COMMETHOD([], HRESULT, 'AbandonCurrentProcess'),
    COMMETHOD([], HRESULT, 'GetRunningProcessSystemIdByExecutableNameWide',
              ( ['in'], c_ulonglong, 'Server' ),
              ( ['in'], POINTER(c_ushort), 'ExeName' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetRunningProcessDescriptionWide',
              ( ['in'], c_ulonglong, 'Server' ),
              ( ['in'], c_ulong, 'SystemId' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out', 'optional'], POINTER(c_ushort), 'ExeName' ),
              ( ['in', 'optional'], c_ulong, 'ExeNameSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ActualExeNameSize' ),
              ( ['out', 'optional'], POINTER(c_ushort), 'Description' ),
              ( ['in', 'optional'], c_ulong, 'DescriptionSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ActualDescriptionSize' )),
    COMMETHOD([], HRESULT, 'CreateProcessWide',
              ( ['in'], c_ulonglong, 'Server' ),
              ( ['in'], POINTER(c_ushort), 'CommandLine' ),
              ( ['in'], c_ulong, 'CreateFlags' )),
    COMMETHOD([], HRESULT, 'CreateProcessAndAttachWide',
              ( ['in'], c_ulonglong, 'Server' ),
              ( ['in', 'optional'], POINTER(c_ushort), 'CommandLine' ),
              ( ['in', 'optional'], c_ulong, 'CreateFlags' ),
              ( ['in', 'optional'], c_ulong, 'ProcessId' ),
              ( ['in', 'optional'], c_ulong, 'AttachFlags' )),
    COMMETHOD([], HRESULT, 'OpenDumpFileWide',
              ( ['in', 'optional'], POINTER(c_ushort), 'FileName' ),
              ( ['in', 'optional'], c_ulonglong, 'FileHandle' )),
    COMMETHOD([], HRESULT, 'WriteDumpFileWide',
              ( ['in', 'optional'], POINTER(c_ushort), 'FileName' ),
              ( ['in', 'optional'], c_ulonglong, 'FileHandle' ),
              ( ['in', 'optional'], c_ulong, 'Qualifier' ),
              ( ['in', 'optional'], c_ulong, 'FormatFlags' ),
              ( ['in', 'optional'], POINTER(c_ushort), 'Comment' )),
    COMMETHOD([], HRESULT, 'AddDumpInformationFileWide',
              ( ['in', 'optional'], POINTER(c_ushort), 'FileName' ),
              ( ['in', 'optional'], c_ulonglong, 'FileHandle' ),
              ( ['in', 'optional'], c_ulong, 'Type' )),
    COMMETHOD([], HRESULT, 'GetNumberDumpFiles',
              ( ['out'], POINTER(c_ulong), 'Number' )),
    COMMETHOD([], HRESULT, 'GetDumpFile',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'NameSize' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'Handle' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'Type' )),
    COMMETHOD([], HRESULT, 'GetDumpFileWide',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out', 'optional'], POINTER(c_ushort), 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'NameSize' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'Handle' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'Type' )),
    COMMETHOD([], HRESULT, 'AttachKernelWide',
              ( ['in'], c_ulong, 'Flags' ),
              ( ['in', 'optional'], POINTER(c_ushort), 'ConnectOptions' )),
    COMMETHOD([], HRESULT, 'GetKernelConnectionOptionsWide',
              ( ['out', 'optional'], POINTER(c_ushort), 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'OptionsSize' )),
    COMMETHOD([], HRESULT, 'SetKernelConnectionOptionsWide',
              ( ['in'], POINTER(c_ushort), 'Options' )),
    COMMETHOD([], HRESULT, 'StartProcessServerWide',
              ( ['in'], c_ulong, 'Flags' ),
              ( ['in'], POINTER(c_ushort), 'Options' ),
              ( ['in', 'optional'], c_void_p, 'Reserved' )),
    COMMETHOD([], HRESULT, 'ConnectProcessServerWide',
              ( ['in'], POINTER(c_ushort), 'RemoteOptions' ),
              ( ['out'], POINTER(c_ulonglong), 'Server' )),
    COMMETHOD([], HRESULT, 'StartServerWide',
              ( ['in'], POINTER(c_ushort), 'Options' )),
    COMMETHOD([], HRESULT, 'OutputServersWide',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], POINTER(c_ushort), 'Machine' ),
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'GetOutputCallbacksWide',
              ( ['out'], POINTER(POINTER(IDebugOutputCallbacksWide)), 'Callbacks' )),
    COMMETHOD([], HRESULT, 'SetOutputCallbacksWide',
              ( ['in'], POINTER(IDebugOutputCallbacksWide), 'Callbacks' )),
    COMMETHOD([], HRESULT, 'GetOutputLinePrefixWide',
              ( ['out', 'optional'], POINTER(c_ushort), 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'PrefixSize' )),
    COMMETHOD([], HRESULT, 'SetOutputLinePrefixWide',
              ( ['in', 'optional'], POINTER(c_ushort), 'Prefix' )),
    COMMETHOD([], HRESULT, 'GetIdentityWide',
              ( ['out', 'optional'], POINTER(c_ushort), 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'IdentitySize' )),
    COMMETHOD([], HRESULT, 'OutputIdentityWide',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['in'], POINTER(c_ushort), 'Format' )),
    COMMETHOD([], HRESULT, 'GetEventCallbacksWide',
              ( ['out'], POINTER(POINTER(IDebugEventCallbacksWide)), 'Callbacks' )),
    COMMETHOD([], HRESULT, 'SetEventCallbacksWide',
              ( ['in'], POINTER(IDebugEventCallbacksWide), 'Callbacks' )),
    COMMETHOD([], HRESULT, 'CreateProcess2',
              ( ['in'], c_ulonglong, 'Server' ),
              ( ['in'], STRING, 'CommandLine' ),
              ( ['in'], c_void_p, 'OptionsBuffer' ),
              ( ['in'], c_ulong, 'OptionsBufferSize' ),
              ( ['in', 'optional'], STRING, 'InitialDirectory' ),
              ( ['in', 'optional'], STRING, 'Environment' )),
    COMMETHOD([], HRESULT, 'CreateProcess2Wide',
              ( ['in'], c_ulonglong, 'Server' ),
              ( ['in'], POINTER(c_ushort), 'CommandLine' ),
              ( ['in'], c_void_p, 'OptionsBuffer' ),
              ( ['in'], c_ulong, 'OptionsBufferSize' ),
              ( ['in', 'optional'], POINTER(c_ushort), 'InitialDirectory' ),
              ( ['in', 'optional'], POINTER(c_ushort), 'Environment' )),
    COMMETHOD([], HRESULT, 'CreateProcessAndAttach2',
              ( ['in'], c_ulonglong, 'Server' ),
              ( ['in', 'optional'], STRING, 'CommandLine' ),
              ( ['in', 'optional'], c_void_p, 'OptionsBuffer' ),
              ( ['in', 'optional'], c_ulong, 'OptionsBufferSize' ),
              ( ['in', 'optional'], STRING, 'InitialDirectory' ),
              ( ['in', 'optional'], STRING, 'Environment' ),
              ( ['in', 'optional'], c_ulong, 'ProcessId' ),
              ( ['in', 'optional'], c_ulong, 'AttachFlags' )),
    COMMETHOD([], HRESULT, 'CreateProcessAndAttach2Wide',
              ( ['in'], c_ulonglong, 'Server' ),
              ( ['in', 'optional'], POINTER(c_ushort), 'CommandLine' ),
              ( ['in', 'optional'], c_void_p, 'OptionsBuffer' ),
              ( ['in', 'optional'], c_ulong, 'OptionsBufferSize' ),
              ( ['in', 'optional'], POINTER(c_ushort), 'InitialDirectory' ),
              ( ['in', 'optional'], POINTER(c_ushort), 'Environment' ),
              ( ['in', 'optional'], c_ulong, 'ProcessId' ),
              ( ['in', 'optional'], c_ulong, 'AttachFlags' )),
    COMMETHOD([], HRESULT, 'PushOutputLinePrefix',
              ( ['in', 'optional'], STRING, 'NewPrefix' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'Handle' )),
    COMMETHOD([], HRESULT, 'PushOutputLinePrefixWide',
              ( ['in', 'optional'], POINTER(c_ushort), 'NewPrefix' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'Handle' )),
    COMMETHOD([], HRESULT, 'PopOutputLinePrefix',
              ( ['in'], c_ulonglong, 'Handle' )),
    COMMETHOD([], HRESULT, 'GetNumberInputCallbacks',
              ( ['out'], POINTER(c_ulong), 'Count' )),
    COMMETHOD([], HRESULT, 'GetNumberOutputCallbacks',
              ( ['out'], POINTER(c_ulong), 'Count' )),
    COMMETHOD([], HRESULT, 'GetNumberEventCallbacks',
              ( ['in'], c_ulong, 'EventFlags' ),
              ( ['out'], POINTER(c_ulong), 'Count' )),
    COMMETHOD([], HRESULT, 'GetQuitLockString',
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'StringSize' )),
    COMMETHOD([], HRESULT, 'SetQuitLockString',
              ( ['in'], STRING, 'String' )),
    COMMETHOD([], HRESULT, 'GetQuitLockStringWide',
              ( ['out', 'optional'], POINTER(c_ushort), 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'StringSize' )),
    COMMETHOD([], HRESULT, 'SetQuitLockStringWide',
              ( ['in'], POINTER(c_ushort), 'String' )),
]
################################################################
## code template for IDebugClient5 implementation
##class IDebugClient5_Impl(object):
##    def SetOutputMask(self, Mask):
##        '-no docstring-'
##        #return 
##
##    def CreateClient(self):
##        '-no docstring-'
##        #return Client
##
##    def GetRunningProcessSystemIdByExecutableName(self, Server, ExeName, Flags):
##        '-no docstring-'
##        #return Id
##
##    def SetOutputLinePrefix(self, Prefix):
##        '-no docstring-'
##        #return 
##
##    def AddProcessOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def AttachKernel(self, Flags, ConnectOptions):
##        '-no docstring-'
##        #return 
##
##    def GetKernelConnectionOptions(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, OptionsSize
##
##    def CreateProcessAndAttach2Wide(self, Server, CommandLine, OptionsBuffer, OptionsBufferSize, InitialDirectory, Environment, ProcessId, AttachFlags):
##        '-no docstring-'
##        #return 
##
##    def StartProcessServerWide(self, Flags, Options, Reserved):
##        '-no docstring-'
##        #return 
##
##    def SetOtherOutputMask(self, Client, Mask):
##        '-no docstring-'
##        #return 
##
##    def GetNumberDumpFiles(self):
##        '-no docstring-'
##        #return Number
##
##    def EndSession(self, Flags):
##        '-no docstring-'
##        #return 
##
##    def GetOutputCallbacks(self):
##        '-no docstring-'
##        #return Callbacks
##
##    def AbandonCurrentProcess(self):
##        '-no docstring-'
##        #return 
##
##    def WaitForProcessServerEnd(self, Timeout):
##        '-no docstring-'
##        #return 
##
##    def SetKernelConnectionOptionsWide(self, Options):
##        '-no docstring-'
##        #return 
##
##    def OutputServersWide(self, OutputControl, Machine, Flags):
##        '-no docstring-'
##        #return 
##
##    def EndProcessServer(self, Server):
##        '-no docstring-'
##        #return 
##
##    def CreateProcessWide(self, Server, CommandLine, CreateFlags):
##        '-no docstring-'
##        #return 
##
##    def GetRunningProcessSystemIdByExecutableNameWide(self, Server, ExeName, Flags):
##        '-no docstring-'
##        #return Id
##
##    def GetRunningProcessDescriptionWide(self, Server, SystemId, Flags, ExeNameSize, DescriptionSize):
##        '-no docstring-'
##        #return ExeName, ActualExeNameSize, Description, ActualDescriptionSize
##
##    def CreateProcessAndAttachWide(self, Server, CommandLine, CreateFlags, ProcessId, AttachFlags):
##        '-no docstring-'
##        #return 
##
##    def GetOutputLinePrefixWide(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, PrefixSize
##
##    def StartProcessServer(self, Flags, Options, Reserved):
##        '-no docstring-'
##        #return 
##
##    def GetOutputMask(self):
##        '-no docstring-'
##        #return Mask
##
##    def CreateProcess2Wide(self, Server, CommandLine, OptionsBuffer, OptionsBufferSize, InitialDirectory, Environment):
##        '-no docstring-'
##        #return 
##
##    def DispatchCallbacks(self, Timeout):
##        '-no docstring-'
##        #return 
##
##    def OpenDumpFileWide(self, FileName, FileHandle):
##        '-no docstring-'
##        #return 
##
##    def ConnectSession(self, Flags, HistoryLimit):
##        '-no docstring-'
##        #return 
##
##    def GetOutputCallbacksWide(self):
##        '-no docstring-'
##        #return Callbacks
##
##    def GetIdentityWide(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, IdentitySize
##
##    def WriteDumpFile(self, DumpFile, Qualifier):
##        '-no docstring-'
##        #return 
##
##    def ExitDispatch(self, Client):
##        '-no docstring-'
##        #return 
##
##    def PopOutputLinePrefix(self, Handle):
##        '-no docstring-'
##        #return 
##
##    def StartServerWide(self, Options):
##        '-no docstring-'
##        #return 
##
##    def SetOutputLinePrefixWide(self, Prefix):
##        '-no docstring-'
##        #return 
##
##    def TerminateCurrentProcess(self):
##        '-no docstring-'
##        #return 
##
##    def GetEventCallbacksWide(self):
##        '-no docstring-'
##        #return Callbacks
##
##    def DisconnectProcessServer(self, Server):
##        '-no docstring-'
##        #return 
##
##    def OutputIdentity(self, OutputControl, Flags, Format):
##        '-no docstring-'
##        #return 
##
##    def SetOutputCallbacksWide(self, Callbacks):
##        '-no docstring-'
##        #return 
##
##    def WriteDumpFile2(self, DumpFile, Qualifier, FormatFlags, Comment):
##        '-no docstring-'
##        #return 
##
##    def AttachProcess(self, Server, ProcessId, AttachFlags):
##        '-no docstring-'
##        #return 
##
##    def FlushCallbacks(self):
##        '-no docstring-'
##        #return 
##
##    def AttachKernelWide(self, Flags, ConnectOptions):
##        '-no docstring-'
##        #return 
##
##    def DetachProcesses(self):
##        '-no docstring-'
##        #return 
##
##    def DetachCurrentProcess(self):
##        '-no docstring-'
##        #return 
##
##    def GetQuitLockString(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, StringSize
##
##    def GetKernelConnectionOptionsWide(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, OptionsSize
##
##    def ConnectProcessServer(self, RemoteOptions):
##        '-no docstring-'
##        #return Server
##
##    def SetInputCallbacks(self, Callbacks):
##        '-no docstring-'
##        #return 
##
##    def StartServer(self, Options):
##        '-no docstring-'
##        #return 
##
##    def CreateProcessAndAttach2(self, Server, CommandLine, OptionsBuffer, OptionsBufferSize, InitialDirectory, Environment, ProcessId, AttachFlags):
##        '-no docstring-'
##        #return 
##
##    def SetEventCallbacks(self, Callbacks):
##        '-no docstring-'
##        #return 
##
##    def GetOutputLinePrefix(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, PrefixSize
##
##    def TerminateProcesses(self):
##        '-no docstring-'
##        #return 
##
##    def GetExitCode(self):
##        '-no docstring-'
##        #return Code
##
##    def OutputServers(self, OutputControl, Machine, Flags):
##        '-no docstring-'
##        #return 
##
##    def IsKernelDebuggerEnabled(self):
##        '-no docstring-'
##        #return 
##
##    def GetRunningProcessSystemIds(self, Server, Count):
##        '-no docstring-'
##        #return Ids, ActualCount
##
##    def PushOutputLinePrefixWide(self, NewPrefix):
##        '-no docstring-'
##        #return Handle
##
##    def SetKernelConnectionOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def OutputIdentityWide(self, OutputControl, Flags, Format):
##        '-no docstring-'
##        #return 
##
##    def GetNumberInputCallbacks(self):
##        '-no docstring-'
##        #return Count
##
##    def SetOutputCallbacks(self, Callbacks):
##        '-no docstring-'
##        #return 
##
##    def GetRunningProcessDescription(self, Server, SystemId, Flags, ExeNameSize, DescriptionSize):
##        '-no docstring-'
##        #return ExeName, ActualExeNameSize, Description, ActualDescriptionSize
##
##    def GetDumpFileWide(self, Index, BufferSize):
##        '-no docstring-'
##        #return Buffer, NameSize, Handle, Type
##
##    def GetOtherOutputMask(self, Client):
##        '-no docstring-'
##        #return Mask
##
##    def SetEventCallbacksWide(self, Callbacks):
##        '-no docstring-'
##        #return 
##
##    def SetQuitLockString(self, String):
##        '-no docstring-'
##        #return 
##
##    def GetProcessOptions(self):
##        '-no docstring-'
##        #return Options
##
##    def GetInputCallbacks(self):
##        '-no docstring-'
##        #return Callbacks
##
##    def GetNumberOutputCallbacks(self):
##        '-no docstring-'
##        #return Count
##
##    def OpenDumpFile(self, DumpFile):
##        '-no docstring-'
##        #return 
##
##    def CreateProcess2(self, Server, CommandLine, OptionsBuffer, OptionsBufferSize, InitialDirectory, Environment):
##        '-no docstring-'
##        #return 
##
##    def CreateProcessAndAttach(self, Server, CommandLine, CreateFlags, ProcessId, AttachFlags):
##        '-no docstring-'
##        #return 
##
##    def SetOutputWidth(self, Columns):
##        '-no docstring-'
##        #return 
##
##    def CreateProcess(self, Server, CommandLine, CreateFlags):
##        '-no docstring-'
##        #return 
##
##    def SetQuitLockStringWide(self, String):
##        '-no docstring-'
##        #return 
##
##    def PushOutputLinePrefix(self, NewPrefix):
##        '-no docstring-'
##        #return Handle
##
##    def GetIdentity(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, IdentitySize
##
##    def AddDumpInformationFileWide(self, FileName, FileHandle, Type):
##        '-no docstring-'
##        #return 
##
##    def GetDumpFile(self, Index, BufferSize):
##        '-no docstring-'
##        #return Buffer, NameSize, Handle, Type
##
##    def RemoveProcessOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def GetEventCallbacks(self):
##        '-no docstring-'
##        #return Callbacks
##
##    def GetNumberEventCallbacks(self, EventFlags):
##        '-no docstring-'
##        #return Count
##
##    def GetOutputWidth(self):
##        '-no docstring-'
##        #return Columns
##
##    def SetProcessOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def WriteDumpFileWide(self, FileName, FileHandle, Qualifier, FormatFlags, Comment):
##        '-no docstring-'
##        #return 
##
##    def ConnectProcessServerWide(self, RemoteOptions):
##        '-no docstring-'
##        #return Server
##
##    def AddDumpInformationFile(self, InfoFile, Type):
##        '-no docstring-'
##        #return 
##
##    def GetQuitLockStringWide(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, StringSize
##


# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0080_0004'
DEBUG_VSOURCE_MAPPED_IMAGE = 2
__MIDL___MIDL_itf_DbgEng_0001_0080_0004 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0064_0008'
DEBUG_REQUEST_TARGET_EXCEPTION_CONTEXT = 1
__MIDL___MIDL_itf_DbgEng_0001_0064_0008 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0023'
DEBUG_OUTCTL_NOT_LOGGED = 8
__MIDL___MIDL_itf_DbgEng_0001_0073_0023 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0120'
DEBUG_VALUE_FLOAT64 = 6
__MIDL___MIDL_itf_DbgEng_0001_0073_0120 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0124'
DEBUG_DATA_PROCESSOR_IDENTIFICATION = 4
__MIDL___MIDL_itf_DbgEng_0001_0077_0124 = c_int # enum
class _DEBUG_LAST_EVENT_INFO_LOAD_MODULE(Structure):
    pass
_DEBUG_LAST_EVENT_INFO_LOAD_MODULE._fields_ = [
    ('Base', c_ulonglong),
]
assert sizeof(_DEBUG_LAST_EVENT_INFO_LOAD_MODULE) == 8, sizeof(_DEBUG_LAST_EVENT_INFO_LOAD_MODULE)
assert alignment(_DEBUG_LAST_EVENT_INFO_LOAD_MODULE) == 8, alignment(_DEBUG_LAST_EVENT_INFO_LOAD_MODULE)

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0080_0003'
DEBUG_VSOURCE_DEBUGGEE = 1
__MIDL___MIDL_itf_DbgEng_0001_0080_0003 = c_int # enum
class _DEBUG_LAST_EVENT_INFO_UNLOAD_MODULE(Structure):
    pass
_DEBUG_LAST_EVENT_INFO_UNLOAD_MODULE._fields_ = [
    ('Base', c_ulonglong),
]
assert sizeof(_DEBUG_LAST_EVENT_INFO_UNLOAD_MODULE) == 8, sizeof(_DEBUG_LAST_EVENT_INFO_UNLOAD_MODULE)
assert alignment(_DEBUG_LAST_EVENT_INFO_UNLOAD_MODULE) == 8, alignment(_DEBUG_LAST_EVENT_INFO_UNLOAD_MODULE)

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0117'
DEBUG_VALUE_INT32 = 3
__MIDL___MIDL_itf_DbgEng_0001_0073_0117 = c_int # enum
class _DEBUG_LAST_EVENT_INFO_SYSTEM_ERROR(Structure):
    pass
_DEBUG_LAST_EVENT_INFO_SYSTEM_ERROR._fields_ = [
    ('Error', c_ulong),
    ('Level', c_ulong),
]
assert sizeof(_DEBUG_LAST_EVENT_INFO_SYSTEM_ERROR) == 8, sizeof(_DEBUG_LAST_EVENT_INFO_SYSTEM_ERROR)
assert alignment(_DEBUG_LAST_EVENT_INFO_SYSTEM_ERROR) == 4, alignment(_DEBUG_LAST_EVENT_INFO_SYSTEM_ERROR)

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0115'
DEBUG_VALUE_INT8 = 1
__MIDL___MIDL_itf_DbgEng_0001_0073_0115 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0075_0007'
DEBUG_EXPR_CPLUSPLUS = 1
__MIDL___MIDL_itf_DbgEng_0001_0075_0007 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0119'
DEBUG_VALUE_FLOAT32 = 5
__MIDL___MIDL_itf_DbgEng_0001_0073_0119 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0114'
DEBUG_VALUE_INVALID = 0
__MIDL___MIDL_itf_DbgEng_0001_0073_0114 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0116'
DEBUG_VALUE_INT16 = 2
__MIDL___MIDL_itf_DbgEng_0001_0073_0116 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0118'
DEBUG_VALUE_INT64 = 4
__MIDL___MIDL_itf_DbgEng_0001_0073_0118 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0121'
DEBUG_VALUE_FLOAT80 = 7
__MIDL___MIDL_itf_DbgEng_0001_0073_0121 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0122'
DEBUG_VALUE_FLOAT82 = 8
__MIDL___MIDL_itf_DbgEng_0001_0073_0122 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0091_0008'
DEBUG_SYMTYPE_NONE = 0
__MIDL___MIDL_itf_DbgEng_0001_0091_0008 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0123'
DEBUG_VALUE_FLOAT128 = 9
__MIDL___MIDL_itf_DbgEng_0001_0073_0123 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0124'
DEBUG_VALUE_VECTOR64 = 10
__MIDL___MIDL_itf_DbgEng_0001_0073_0124 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0125'
DEBUG_VALUE_VECTOR128 = 11
__MIDL___MIDL_itf_DbgEng_0001_0073_0125 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0126'
DEBUG_VALUE_TYPES = 12
__MIDL___MIDL_itf_DbgEng_0001_0073_0126 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0074_0001'
DEBUG_OUT_TEXT_REPL_DEFAULT = 0
__MIDL___MIDL_itf_DbgEng_0001_0074_0001 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0075_0001'
DEBUG_ASMOPT_DEFAULT = 0
__MIDL___MIDL_itf_DbgEng_0001_0075_0001 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0075_0002'
DEBUG_ASMOPT_VERBOSE = 1
__MIDL___MIDL_itf_DbgEng_0001_0075_0002 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0075_0003'
DEBUG_ASMOPT_NO_CODE_BYTES = 2
__MIDL___MIDL_itf_DbgEng_0001_0075_0003 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0075_0004'
DEBUG_ASMOPT_IGNORE_OUTPUT_WIDTH = 4
__MIDL___MIDL_itf_DbgEng_0001_0075_0004 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0075_0005'
DEBUG_ASMOPT_SOURCE_LINE_NUMBER = 8
__MIDL___MIDL_itf_DbgEng_0001_0075_0005 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0065'
DEBUG_STACK_SOURCE_LINE = 4
__MIDL___MIDL_itf_DbgEng_0001_0073_0065 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0075_0006'
DEBUG_EXPR_MASM = 0
__MIDL___MIDL_itf_DbgEng_0001_0075_0006 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0076_0002'
DEBUG_LOG_APPEND = 1
__MIDL___MIDL_itf_DbgEng_0001_0076_0002 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0076_0005'
DEBUG_SYSVERSTR_SERVICE_PACK = 0
__MIDL___MIDL_itf_DbgEng_0001_0076_0005 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0075_0009'
DEBUG_EINDEX_FROM_START = 0
__MIDL___MIDL_itf_DbgEng_0001_0075_0009 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0075_0010'
DEBUG_EINDEX_FROM_END = 1
__MIDL___MIDL_itf_DbgEng_0001_0075_0010 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0075_0011'
DEBUG_EINDEX_FROM_CURRENT = 2
__MIDL___MIDL_itf_DbgEng_0001_0075_0011 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0076_0001'
DEBUG_LOG_DEFAULT = 0
__MIDL___MIDL_itf_DbgEng_0001_0076_0001 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0075_0008'
DEBUG_EINDEX_NAME = 0
__MIDL___MIDL_itf_DbgEng_0001_0075_0008 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0076_0003'
DEBUG_LOG_UNICODE = 2
__MIDL___MIDL_itf_DbgEng_0001_0076_0003 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0076_0004'
DEBUG_LOG_DML = 4
__MIDL___MIDL_itf_DbgEng_0001_0076_0004 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0076_0011'
DEBUG_MANSTR_LOADED_SUPPORT_DLL = 1
__MIDL___MIDL_itf_DbgEng_0001_0076_0011 = c_int # enum
class IDebugDataSpaces4(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'IDebugDataSpaces4'
    _iid_ = GUID('{D98ADA1F-29E9-4EF5-A6C0-E53349883212}')
    _idlflags_ = []
class _MEMORY_BASIC_INFORMATION64(Structure):
    pass
IDebugDataSpaces4._methods_ = [
    COMMETHOD([], HRESULT, 'ReadVirtual',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in', 'out'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['in', 'out', 'optional'], POINTER(c_ulong), 'BytesRead' )),
    COMMETHOD([], HRESULT, 'WriteVirtual',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'BytesWritten' )),
    COMMETHOD([], HRESULT, 'SearchVirtual',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulonglong, 'Length' ),
              ( ['in'], c_void_p, 'Pattern' ),
              ( ['in'], c_ulong, 'PatternSize' ),
              ( ['in'], c_ulong, 'PatternGranularity' ),
              ( ['out'], POINTER(c_ulonglong), 'MatchOffset' )),
    COMMETHOD([], HRESULT, 'ReadVirtualUncached',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in', 'out'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['in', 'out', 'optional'], POINTER(c_ulong), 'BytesRead' )),
    COMMETHOD([], HRESULT, 'WriteVirtualUncached',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'BytesWritten' )),
    COMMETHOD([], HRESULT, 'ReadPointersVirtual',
              ( ['in'], c_ulong, 'Count' ),
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['out'], POINTER(c_ulonglong), 'Ptrs' )),
    COMMETHOD([], HRESULT, 'WritePointersVirtual',
              ( ['in'], c_ulong, 'Count' ),
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], POINTER(c_ulonglong), 'Ptrs' )),
    COMMETHOD([], HRESULT, 'ReadPhysical',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in', 'out'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['in', 'out', 'optional'], POINTER(c_ulong), 'BytesRead' )),
    COMMETHOD([], HRESULT, 'WritePhysical',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'BytesWritten' )),
    COMMETHOD([], HRESULT, 'ReadControl',
              ( ['in'], c_ulong, 'Processor' ),
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in', 'out'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['in', 'out', 'optional'], POINTER(c_ulong), 'BytesRead' )),
    COMMETHOD([], HRESULT, 'WriteControl',
              ( ['in'], c_ulong, 'Processor' ),
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'BytesWritten' )),
    COMMETHOD([], HRESULT, 'ReadIo',
              ( ['in'], c_ulong, 'InterfaceType' ),
              ( ['in'], c_ulong, 'BusNumber' ),
              ( ['in'], c_ulong, 'AddressSpace' ),
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in', 'out'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['in', 'out', 'optional'], POINTER(c_ulong), 'BytesRead' )),
    COMMETHOD([], HRESULT, 'WriteIo',
              ( ['in'], c_ulong, 'InterfaceType' ),
              ( ['in'], c_ulong, 'BusNumber' ),
              ( ['in'], c_ulong, 'AddressSpace' ),
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'BytesWritten' )),
    COMMETHOD([], HRESULT, 'ReadMsr',
              ( ['in'], c_ulong, 'Msr' ),
              ( ['out'], POINTER(c_ulonglong), 'Value' )),
    COMMETHOD([], HRESULT, 'WriteMsr',
              ( ['in'], c_ulong, 'Msr' ),
              ( ['in'], c_ulonglong, 'Value' )),
    COMMETHOD([], HRESULT, 'ReadBusData',
              ( ['in'], c_ulong, 'BusDataType' ),
              ( ['in'], c_ulong, 'BusNumber' ),
              ( ['in'], c_ulong, 'SlotNumber' ),
              ( ['in'], c_ulong, 'Offset' ),
              ( ['in', 'out'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['in', 'out', 'optional'], POINTER(c_ulong), 'BytesRead' )),
    COMMETHOD([], HRESULT, 'WriteBusData',
              ( ['in'], c_ulong, 'BusDataType' ),
              ( ['in'], c_ulong, 'BusNumber' ),
              ( ['in'], c_ulong, 'SlotNumber' ),
              ( ['in'], c_ulong, 'Offset' ),
              ( ['in'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'BytesWritten' )),
    COMMETHOD([], HRESULT, 'CheckLowMemory'),
    COMMETHOD([], HRESULT, 'ReadDebuggerData',
              ( ['in'], c_ulong, 'Index' ),
              ( ['in', 'out'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'DataSize' )),
    COMMETHOD([], HRESULT, 'ReadProcessorSystemData',
              ( ['in'], c_ulong, 'Processor' ),
              ( ['in'], c_ulong, 'Index' ),
              ( ['in', 'out'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'DataSize' )),
    COMMETHOD([], HRESULT, 'VirtualToPhysical',
              ( ['in'], c_ulonglong, 'Virtual' ),
              ( ['out'], POINTER(c_ulonglong), 'Physical' )),
    COMMETHOD([], HRESULT, 'GetVirtualTranslationPhysicalOffsets',
              ( ['in'], c_ulonglong, 'Virtual' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'Offsets' ),
              ( ['in', 'optional'], c_ulong, 'OffsetsSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'Levels' )),
    COMMETHOD([], HRESULT, 'ReadHandleData',
              ( ['in'], c_ulonglong, 'Handle' ),
              ( ['in'], c_ulong, 'DataType' ),
              ( ['in', 'out', 'optional'], c_void_p, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'DataSize' )),
    COMMETHOD([], HRESULT, 'FillVirtual',
              ( ['in'], c_ulonglong, 'Start' ),
              ( ['in'], c_ulong, 'Size' ),
              ( ['in'], c_void_p, 'Pattern' ),
              ( ['in'], c_ulong, 'PatternSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'Filled' )),
    COMMETHOD([], HRESULT, 'FillPhysical',
              ( ['in'], c_ulonglong, 'Start' ),
              ( ['in'], c_ulong, 'Size' ),
              ( ['in'], c_void_p, 'Pattern' ),
              ( ['in'], c_ulong, 'PatternSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'Filled' )),
    COMMETHOD([], HRESULT, 'QueryVirtual',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['out'], POINTER(_MEMORY_BASIC_INFORMATION64), 'Info' )),
    COMMETHOD([], HRESULT, 'ReadImageNtHeaders',
              ( ['in'], c_ulonglong, 'ImageBase' ),
              ( ['out'], POINTER(_IMAGE_NT_HEADERS64), 'Headers' )),
    COMMETHOD([], HRESULT, 'ReadTagged',
              ( ['in'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.GUID), 'Tag' ),
              ( ['in'], c_ulong, 'Offset' ),
              ( ['in', 'out', 'optional'], c_void_p, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'TotalSize' )),
    COMMETHOD([], HRESULT, 'StartEnumTagged',
              ( ['out'], POINTER(c_ulonglong), 'Handle' )),
    COMMETHOD([], HRESULT, 'GetNextTagged',
              ( ['in'], c_ulonglong, 'Handle' ),
              ( ['out'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.GUID), 'Tag' ),
              ( ['out'], POINTER(c_ulong), 'Size' )),
    COMMETHOD([], HRESULT, 'EndEnumTagged',
              ( ['in'], c_ulonglong, 'Handle' )),
    COMMETHOD([], HRESULT, 'GetOffsetInformation',
              ( ['in'], c_ulong, 'Space' ),
              ( ['in'], c_ulong, 'Which' ),
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in', 'out', 'optional'], c_void_p, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'InfoSize' )),
    COMMETHOD([], HRESULT, 'GetNextDifferentlyValidOffsetVirtual',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['out'], POINTER(c_ulonglong), 'NextOffset' )),
    COMMETHOD([], HRESULT, 'GetValidRegionVirtual',
              ( ['in'], c_ulonglong, 'Base' ),
              ( ['in'], c_ulong, 'Size' ),
              ( ['out'], POINTER(c_ulonglong), 'ValidBase' ),
              ( ['out'], POINTER(c_ulong), 'ValidSize' )),
    COMMETHOD([], HRESULT, 'SearchVirtual2',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulonglong, 'Length' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['in'], c_void_p, 'Pattern' ),
              ( ['in'], c_ulong, 'PatternSize' ),
              ( ['in'], c_ulong, 'PatternGranularity' ),
              ( ['out'], POINTER(c_ulonglong), 'MatchOffset' )),
    COMMETHOD([], HRESULT, 'ReadMultiByteStringVirtual',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulong, 'MaxBytes' ),
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'StringBytes' )),
    COMMETHOD([], HRESULT, 'ReadMultiByteStringVirtualWide',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulong, 'MaxBytes' ),
              ( ['in'], c_ulong, 'CodePage' ),
              ( ['out', 'optional'], POINTER(c_ushort), 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'StringBytes' )),
    COMMETHOD([], HRESULT, 'ReadUnicodeStringVirtual',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulong, 'MaxBytes' ),
              ( ['in'], c_ulong, 'CodePage' ),
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'StringBytes' )),
    COMMETHOD([], HRESULT, 'ReadUnicodeStringVirtualWide',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulong, 'MaxBytes' ),
              ( ['out', 'optional'], POINTER(c_ushort), 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'StringBytes' )),
    COMMETHOD([], HRESULT, 'ReadPhysical2',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['in', 'out'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['in', 'out', 'optional'], POINTER(c_ulong), 'BytesRead' )),
    COMMETHOD([], HRESULT, 'WritePhysical2',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['in'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'BytesWritten' )),
]
################################################################
## code template for IDebugDataSpaces4 implementation
##class IDebugDataSpaces4_Impl(object):
##    def FillPhysical(self, Start, Size, Pattern, PatternSize):
##        '-no docstring-'
##        #return Filled
##
##    def WriteVirtual(self, Offset, Buffer, BufferSize):
##        '-no docstring-'
##        #return BytesWritten
##
##    def QueryVirtual(self, Offset):
##        '-no docstring-'
##        #return Info
##
##    def ReadControl(self, Processor, Offset, BufferSize):
##        '-no docstring-'
##        #return Buffer, BytesRead
##
##    def EndEnumTagged(self, Handle):
##        '-no docstring-'
##        #return 
##
##    def GetValidRegionVirtual(self, Base, Size):
##        '-no docstring-'
##        #return ValidBase, ValidSize
##
##    def GetVirtualTranslationPhysicalOffsets(self, Virtual, OffsetsSize):
##        '-no docstring-'
##        #return Offsets, Levels
##
##    def ReadPointersVirtual(self, Count, Offset):
##        '-no docstring-'
##        #return Ptrs
##
##    def GetNextTagged(self, Handle):
##        '-no docstring-'
##        #return Tag, Size
##
##    def ReadVirtualUncached(self, Offset, BufferSize):
##        '-no docstring-'
##        #return Buffer, BytesRead
##
##    def ReadPhysical(self, Offset, BufferSize):
##        '-no docstring-'
##        #return Buffer, BytesRead
##
##    def WriteControl(self, Processor, Offset, Buffer, BufferSize):
##        '-no docstring-'
##        #return BytesWritten
##
##    def ReadDebuggerData(self, Index, BufferSize):
##        '-no docstring-'
##        #return Buffer, DataSize
##
##    def ReadImageNtHeaders(self, ImageBase):
##        '-no docstring-'
##        #return Headers
##
##    def ReadMultiByteStringVirtualWide(self, Offset, MaxBytes, CodePage, BufferSize):
##        '-no docstring-'
##        #return Buffer, StringBytes
##
##    def ReadProcessorSystemData(self, Processor, Index, BufferSize):
##        '-no docstring-'
##        #return Buffer, DataSize
##
##    def ReadPhysical2(self, Offset, Flags, BufferSize):
##        '-no docstring-'
##        #return Buffer, BytesRead
##
##    def SearchVirtual2(self, Offset, Length, Flags, Pattern, PatternSize, PatternGranularity):
##        '-no docstring-'
##        #return MatchOffset
##
##    def WritePointersVirtual(self, Count, Offset, Ptrs):
##        '-no docstring-'
##        #return 
##
##    def WriteVirtualUncached(self, Offset, Buffer, BufferSize):
##        '-no docstring-'
##        #return BytesWritten
##
##    def ReadUnicodeStringVirtual(self, Offset, MaxBytes, CodePage, BufferSize):
##        '-no docstring-'
##        #return Buffer, StringBytes
##
##    def ReadBusData(self, BusDataType, BusNumber, SlotNumber, Offset, BufferSize):
##        '-no docstring-'
##        #return Buffer, BytesRead
##
##    def WriteBusData(self, BusDataType, BusNumber, SlotNumber, Offset, Buffer, BufferSize):
##        '-no docstring-'
##        #return BytesWritten
##
##    def WritePhysical2(self, Offset, Flags, Buffer, BufferSize):
##        '-no docstring-'
##        #return BytesWritten
##
##    def SearchVirtual(self, Offset, Length, Pattern, PatternSize, PatternGranularity):
##        '-no docstring-'
##        #return MatchOffset
##
##    def WriteIo(self, InterfaceType, BusNumber, AddressSpace, Offset, Buffer, BufferSize):
##        '-no docstring-'
##        #return BytesWritten
##
##    def ReadMsr(self, Msr):
##        '-no docstring-'
##        #return Value
##
##    def ReadIo(self, InterfaceType, BusNumber, AddressSpace, Offset, BufferSize):
##        '-no docstring-'
##        #return Buffer, BytesRead
##
##    def ReadMultiByteStringVirtual(self, Offset, MaxBytes, BufferSize):
##        '-no docstring-'
##        #return Buffer, StringBytes
##
##    def ReadVirtual(self, Offset, BufferSize):
##        '-no docstring-'
##        #return Buffer, BytesRead
##
##    def VirtualToPhysical(self, Virtual):
##        '-no docstring-'
##        #return Physical
##
##    def FillVirtual(self, Start, Size, Pattern, PatternSize):
##        '-no docstring-'
##        #return Filled
##
##    def CheckLowMemory(self):
##        '-no docstring-'
##        #return 
##
##    def ReadUnicodeStringVirtualWide(self, Offset, MaxBytes, BufferSize):
##        '-no docstring-'
##        #return Buffer, StringBytes
##
##    def GetOffsetInformation(self, Space, Which, Offset, BufferSize):
##        '-no docstring-'
##        #return Buffer, InfoSize
##
##    def ReadHandleData(self, Handle, DataType, BufferSize):
##        '-no docstring-'
##        #return Buffer, DataSize
##
##    def ReadTagged(self, Tag, Offset, BufferSize):
##        '-no docstring-'
##        #return Buffer, TotalSize
##
##    def WritePhysical(self, Offset, Buffer, BufferSize):
##        '-no docstring-'
##        #return BytesWritten
##
##    def GetNextDifferentlyValidOffsetVirtual(self, Offset):
##        '-no docstring-'
##        #return NextOffset
##
##    def StartEnumTagged(self):
##        '-no docstring-'
##        #return Handle
##
##    def WriteMsr(self, Msr, Value):
##        '-no docstring-'
##        #return 
##


# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0012'
DEBUG_DATA_KiCallUserModeAddr = 56
__MIDL___MIDL_itf_DbgEng_0001_0077_0012 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0055'
DEBUG_DATA_MmStandbyPageListHeadAddr = 400
__MIDL___MIDL_itf_DbgEng_0001_0077_0055 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0076_0007'
DEBUG_MANAGED_DISABLED = 0
__MIDL___MIDL_itf_DbgEng_0001_0076_0007 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0076_0008'
DEBUG_MANAGED_ALLOWED = 1
__MIDL___MIDL_itf_DbgEng_0001_0076_0008 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0076_0009'
DEBUG_MANAGED_DLL_LOADED = 2
__MIDL___MIDL_itf_DbgEng_0001_0076_0009 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0076_0010'
DEBUG_MANSTR_NONE = 0
__MIDL___MIDL_itf_DbgEng_0001_0076_0010 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0076_0006'
DEBUG_SYSVERSTR_BUILD = 1
__MIDL___MIDL_itf_DbgEng_0001_0076_0006 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0076_0012'
DEBUG_MANSTR_LOAD_STATUS = 2
__MIDL___MIDL_itf_DbgEng_0001_0076_0012 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0091_0009'
DEBUG_SYMTYPE_COFF = 1
__MIDL___MIDL_itf_DbgEng_0001_0091_0009 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0076_0014'
DEBUG_MANRESET_LOAD_DLL = 1
__MIDL___MIDL_itf_DbgEng_0001_0076_0014 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0001'
DEBUG_DATA_SPACE_VIRTUAL = 0
__MIDL___MIDL_itf_DbgEng_0001_0077_0001 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0002'
DEBUG_DATA_SPACE_PHYSICAL = 1
__MIDL___MIDL_itf_DbgEng_0001_0077_0002 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0003'
DEBUG_DATA_SPACE_CONTROL = 2
__MIDL___MIDL_itf_DbgEng_0001_0077_0003 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0004'
DEBUG_DATA_SPACE_IO = 3
__MIDL___MIDL_itf_DbgEng_0001_0077_0004 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0005'
DEBUG_DATA_SPACE_MSR = 4
__MIDL___MIDL_itf_DbgEng_0001_0077_0005 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0006'
DEBUG_DATA_SPACE_BUS_DATA = 5
__MIDL___MIDL_itf_DbgEng_0001_0077_0006 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0007'
DEBUG_DATA_SPACE_DEBUGGER_DATA = 6
__MIDL___MIDL_itf_DbgEng_0001_0077_0007 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0008'
DEBUG_DATA_SPACE_COUNT = 7
__MIDL___MIDL_itf_DbgEng_0001_0077_0008 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0009'
DEBUG_DATA_KernBase = 24
__MIDL___MIDL_itf_DbgEng_0001_0077_0009 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0066'
DEBUG_STACK_FRAME_ADDRESSES = 8
__MIDL___MIDL_itf_DbgEng_0001_0073_0066 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0010'
DEBUG_DATA_BreakpointWithStatusAddr = 32
__MIDL___MIDL_itf_DbgEng_0001_0077_0010 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0121'
DEBUG_DATA_KPRCB_OFFSET = 1
__MIDL___MIDL_itf_DbgEng_0001_0077_0121 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0014'
DEBUG_DATA_PsLoadedModuleListAddr = 72
__MIDL___MIDL_itf_DbgEng_0001_0077_0014 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0013'
DEBUG_DATA_KeUserCallbackDispatcherAddr = 64
__MIDL___MIDL_itf_DbgEng_0001_0077_0013 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0079'
DEBUG_DATA_MmAllocatedNonPagedPoolAddr = 592
__MIDL___MIDL_itf_DbgEng_0001_0077_0079 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0090_0005'
DEBUG_SYMENT_IS_MANAGED = 16
__MIDL___MIDL_itf_DbgEng_0001_0090_0005 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0000_0000_0021'
CREATE_PRESERVE_CODE_AUTHZ_LEVEL = 33554432
__MIDL___MIDL_itf_DbgEng_0000_0000_0021 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0015'
DEBUG_DATA_PsActiveProcessHeadAddr = 80
__MIDL___MIDL_itf_DbgEng_0001_0077_0015 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0101'
DEBUG_FILTER_UNLOAD_MODULE = 5
__MIDL___MIDL_itf_DbgEng_0001_0073_0101 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0030'
DEBUG_CONNECT_SESSION_NO_ANNOUNCE = 2
__MIDL___MIDL_itf_DbgEng_0001_0068_0030 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0014'
DEBUG_PROC_DESC_NO_USER_NAME = 32
__MIDL___MIDL_itf_DbgEng_0001_0068_0014 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0018'
DEBUG_ATTACH_NONINVASIVE_NO_SUSPEND = 4
__MIDL___MIDL_itf_DbgEng_0001_0068_0018 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0015'
DEBUG_ATTACH_DEFAULT = 0
__MIDL___MIDL_itf_DbgEng_0001_0068_0015 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0017'
DEBUG_ATTACH_EXISTING = 2
__MIDL___MIDL_itf_DbgEng_0001_0068_0017 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0090_0006'
DEBUG_SYMENT_IS_SYNTHETIC = 32
__MIDL___MIDL_itf_DbgEng_0001_0090_0006 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0019'
DEBUG_ATTACH_INVASIVE_NO_INITIAL_BREAK = 8
__MIDL___MIDL_itf_DbgEng_0001_0068_0019 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0020'
DEBUG_ATTACH_INVASIVE_RESUME_PROCESS = 16
__MIDL___MIDL_itf_DbgEng_0001_0068_0020 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0021'
DEBUG_ATTACH_NONINVASIVE_ALLOW_PARTIAL = 32
__MIDL___MIDL_itf_DbgEng_0001_0068_0021 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0022'
DEBUG_ECREATE_PROCESS_DEFAULT = 0
__MIDL___MIDL_itf_DbgEng_0001_0068_0022 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0000_0000_0025'
PROFILE_KERNEL = 536870912
__MIDL___MIDL_itf_DbgEng_0000_0000_0025 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0023'
DEBUG_ECREATE_PROCESS_INHERIT_HANDLES = 1
__MIDL___MIDL_itf_DbgEng_0001_0068_0023 = c_int # enum
class IDebugControl2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'IDebugControl2'
    _iid_ = GUID('{D4366723-44DF-4BED-8C7E-4C05424F4588}')
    _idlflags_ = []
class _DEBUG_STACK_FRAME(Structure):
    pass
class _DEBUG_VALUE(Structure):
    pass
class IDebugBreakpoint(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'IDebugBreakpoint'
    _iid_ = GUID('{5BD9D474-5975-423A-B88B-65A8E7110E65}')
    _idlflags_ = []
class _DEBUG_BREAKPOINT_PARAMETERS(Structure):
    pass
class _WINDBG_EXTENSION_APIS32(Structure):
    pass
class _WINDBG_EXTENSION_APIS64(Structure):
    pass
class _DEBUG_SPECIFIC_FILTER_PARAMETERS(Structure):
    pass
class _DEBUG_EXCEPTION_FILTER_PARAMETERS(Structure):
    pass
IDebugControl2._methods_ = [
    COMMETHOD([], HRESULT, 'GetInterrupt'),
    COMMETHOD([], HRESULT, 'SetInterrupt',
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'GetInterruptTimeout',
              ( ['out'], POINTER(c_ulong), 'Seconds' )),
    COMMETHOD([], HRESULT, 'SetInterruptTimeout',
              ( ['in'], c_ulong, 'Seconds' )),
    COMMETHOD([], HRESULT, 'GetLogFile',
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'FileSize' ),
              ( ['out', 'optional'], POINTER(c_int), 'Append' )),
    COMMETHOD([], HRESULT, 'OpenLogFile',
              ( ['in'], STRING, 'File' ),
              ( ['in'], c_int, 'Append' )),
    COMMETHOD([], HRESULT, 'CloseLogFile'),
    COMMETHOD([], HRESULT, 'GetLogMask',
              ( ['out'], POINTER(c_ulong), 'Mask' )),
    COMMETHOD([], HRESULT, 'SetLogMask',
              ( ['in'], c_ulong, 'Mask' )),
    COMMETHOD([], HRESULT, 'Input',
              ( ['out'], STRING, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'InputSize' )),
    COMMETHOD([], HRESULT, 'ReturnInput',
              ( ['in'], STRING, 'Buffer' )),
    COMMETHOD([], HRESULT, 'Output',
              ( ['in'], c_ulong, 'Mask' ),
              ( ['in'], STRING, 'Format' ),
              ( [], _midlSAFEARRAY(VARIANT), '__MIDL__IDebugControl20000' )),
    COMMETHOD([], HRESULT, 'OutputVaList',
              ( ['in'], c_ulong, 'Mask' ),
              ( ['in'], STRING, 'Format' ),
              ( ['in'], STRING, 'Args' )),
    COMMETHOD([], HRESULT, 'ControlledOutput',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], c_ulong, 'Mask' ),
              ( ['in'], STRING, 'Format' ),
              ( [], _midlSAFEARRAY(VARIANT), '__MIDL__IDebugControl20001' )),
    COMMETHOD([], HRESULT, 'ControlledOutputVaList',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], c_ulong, 'Mask' ),
              ( ['in'], STRING, 'Format' ),
              ( ['in'], STRING, 'Args' )),
    COMMETHOD([], HRESULT, 'OutputPrompt',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in', 'optional'], STRING, 'Format' ),
              ( ['optional'], _midlSAFEARRAY(VARIANT), '__MIDL__IDebugControl20002' )),
    COMMETHOD([], HRESULT, 'OutputPromptVaList',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in', 'optional'], STRING, 'Format' ),
              ( ['in', 'optional'], STRING, 'Args' )),
    COMMETHOD([], HRESULT, 'GetPromptText',
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'TextSize' )),
    COMMETHOD([], HRESULT, 'OutputCurrentState',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'OutputVersionInformation',
              ( ['in'], c_ulong, 'OutputControl' )),
    COMMETHOD([], HRESULT, 'GetNotifyEventHandle',
              ( ['out'], POINTER(c_ulonglong), 'Handle' )),
    COMMETHOD([], HRESULT, 'SetNotifyEventHandle',
              ( ['in'], c_ulonglong, 'Handle' )),
    COMMETHOD([], HRESULT, 'Assemble',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], STRING, 'Instr' ),
              ( ['out'], POINTER(c_ulonglong), 'EndOffset' )),
    COMMETHOD([], HRESULT, 'Disassemble',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'DisassemblySize' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'EndOffset' )),
    COMMETHOD([], HRESULT, 'GetDisassembleEffectiveOffset',
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'OutputDisassembly',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out'], POINTER(c_ulonglong), 'EndOffset' )),
    COMMETHOD([], HRESULT, 'OutputDisassemblyLines',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], c_ulong, 'PreviousLines' ),
              ( ['in'], c_ulong, 'TotalLines' ),
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'OffsetLine' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'StartOffset' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'EndOffset' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'LineOffsets' )),
    COMMETHOD([], HRESULT, 'GetNearInstruction',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_int, 'Delta' ),
              ( ['out'], POINTER(c_ulonglong), 'NearOffset' )),
    COMMETHOD([], HRESULT, 'GetStackTrace',
              ( ['in'], c_ulonglong, 'FrameOffset' ),
              ( ['in'], c_ulonglong, 'StackOffset' ),
              ( ['in'], c_ulonglong, 'InstructionOffset' ),
              ( ['in', 'out'], POINTER(_DEBUG_STACK_FRAME), 'Frames' ),
              ( ['in'], c_ulong, 'FramesSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'FramesFilled' )),
    COMMETHOD([], HRESULT, 'GetReturnOffset',
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'OutputStackTrace',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in', 'optional'], POINTER(_DEBUG_STACK_FRAME), 'Frames' ),
              ( ['in', 'optional'], c_ulong, 'FramesSize' ),
              ( ['in', 'optional'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'GetDebuggeeType',
              ( ['out'], POINTER(c_ulong), 'Class' ),
              ( ['out'], POINTER(c_ulong), 'Qualifier' )),
    COMMETHOD([], HRESULT, 'GetActualProcessorType',
              ( ['out'], POINTER(c_ulong), 'Type' )),
    COMMETHOD([], HRESULT, 'GetExecutingProcessorType',
              ( ['out'], POINTER(c_ulong), 'Type' )),
    COMMETHOD([], HRESULT, 'GetNumberPossibleExecutingProcessorTypes',
              ( ['out'], POINTER(c_ulong), 'Number' )),
    COMMETHOD([], HRESULT, 'GetPossibleExecutingProcessorTypes',
              ( ['in'], c_ulong, 'Start' ),
              ( ['in'], c_ulong, 'Count' ),
              ( ['out'], POINTER(c_ulong), 'Types' )),
    COMMETHOD([], HRESULT, 'GetNumberProcessors',
              ( ['out'], POINTER(c_ulong), 'Number' )),
    COMMETHOD([], HRESULT, 'GetSystemVersion',
              ( ['out'], POINTER(c_ulong), 'PlatformId' ),
              ( ['out'], POINTER(c_ulong), 'Major' ),
              ( ['out'], POINTER(c_ulong), 'Minor' ),
              ( ['out', 'optional'], STRING, 'ServicePackString' ),
              ( ['in', 'optional'], c_ulong, 'ServicePackStringSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ServicePackStringUsed' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ServicePackNumber' ),
              ( ['out', 'optional'], STRING, 'BuildString' ),
              ( ['in', 'optional'], c_ulong, 'BuildStringSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'BuildStringUsed' )),
    COMMETHOD([], HRESULT, 'GetPageSize',
              ( ['out'], POINTER(c_ulong), 'Size' )),
    COMMETHOD([], HRESULT, 'IsPointer64Bit'),
    COMMETHOD([], HRESULT, 'ReadBugCheckData',
              ( ['out'], POINTER(c_ulong), 'Code' ),
              ( ['out'], POINTER(c_ulonglong), 'Arg1' ),
              ( ['out'], POINTER(c_ulonglong), 'Arg2' ),
              ( ['out'], POINTER(c_ulonglong), 'Arg3' ),
              ( ['out'], POINTER(c_ulonglong), 'Arg4' )),
    COMMETHOD([], HRESULT, 'GetNumberSupportedProcessorTypes',
              ( ['out'], POINTER(c_ulong), 'Number' )),
    COMMETHOD([], HRESULT, 'GetSupportedProcessorTypes',
              ( ['in'], c_ulong, 'Start' ),
              ( ['in'], c_ulong, 'Count' ),
              ( ['out'], POINTER(c_ulong), 'Types' )),
    COMMETHOD([], HRESULT, 'GetProcessorTypeNames',
              ( ['in'], c_ulong, 'Type' ),
              ( ['out', 'optional'], STRING, 'FullNameBuffer' ),
              ( ['in', 'optional'], c_ulong, 'FullNameBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'FullNameSize' ),
              ( ['out', 'optional'], STRING, 'AbbrevNameBuffer' ),
              ( ['in', 'optional'], c_ulong, 'AbbrevNameBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'AbbrevNameSize' )),
    COMMETHOD([], HRESULT, 'GetEffectiveProcessorType',
              ( ['out'], POINTER(c_ulong), 'Type' )),
    COMMETHOD([], HRESULT, 'SetEffectiveProcessorType',
              ( ['in'], c_ulong, 'Type' )),
    COMMETHOD([], HRESULT, 'GetExecutionStatus',
              ( ['out'], POINTER(c_ulong), 'Status' )),
    COMMETHOD([], HRESULT, 'SetExecutionStatus',
              ( ['in'], c_ulong, 'Status' )),
    COMMETHOD([], HRESULT, 'GetCodeLevel',
              ( ['out'], POINTER(c_ulong), 'Level' )),
    COMMETHOD([], HRESULT, 'SetCodeLevel',
              ( ['in'], c_ulong, 'Level' )),
    COMMETHOD([], HRESULT, 'GetEngineOptions',
              ( ['out'], POINTER(c_ulong), 'Options' )),
    COMMETHOD([], HRESULT, 'AddEngineOptions',
              ( ['in'], c_ulong, 'Options' )),
    COMMETHOD([], HRESULT, 'RemoveEngineOptions',
              ( ['in'], c_ulong, 'Options' )),
    COMMETHOD([], HRESULT, 'SetEngineOptions',
              ( ['in'], c_ulong, 'Options' )),
    COMMETHOD([], HRESULT, 'GetSystemErrorControl',
              ( ['out'], POINTER(c_ulong), 'OutputLevel' ),
              ( ['out'], POINTER(c_ulong), 'BreakLevel' )),
    COMMETHOD([], HRESULT, 'SetSystemErrorControl',
              ( ['in'], c_ulong, 'OutputLevel' ),
              ( ['in'], c_ulong, 'BreakLevel' )),
    COMMETHOD([], HRESULT, 'GetTextMacro',
              ( ['in'], c_ulong, 'Slot' ),
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'MacroSize' )),
    COMMETHOD([], HRESULT, 'SetTextMacro',
              ( ['in'], c_ulong, 'Slot' ),
              ( ['in'], STRING, 'Macro' )),
    COMMETHOD([], HRESULT, 'GetRadix',
              ( ['out'], POINTER(c_ulong), 'Radix' )),
    COMMETHOD([], HRESULT, 'SetRadix',
              ( ['in'], c_ulong, 'Radix' )),
    COMMETHOD([], HRESULT, 'Evaluate',
              ( ['in'], STRING, 'Expression' ),
              ( ['in'], c_ulong, 'DesiredType' ),
              ( ['out'], POINTER(_DEBUG_VALUE), 'Value' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'RemainderIndex' )),
    COMMETHOD([], HRESULT, 'CoerceValue',
              ( ['in'], POINTER(_DEBUG_VALUE), 'In' ),
              ( ['in'], c_ulong, 'OutType' ),
              ( ['out'], POINTER(_DEBUG_VALUE), 'Out' )),
    COMMETHOD([], HRESULT, 'CoerceValues',
              ( ['in'], c_ulong, 'Count' ),
              ( ['in'], POINTER(_DEBUG_VALUE), 'In' ),
              ( ['in'], POINTER(c_ulong), 'OutTypes' ),
              ( ['out'], POINTER(_DEBUG_VALUE), 'Out' )),
    COMMETHOD([], HRESULT, 'Execute',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], STRING, 'Command' ),
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'ExecuteCommandFile',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], STRING, 'CommandFile' ),
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'GetNumberBreakpoints',
              ( ['out'], POINTER(c_ulong), 'Number' )),
    COMMETHOD([], HRESULT, 'GetBreakpointByIndex',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out'], POINTER(POINTER(IDebugBreakpoint)), 'Bp' )),
    COMMETHOD([], HRESULT, 'GetBreakpointById',
              ( ['in'], c_ulong, 'Id' ),
              ( ['out'], POINTER(POINTER(IDebugBreakpoint)), 'Bp' )),
    COMMETHOD([], HRESULT, 'GetBreakpointParameters',
              ( ['in'], c_ulong, 'Count' ),
              ( ['in', 'optional'], POINTER(c_ulong), 'Ids' ),
              ( ['in', 'optional'], c_ulong, 'Start' ),
              ( ['out', 'optional'], POINTER(_DEBUG_BREAKPOINT_PARAMETERS), 'Params' )),
    COMMETHOD([], HRESULT, 'AddBreakpoint',
              ( ['in'], c_ulong, 'Type' ),
              ( ['in'], c_ulong, 'DesiredId' ),
              ( ['out'], POINTER(POINTER(IDebugBreakpoint)), 'Bp' )),
    COMMETHOD([], HRESULT, 'RemoveBreakpoint',
              ( ['in'], POINTER(IDebugBreakpoint), 'Bp' )),
    COMMETHOD([], HRESULT, 'AddExtension',
              ( ['in'], STRING, 'Path' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out'], POINTER(c_ulonglong), 'Handle' )),
    COMMETHOD([], HRESULT, 'RemoveExtension',
              ( ['in'], c_ulonglong, 'Handle' )),
    COMMETHOD([], HRESULT, 'GetExtensionByPath',
              ( ['in'], STRING, 'Path' ),
              ( ['out'], POINTER(c_ulonglong), 'Handle' )),
    COMMETHOD([], HRESULT, 'CallExtension',
              ( ['in'], c_ulonglong, 'Handle' ),
              ( ['in'], STRING, 'Function' ),
              ( ['in', 'optional'], STRING, 'Arguments' )),
    COMMETHOD([], HRESULT, 'GetExtensionFunction',
              ( ['in'], c_ulonglong, 'Handle' ),
              ( ['in'], STRING, 'FuncName' ),
              ( ['out'], POINTER(c_void_p), 'Function' )),
    COMMETHOD([], HRESULT, 'GetWindbgExtensionApis32',
              ( ['in', 'out'], POINTER(_WINDBG_EXTENSION_APIS32), 'Api' )),
    COMMETHOD([], HRESULT, 'GetWindbgExtensionApis64',
              ( ['in', 'out'], POINTER(_WINDBG_EXTENSION_APIS64), 'Api' )),
    COMMETHOD([], HRESULT, 'GetNumberEventFilters',
              ( ['out'], POINTER(c_ulong), 'SpecificEvents' ),
              ( ['out'], POINTER(c_ulong), 'SpecificExceptions' ),
              ( ['out'], POINTER(c_ulong), 'ArbitraryExceptions' )),
    COMMETHOD([], HRESULT, 'GetEventFilterText',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'TextSize' )),
    COMMETHOD([], HRESULT, 'GetEventFilterCommand',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'CommandSize' )),
    COMMETHOD([], HRESULT, 'SetEventFilterCommand',
              ( ['in'], c_ulong, 'Index' ),
              ( ['in'], STRING, 'Command' )),
    COMMETHOD([], HRESULT, 'GetSpecificFilterParameters',
              ( ['in'], c_ulong, 'Start' ),
              ( ['in'], c_ulong, 'Count' ),
              ( ['out'], POINTER(_DEBUG_SPECIFIC_FILTER_PARAMETERS), 'Params' )),
    COMMETHOD([], HRESULT, 'SetSpecificFilterParameters',
              ( ['in'], c_ulong, 'Start' ),
              ( ['in'], c_ulong, 'Count' ),
              ( ['in'], POINTER(_DEBUG_SPECIFIC_FILTER_PARAMETERS), 'Params' )),
    COMMETHOD([], HRESULT, 'GetSpecificFilterArgument',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ArgumentSize' )),
    COMMETHOD([], HRESULT, 'SetSpecificFilterArgument',
              ( ['in'], c_ulong, 'Index' ),
              ( ['in'], STRING, 'Argument' )),
    COMMETHOD([], HRESULT, 'GetExceptionFilterParameters',
              ( ['in'], c_ulong, 'Count' ),
              ( ['in', 'optional'], POINTER(c_ulong), 'Codes' ),
              ( ['in', 'optional'], c_ulong, 'Start' ),
              ( ['out', 'optional'], POINTER(_DEBUG_EXCEPTION_FILTER_PARAMETERS), 'Params' )),
    COMMETHOD([], HRESULT, 'SetExceptionFilterParameters',
              ( ['in'], c_ulong, 'Count' ),
              ( ['in'], POINTER(_DEBUG_EXCEPTION_FILTER_PARAMETERS), 'Params' )),
    COMMETHOD([], HRESULT, 'GetExceptionFilterSecondCommand',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'CommandSize' )),
    COMMETHOD([], HRESULT, 'SetExceptionFilterSecondCommand',
              ( ['in'], c_ulong, 'Index' ),
              ( ['in'], STRING, 'Command' )),
    COMMETHOD([], HRESULT, 'WaitForEvent',
              ( ['in'], c_ulong, 'Flags' ),
              ( ['in'], c_ulong, 'Timeout' )),
    COMMETHOD([], HRESULT, 'GetLastEventInformation',
              ( ['out'], POINTER(c_ulong), 'Type' ),
              ( ['out'], POINTER(c_ulong), 'ProcessId' ),
              ( ['out'], POINTER(c_ulong), 'ThreadId' ),
              ( ['out', 'optional'], c_void_p, 'ExtraInformation' ),
              ( ['in', 'optional'], c_ulong, 'ExtraInformationSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ExtraInformationUsed' ),
              ( ['out', 'optional'], STRING, 'Description' ),
              ( ['in', 'optional'], c_ulong, 'DescriptionSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'DescriptionUsed' )),
    COMMETHOD([], HRESULT, 'GetCurrentTimeDate',
              ( ['out'], POINTER(c_ulong), 'TimeDate' )),
    COMMETHOD([], HRESULT, 'GetCurrentSystemUpTime',
              ( ['out'], POINTER(c_ulong), 'UpTime' )),
    COMMETHOD([], HRESULT, 'GetDumpFormatFlags',
              ( ['out'], POINTER(c_ulong), 'FormatFlags' )),
    COMMETHOD([], HRESULT, 'GetNumberTextReplacements',
              ( ['out'], POINTER(c_ulong), 'NumRepl' )),
    COMMETHOD([], HRESULT, 'GetTextReplacement',
              ( ['in', 'optional'], STRING, 'SrcText' ),
              ( ['in', 'optional'], c_ulong, 'Index' ),
              ( ['out', 'optional'], STRING, 'SrcBuffer' ),
              ( ['in', 'optional'], c_ulong, 'SrcBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'SrcSize' ),
              ( ['out', 'optional'], STRING, 'DstBuffer' ),
              ( ['in', 'optional'], c_ulong, 'DstBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'DstSize' )),
    COMMETHOD([], HRESULT, 'SetTextReplacement',
              ( ['in'], STRING, 'SrcText' ),
              ( ['in', 'optional'], STRING, 'DstText' )),
    COMMETHOD([], HRESULT, 'RemoveTextReplacements'),
    COMMETHOD([], HRESULT, 'OutputTextReplacements',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], c_ulong, 'Flags' )),
]
################################################################
## code template for IDebugControl2 implementation
##class IDebugControl2_Impl(object):
##    def AddBreakpoint(self, Type, DesiredId):
##        '-no docstring-'
##        #return Bp
##
##    def GetInterrupt(self):
##        '-no docstring-'
##        #return 
##
##    def CoerceValues(self, Count, In, OutTypes):
##        '-no docstring-'
##        #return Out
##
##    def RemoveExtension(self, Handle):
##        '-no docstring-'
##        #return 
##
##    def GetExecutingProcessorType(self):
##        '-no docstring-'
##        #return Type
##
##    def GetCurrentTimeDate(self):
##        '-no docstring-'
##        #return TimeDate
##
##    def AddEngineOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def GetDebuggeeType(self):
##        '-no docstring-'
##        #return Class, Qualifier
##
##    def Execute(self, OutputControl, Command, Flags):
##        '-no docstring-'
##        #return 
##
##    def CoerceValue(self, In, OutType):
##        '-no docstring-'
##        #return Out
##
##    def GetTextMacro(self, Slot, BufferSize):
##        '-no docstring-'
##        #return Buffer, MacroSize
##
##    def ControlledOutput(self, OutputControl, Mask, Format, __MIDL__IDebugControl20001):
##        '-no docstring-'
##        #return 
##
##    def WaitForEvent(self, Flags, Timeout):
##        '-no docstring-'
##        #return 
##
##    def GetRadix(self):
##        '-no docstring-'
##        #return Radix
##
##    def GetSpecificFilterParameters(self, Start, Count):
##        '-no docstring-'
##        #return Params
##
##    def RemoveEngineOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def SetExceptionFilterParameters(self, Count, Params):
##        '-no docstring-'
##        #return 
##
##    def SetExceptionFilterSecondCommand(self, Index, Command):
##        '-no docstring-'
##        #return 
##
##    def GetDisassembleEffectiveOffset(self):
##        '-no docstring-'
##        #return Offset
##
##    def GetNearInstruction(self, Offset, Delta):
##        '-no docstring-'
##        #return NearOffset
##
##    def GetInterruptTimeout(self):
##        '-no docstring-'
##        #return Seconds
##
##    def GetSystemVersion(self, ServicePackStringSize, BuildStringSize):
##        '-no docstring-'
##        #return PlatformId, Major, Minor, ServicePackString, ServicePackStringUsed, ServicePackNumber, BuildString, BuildStringUsed
##
##    def SetTextMacro(self, Slot, Macro):
##        '-no docstring-'
##        #return 
##
##    def GetWindbgExtensionApis64(self):
##        '-no docstring-'
##        #return Api
##
##    def GetLogFile(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, FileSize, Append
##
##    def GetTextReplacement(self, SrcText, Index, SrcBufferSize, DstBufferSize):
##        '-no docstring-'
##        #return SrcBuffer, SrcSize, DstBuffer, DstSize
##
##    def OpenLogFile(self, File, Append):
##        '-no docstring-'
##        #return 
##
##    def OutputDisassembly(self, OutputControl, Offset, Flags):
##        '-no docstring-'
##        #return EndOffset
##
##    def GetNumberSupportedProcessorTypes(self):
##        '-no docstring-'
##        #return Number
##
##    def OutputVersionInformation(self, OutputControl):
##        '-no docstring-'
##        #return 
##
##    def GetActualProcessorType(self):
##        '-no docstring-'
##        #return Type
##
##    def GetBreakpointParameters(self, Count, Ids, Start):
##        '-no docstring-'
##        #return Params
##
##    def Evaluate(self, Expression, DesiredType):
##        '-no docstring-'
##        #return Value, RemainderIndex
##
##    def GetNumberProcessors(self):
##        '-no docstring-'
##        #return Number
##
##    def AddExtension(self, Path, Flags):
##        '-no docstring-'
##        #return Handle
##
##    def SetCodeLevel(self, Level):
##        '-no docstring-'
##        #return 
##
##    def SetLogMask(self, Mask):
##        '-no docstring-'
##        #return 
##
##    def CloseLogFile(self):
##        '-no docstring-'
##        #return 
##
##    def SetInterrupt(self, Flags):
##        '-no docstring-'
##        #return 
##
##    def SetNotifyEventHandle(self, Handle):
##        '-no docstring-'
##        #return 
##
##    def SetSpecificFilterArgument(self, Index, Argument):
##        '-no docstring-'
##        #return 
##
##    def GetNotifyEventHandle(self):
##        '-no docstring-'
##        #return Handle
##
##    def ReadBugCheckData(self):
##        '-no docstring-'
##        #return Code, Arg1, Arg2, Arg3, Arg4
##
##    def SetEffectiveProcessorType(self, Type):
##        '-no docstring-'
##        #return 
##
##    def GetCodeLevel(self):
##        '-no docstring-'
##        #return Level
##
##    def GetCurrentSystemUpTime(self):
##        '-no docstring-'
##        #return UpTime
##
##    def GetExceptionFilterParameters(self, Count, Codes, Start):
##        '-no docstring-'
##        #return Params
##
##    def OutputStackTrace(self, OutputControl, Frames, FramesSize, Flags):
##        '-no docstring-'
##        #return 
##
##    def SetRadix(self, Radix):
##        '-no docstring-'
##        #return 
##
##    def GetNumberTextReplacements(self):
##        '-no docstring-'
##        #return NumRepl
##
##    def Input(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, InputSize
##
##    def SetExecutionStatus(self, Status):
##        '-no docstring-'
##        #return 
##
##    def ControlledOutputVaList(self, OutputControl, Mask, Format, Args):
##        '-no docstring-'
##        #return 
##
##    def GetBreakpointById(self, Id):
##        '-no docstring-'
##        #return Bp
##
##    def RemoveBreakpoint(self, Bp):
##        '-no docstring-'
##        #return 
##
##    def GetWindbgExtensionApis32(self):
##        '-no docstring-'
##        #return Api
##
##    def Assemble(self, Offset, Instr):
##        '-no docstring-'
##        #return EndOffset
##
##    def OutputVaList(self, Mask, Format, Args):
##        '-no docstring-'
##        #return 
##
##    def ReturnInput(self, Buffer):
##        '-no docstring-'
##        #return 
##
##    def ExecuteCommandFile(self, OutputControl, CommandFile, Flags):
##        '-no docstring-'
##        #return 
##
##    def OutputPrompt(self, OutputControl, Format, __MIDL__IDebugControl20002):
##        '-no docstring-'
##        #return 
##
##    def OutputCurrentState(self, OutputControl, Flags):
##        '-no docstring-'
##        #return 
##
##    def GetEngineOptions(self):
##        '-no docstring-'
##        #return Options
##
##    def CallExtension(self, Handle, Function, Arguments):
##        '-no docstring-'
##        #return 
##
##    def GetEventFilterText(self, Index, BufferSize):
##        '-no docstring-'
##        #return Buffer, TextSize
##
##    def SetEventFilterCommand(self, Index, Command):
##        '-no docstring-'
##        #return 
##
##    def GetNumberPossibleExecutingProcessorTypes(self):
##        '-no docstring-'
##        #return Number
##
##    def SetSpecificFilterParameters(self, Start, Count, Params):
##        '-no docstring-'
##        #return 
##
##    def GetNumberEventFilters(self):
##        '-no docstring-'
##        #return SpecificEvents, SpecificExceptions, ArbitraryExceptions
##
##    def OutputDisassemblyLines(self, OutputControl, PreviousLines, TotalLines, Offset, Flags):
##        '-no docstring-'
##        #return OffsetLine, StartOffset, EndOffset, LineOffsets
##
##    def SetTextReplacement(self, SrcText, DstText):
##        '-no docstring-'
##        #return 
##
##    def GetReturnOffset(self):
##        '-no docstring-'
##        #return Offset
##
##    def GetLastEventInformation(self, ExtraInformationSize, DescriptionSize):
##        '-no docstring-'
##        #return Type, ProcessId, ThreadId, ExtraInformation, ExtraInformationUsed, Description, DescriptionUsed
##
##    def SetInterruptTimeout(self, Seconds):
##        '-no docstring-'
##        #return 
##
##    def GetStackTrace(self, FrameOffset, StackOffset, InstructionOffset, FramesSize):
##        '-no docstring-'
##        #return Frames, FramesFilled
##
##    def GetSystemErrorControl(self):
##        '-no docstring-'
##        #return OutputLevel, BreakLevel
##
##    def GetSpecificFilterArgument(self, Index, BufferSize):
##        '-no docstring-'
##        #return Buffer, ArgumentSize
##
##    def GetExceptionFilterSecondCommand(self, Index, BufferSize):
##        '-no docstring-'
##        #return Buffer, CommandSize
##
##    def GetPageSize(self):
##        '-no docstring-'
##        #return Size
##
##    def Disassemble(self, Offset, Flags, BufferSize):
##        '-no docstring-'
##        #return Buffer, DisassemblySize, EndOffset
##
##    def GetExecutionStatus(self):
##        '-no docstring-'
##        #return Status
##
##    def GetExtensionByPath(self, Path):
##        '-no docstring-'
##        #return Handle
##
##    def OutputPromptVaList(self, OutputControl, Format, Args):
##        '-no docstring-'
##        #return 
##
##    def GetNumberBreakpoints(self):
##        '-no docstring-'
##        #return Number
##
##    def GetBreakpointByIndex(self, Index):
##        '-no docstring-'
##        #return Bp
##
##    def RemoveTextReplacements(self):
##        '-no docstring-'
##        #return 
##
##    def GetEventFilterCommand(self, Index, BufferSize):
##        '-no docstring-'
##        #return Buffer, CommandSize
##
##    def SetEngineOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def GetDumpFormatFlags(self):
##        '-no docstring-'
##        #return FormatFlags
##
##    def GetExtensionFunction(self, Handle, FuncName):
##        '-no docstring-'
##        #return Function
##
##    def GetPossibleExecutingProcessorTypes(self, Start, Count):
##        '-no docstring-'
##        #return Types
##
##    def GetSupportedProcessorTypes(self, Start, Count):
##        '-no docstring-'
##        #return Types
##
##    def GetLogMask(self):
##        '-no docstring-'
##        #return Mask
##
##    def GetPromptText(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, TextSize
##
##    def GetEffectiveProcessorType(self):
##        '-no docstring-'
##        #return Type
##
##    def Output(self, Mask, Format, __MIDL__IDebugControl20000):
##        '-no docstring-'
##        #return 
##
##    def IsPointer64Bit(self):
##        '-no docstring-'
##        #return 
##
##    def OutputTextReplacements(self, OutputControl, Flags):
##        '-no docstring-'
##        #return 
##
##    def SetSystemErrorControl(self, OutputLevel, BreakLevel):
##        '-no docstring-'
##        #return 
##
##    def GetProcessorTypeNames(self, Type, FullNameBufferSize, AbbrevNameBufferSize):
##        '-no docstring-'
##        #return FullNameBuffer, FullNameSize, AbbrevNameBuffer, AbbrevNameSize
##


# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0024'
DEBUG_ECREATE_PROCESS_USE_VERIFIER_FLAGS = 2
__MIDL___MIDL_itf_DbgEng_0001_0068_0024 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0078_0002'
DEBUG_HANDLE_DATA_TYPE_TYPE_NAME = 1
__MIDL___MIDL_itf_DbgEng_0001_0078_0002 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0025'
DEBUG_ECREATE_PROCESS_USE_IMPLICIT_COMMAND_LINE = 4
__MIDL___MIDL_itf_DbgEng_0001_0068_0025 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0027'
DEBUG_PROCESS_ONLY_THIS_PROCESS = 2
__MIDL___MIDL_itf_DbgEng_0001_0068_0027 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0076_0013'
DEBUG_MANRESET_DEFAULT = 0
__MIDL___MIDL_itf_DbgEng_0001_0076_0013 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0091_0004'
DEBUG_MODULE_EXPLICIT = 8
__MIDL___MIDL_itf_DbgEng_0001_0091_0004 = c_int # enum
class _DEBUG_LAST_EVENT_INFO_EXIT_PROCESS(Structure):
    pass
_DEBUG_LAST_EVENT_INFO_EXIT_PROCESS._fields_ = [
    ('ExitCode', c_ulong),
]
assert sizeof(_DEBUG_LAST_EVENT_INFO_EXIT_PROCESS) == 4, sizeof(_DEBUG_LAST_EVENT_INFO_EXIT_PROCESS)
assert alignment(_DEBUG_LAST_EVENT_INFO_EXIT_PROCESS) == 4, alignment(_DEBUG_LAST_EVENT_INFO_EXIT_PROCESS)

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0029'
DEBUG_CONNECT_SESSION_NO_VERSION = 1
__MIDL___MIDL_itf_DbgEng_0001_0068_0029 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0025'
DEBUG_OUTCTL_DML = 32
__MIDL___MIDL_itf_DbgEng_0001_0073_0025 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0031'
DEBUG_SERVERS_DEBUGGER = 1
__MIDL___MIDL_itf_DbgEng_0001_0068_0031 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0069_0015'
DEBUG_FORMAT_USER_SMALL_FULL_MEMORY_INFO = 1024
__MIDL___MIDL_itf_DbgEng_0001_0069_0015 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0026'
DEBUG_PROCESS_DETACH_ON_EXIT = 1
__MIDL___MIDL_itf_DbgEng_0001_0068_0026 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0028'
DEBUG_CONNECT_SESSION_DEFAULT = 0
__MIDL___MIDL_itf_DbgEng_0001_0068_0028 = c_int # enum
class IDebugAdvanced3(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'IDebugAdvanced3'
    _iid_ = GUID('{CBA4ABB4-84C4-444D-87CA-A04E13286739}')
    _idlflags_ = []
IDebugAdvanced3._methods_ = [
    COMMETHOD([], HRESULT, 'GetThreadContext',
              ( ['out'], c_void_p, 'Context' ),
              ( ['in'], c_ulong, 'ContextSize' )),
    COMMETHOD([], HRESULT, 'SetThreadContext',
              ( ['in'], c_void_p, 'Context' ),
              ( ['in'], c_ulong, 'ContextSize' )),
    COMMETHOD([], HRESULT, 'Request',
              ( ['in'], c_ulong, 'Request' ),
              ( ['in', 'optional'], c_void_p, 'InBuffer' ),
              ( ['in', 'optional'], c_ulong, 'InBufferSize' ),
              ( ['out', 'optional'], c_void_p, 'OutBuffer' ),
              ( ['in', 'optional'], c_ulong, 'OutBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'OutSize' )),
    COMMETHOD([], HRESULT, 'GetSourceFileInformation',
              ( ['in'], c_ulong, 'Which' ),
              ( ['in'], STRING, 'SourceFile' ),
              ( ['in'], c_ulonglong, 'Arg64' ),
              ( ['in'], c_ulong, 'Arg32' ),
              ( ['in', 'out', 'optional'], c_void_p, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'InfoSize' )),
    COMMETHOD([], HRESULT, 'FindSourceFileAndToken',
              ( ['in'], c_ulong, 'StartElement' ),
              ( ['in'], c_ulonglong, 'ModAddr' ),
              ( ['in'], STRING, 'File' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['in', 'optional'], c_void_p, 'FileToken' ),
              ( ['in', 'optional'], c_ulong, 'FileTokenSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'FoundElement' ),
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'FoundSize' )),
    COMMETHOD([], HRESULT, 'GetSymbolInformation',
              ( ['in'], c_ulong, 'Which' ),
              ( ['in'], c_ulonglong, 'Arg64' ),
              ( ['in'], c_ulong, 'Arg32' ),
              ( ['in', 'out', 'optional'], c_void_p, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'InfoSize' ),
              ( ['out', 'optional'], STRING, 'StringBuffer' ),
              ( ['in', 'optional'], c_ulong, 'StringBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'StringSize' )),
    COMMETHOD([], HRESULT, 'GetSystemObjectInformation',
              ( ['in'], c_ulong, 'Which' ),
              ( ['in'], c_ulonglong, 'Arg64' ),
              ( ['in'], c_ulong, 'Arg32' ),
              ( ['in', 'out', 'optional'], c_void_p, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'InfoSize' )),
    COMMETHOD([], HRESULT, 'GetSourceFileInformationWide',
              ( ['in'], c_ulong, 'Which' ),
              ( ['in'], POINTER(c_ushort), 'SourceFile' ),
              ( ['in'], c_ulonglong, 'Arg64' ),
              ( ['in'], c_ulong, 'Arg32' ),
              ( ['in', 'out', 'optional'], c_void_p, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'InfoSize' )),
    COMMETHOD([], HRESULT, 'FindSourceFileAndTokenWide',
              ( ['in'], c_ulong, 'StartElement' ),
              ( ['in'], c_ulonglong, 'ModAddr' ),
              ( ['in'], POINTER(c_ushort), 'File' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['in', 'optional'], c_void_p, 'FileToken' ),
              ( ['in', 'optional'], c_ulong, 'FileTokenSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'FoundElement' ),
              ( ['out', 'optional'], POINTER(c_ushort), 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'FoundSize' )),
    COMMETHOD([], HRESULT, 'GetSymbolInformationWide',
              ( ['in'], c_ulong, 'Which' ),
              ( ['in'], c_ulonglong, 'Arg64' ),
              ( ['in'], c_ulong, 'Arg32' ),
              ( ['in', 'out', 'optional'], c_void_p, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'InfoSize' ),
              ( ['out', 'optional'], POINTER(c_ushort), 'StringBuffer' ),
              ( ['in', 'optional'], c_ulong, 'StringBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'StringSize' )),
]
################################################################
## code template for IDebugAdvanced3 implementation
##class IDebugAdvanced3_Impl(object):
##    def SetThreadContext(self, Context, ContextSize):
##        '-no docstring-'
##        #return 
##
##    def GetSymbolInformation(self, Which, Arg64, Arg32, BufferSize, StringBufferSize):
##        '-no docstring-'
##        #return Buffer, InfoSize, StringBuffer, StringSize
##
##    def FindSourceFileAndTokenWide(self, StartElement, ModAddr, File, Flags, FileToken, FileTokenSize, BufferSize):
##        '-no docstring-'
##        #return FoundElement, Buffer, FoundSize
##
##    def GetSourceFileInformation(self, Which, SourceFile, Arg64, Arg32, BufferSize):
##        '-no docstring-'
##        #return Buffer, InfoSize
##
##    def Request(self, Request, InBuffer, InBufferSize, OutBufferSize):
##        '-no docstring-'
##        #return OutBuffer, OutSize
##
##    def GetSymbolInformationWide(self, Which, Arg64, Arg32, BufferSize, StringBufferSize):
##        '-no docstring-'
##        #return Buffer, InfoSize, StringBuffer, StringSize
##
##    def FindSourceFileAndToken(self, StartElement, ModAddr, File, Flags, FileToken, FileTokenSize, BufferSize):
##        '-no docstring-'
##        #return FoundElement, Buffer, FoundSize
##
##    def GetSourceFileInformationWide(self, Which, SourceFile, Arg64, Arg32, BufferSize):
##        '-no docstring-'
##        #return Buffer, InfoSize
##
##    def GetThreadContext(self, ContextSize):
##        '-no docstring-'
##        #return Context
##
##    def GetSystemObjectInformation(self, Which, Arg64, Arg32, BufferSize):
##        '-no docstring-'
##        #return Buffer, InfoSize
##


# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0067'
DEBUG_STACK_COLUMN_NAMES = 16
__MIDL___MIDL_itf_DbgEng_0001_0073_0067 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0032'
DEBUG_SERVERS_PROCESS = 2
__MIDL___MIDL_itf_DbgEng_0001_0068_0032 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0033'
DEBUG_SERVERS_ALL = 3
__MIDL___MIDL_itf_DbgEng_0001_0068_0033 = c_int # enum
class IDebugDataSpaces(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'IDebugDataSpaces'
    _iid_ = GUID('{88F7DFAB-3EA7-4C3A-AEFB-C4E8106173AA}')
    _idlflags_ = []
IDebugDataSpaces._methods_ = [
    COMMETHOD([], HRESULT, 'ReadVirtual',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in', 'out'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['in', 'out', 'optional'], POINTER(c_ulong), 'BytesRead' )),
    COMMETHOD([], HRESULT, 'WriteVirtual',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'BytesWritten' )),
    COMMETHOD([], HRESULT, 'SearchVirtual',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulonglong, 'Length' ),
              ( ['in'], c_void_p, 'Pattern' ),
              ( ['in'], c_ulong, 'PatternSize' ),
              ( ['in'], c_ulong, 'PatternGranularity' ),
              ( ['out'], POINTER(c_ulonglong), 'MatchOffset' )),
    COMMETHOD([], HRESULT, 'ReadVirtualUncached',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in', 'out'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['in', 'out', 'optional'], POINTER(c_ulong), 'BytesRead' )),
    COMMETHOD([], HRESULT, 'WriteVirtualUncached',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'BytesWritten' )),
    COMMETHOD([], HRESULT, 'ReadPointersVirtual',
              ( ['in'], c_ulong, 'Count' ),
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['out'], POINTER(c_ulonglong), 'Ptrs' )),
    COMMETHOD([], HRESULT, 'WritePointersVirtual',
              ( ['in'], c_ulong, 'Count' ),
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], POINTER(c_ulonglong), 'Ptrs' )),
    COMMETHOD([], HRESULT, 'ReadPhysical',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in', 'out'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['in', 'out', 'optional'], POINTER(c_ulong), 'BytesRead' )),
    COMMETHOD([], HRESULT, 'WritePhysical',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'BytesWritten' )),
    COMMETHOD([], HRESULT, 'ReadControl',
              ( ['in'], c_ulong, 'Processor' ),
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in', 'out'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['in', 'out', 'optional'], POINTER(c_ulong), 'BytesRead' )),
    COMMETHOD([], HRESULT, 'WriteControl',
              ( ['in'], c_ulong, 'Processor' ),
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'BytesWritten' )),
    COMMETHOD([], HRESULT, 'ReadIo',
              ( ['in'], c_ulong, 'InterfaceType' ),
              ( ['in'], c_ulong, 'BusNumber' ),
              ( ['in'], c_ulong, 'AddressSpace' ),
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in', 'out'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['in', 'out', 'optional'], POINTER(c_ulong), 'BytesRead' )),
    COMMETHOD([], HRESULT, 'WriteIo',
              ( ['in'], c_ulong, 'InterfaceType' ),
              ( ['in'], c_ulong, 'BusNumber' ),
              ( ['in'], c_ulong, 'AddressSpace' ),
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'BytesWritten' )),
    COMMETHOD([], HRESULT, 'ReadMsr',
              ( ['in'], c_ulong, 'Msr' ),
              ( ['out'], POINTER(c_ulonglong), 'Value' )),
    COMMETHOD([], HRESULT, 'WriteMsr',
              ( ['in'], c_ulong, 'Msr' ),
              ( ['in'], c_ulonglong, 'Value' )),
    COMMETHOD([], HRESULT, 'ReadBusData',
              ( ['in'], c_ulong, 'BusDataType' ),
              ( ['in'], c_ulong, 'BusNumber' ),
              ( ['in'], c_ulong, 'SlotNumber' ),
              ( ['in'], c_ulong, 'Offset' ),
              ( ['in', 'out'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['in', 'out', 'optional'], POINTER(c_ulong), 'BytesRead' )),
    COMMETHOD([], HRESULT, 'WriteBusData',
              ( ['in'], c_ulong, 'BusDataType' ),
              ( ['in'], c_ulong, 'BusNumber' ),
              ( ['in'], c_ulong, 'SlotNumber' ),
              ( ['in'], c_ulong, 'Offset' ),
              ( ['in'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'BytesWritten' )),
    COMMETHOD([], HRESULT, 'CheckLowMemory'),
    COMMETHOD([], HRESULT, 'ReadDebuggerData',
              ( ['in'], c_ulong, 'Index' ),
              ( ['in', 'out'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'DataSize' )),
    COMMETHOD([], HRESULT, 'ReadProcessorSystemData',
              ( ['in'], c_ulong, 'Processor' ),
              ( ['in'], c_ulong, 'Index' ),
              ( ['in', 'out'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'DataSize' )),
]
################################################################
## code template for IDebugDataSpaces implementation
##class IDebugDataSpaces_Impl(object):
##    def WriteBusData(self, BusDataType, BusNumber, SlotNumber, Offset, Buffer, BufferSize):
##        '-no docstring-'
##        #return BytesWritten
##
##    def WriteVirtual(self, Offset, Buffer, BufferSize):
##        '-no docstring-'
##        #return BytesWritten
##
##    def ReadDebuggerData(self, Index, BufferSize):
##        '-no docstring-'
##        #return Buffer, DataSize
##
##    def SearchVirtual(self, Offset, Length, Pattern, PatternSize, PatternGranularity):
##        '-no docstring-'
##        #return MatchOffset
##
##    def CheckLowMemory(self):
##        '-no docstring-'
##        #return 
##
##    def WriteIo(self, InterfaceType, BusNumber, AddressSpace, Offset, Buffer, BufferSize):
##        '-no docstring-'
##        #return BytesWritten
##
##    def ReadProcessorSystemData(self, Processor, Index, BufferSize):
##        '-no docstring-'
##        #return Buffer, DataSize
##
##    def ReadMsr(self, Msr):
##        '-no docstring-'
##        #return Value
##
##    def ReadIo(self, InterfaceType, BusNumber, AddressSpace, Offset, BufferSize):
##        '-no docstring-'
##        #return Buffer, BytesRead
##
##    def WritePointersVirtual(self, Count, Offset, Ptrs):
##        '-no docstring-'
##        #return 
##
##    def WritePhysical(self, Offset, Buffer, BufferSize):
##        '-no docstring-'
##        #return BytesWritten
##
##    def ReadVirtualUncached(self, Offset, BufferSize):
##        '-no docstring-'
##        #return Buffer, BytesRead
##
##    def ReadVirtual(self, Offset, BufferSize):
##        '-no docstring-'
##        #return Buffer, BytesRead
##
##    def ReadPhysical(self, Offset, BufferSize):
##        '-no docstring-'
##        #return Buffer, BytesRead
##
##    def ReadPointersVirtual(self, Count, Offset):
##        '-no docstring-'
##        #return Ptrs
##
##    def WriteVirtualUncached(self, Offset, Buffer, BufferSize):
##        '-no docstring-'
##        #return BytesWritten
##
##    def WriteControl(self, Processor, Offset, Buffer, BufferSize):
##        '-no docstring-'
##        #return BytesWritten
##
##    def ReadBusData(self, BusDataType, BusNumber, SlotNumber, Offset, BufferSize):
##        '-no docstring-'
##        #return Buffer, BytesRead
##
##    def ReadControl(self, Processor, Offset, BufferSize):
##        '-no docstring-'
##        #return Buffer, BytesRead
##
##    def WriteMsr(self, Msr, Value):
##        '-no docstring-'
##        #return 
##


# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0034'
DEBUG_END_PASSIVE = 0
__MIDL___MIDL_itf_DbgEng_0001_0068_0034 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0035'
DEBUG_END_ACTIVE_TERMINATE = 1
__MIDL___MIDL_itf_DbgEng_0001_0068_0035 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0036'
DEBUG_END_ACTIVE_DETACH = 2
__MIDL___MIDL_itf_DbgEng_0001_0068_0036 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0037'
DEBUG_END_REENTRANT = 3
__MIDL___MIDL_itf_DbgEng_0001_0068_0037 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0038'
DEBUG_END_DISCONNECT = 4
__MIDL___MIDL_itf_DbgEng_0001_0068_0038 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0039'
DEBUG_OUTPUT_NORMAL = 1
__MIDL___MIDL_itf_DbgEng_0001_0068_0039 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0040'
DEBUG_OUTPUT_ERROR = 2
__MIDL___MIDL_itf_DbgEng_0001_0068_0040 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0041'
DEBUG_OUTPUT_WARNING = 4
__MIDL___MIDL_itf_DbgEng_0001_0068_0041 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0069_0005'
DEBUG_FORMAT_USER_SMALL_FULL_MEMORY = 1
__MIDL___MIDL_itf_DbgEng_0001_0069_0005 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0091_0005'
DEBUG_MODULE_SECONDARY = 16
__MIDL___MIDL_itf_DbgEng_0001_0091_0005 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0043'
DEBUG_OUTPUT_PROMPT = 16
__MIDL___MIDL_itf_DbgEng_0001_0068_0043 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0044'
DEBUG_OUTPUT_PROMPT_REGISTERS = 32
__MIDL___MIDL_itf_DbgEng_0001_0068_0044 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0045'
DEBUG_OUTPUT_EXTENSION_WARNING = 64
__MIDL___MIDL_itf_DbgEng_0001_0068_0045 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0046'
DEBUG_OUTPUT_DEBUGGEE = 128
__MIDL___MIDL_itf_DbgEng_0001_0068_0046 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0047'
DEBUG_OUTPUT_DEBUGGEE_PROMPT = 256
__MIDL___MIDL_itf_DbgEng_0001_0068_0047 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0078_0006'
DEBUG_HANDLE_DATA_TYPE_OBJECT_NAME_WIDE = 5
__MIDL___MIDL_itf_DbgEng_0001_0078_0006 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0049'
DEBUG_IOUTPUT_KD_PROTOCOL = -2147483648
__MIDL___MIDL_itf_DbgEng_0001_0068_0049 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0050'
DEBUG_IOUTPUT_REMOTING = 1073741824
__MIDL___MIDL_itf_DbgEng_0001_0068_0050 = c_int # enum
class _DEBUG_MODULE_AND_ID(Structure):
    pass
_DEBUG_MODULE_AND_ID._fields_ = [
    ('ModuleBase', c_ulonglong),
    ('Id', c_ulonglong),
]
assert sizeof(_DEBUG_MODULE_AND_ID) == 16, sizeof(_DEBUG_MODULE_AND_ID)
assert alignment(_DEBUG_MODULE_AND_ID) == 8, alignment(_DEBUG_MODULE_AND_ID)

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0051'
DEBUG_IOUTPUT_BREAKPOINT = 536870912
__MIDL___MIDL_itf_DbgEng_0001_0068_0051 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0052'
DEBUG_IOUTPUT_EVENT = 268435456
__MIDL___MIDL_itf_DbgEng_0001_0068_0052 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0053'
DEBUG_OUTPUT_IDENTITY_DEFAULT = 0
__MIDL___MIDL_itf_DbgEng_0001_0068_0053 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0091_0007'
DEBUG_MODULE_SYM_BAD_CHECKSUM = 65536
__MIDL___MIDL_itf_DbgEng_0001_0091_0007 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0069_0002'
DEBUG_FORMAT_WRITE_CAB = 536870912
__MIDL___MIDL_itf_DbgEng_0001_0069_0002 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0069_0003'
DEBUG_FORMAT_CAB_SECONDARY_FILES = 1073741824
__MIDL___MIDL_itf_DbgEng_0001_0069_0003 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0069_0004'
DEBUG_FORMAT_NO_OVERWRITE = -2147483648
__MIDL___MIDL_itf_DbgEng_0001_0069_0004 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0064_0041'
DEBUG_TBINFO_AFFINITY = 32
__MIDL___MIDL_itf_DbgEng_0001_0064_0041 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0069_0006'
DEBUG_FORMAT_USER_SMALL_HANDLE_DATA = 2
__MIDL___MIDL_itf_DbgEng_0001_0069_0006 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0084'
DEBUG_DUMP_WINDOWS_CE = 1029
__MIDL___MIDL_itf_DbgEng_0001_0073_0084 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0069_0008'
DEBUG_FORMAT_USER_SMALL_INDIRECT_MEMORY = 8
__MIDL___MIDL_itf_DbgEng_0001_0069_0008 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0069_0009'
DEBUG_FORMAT_USER_SMALL_DATA_SEGMENTS = 16
__MIDL___MIDL_itf_DbgEng_0001_0069_0009 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0069_0010'
DEBUG_FORMAT_USER_SMALL_FILTER_MEMORY = 32
__MIDL___MIDL_itf_DbgEng_0001_0069_0010 = c_int # enum
class IDebugAdvanced2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'IDebugAdvanced2'
    _iid_ = GUID('{716D14C9-119B-4BA5-AF1F-0890E672416A}')
    _idlflags_ = []
IDebugAdvanced2._methods_ = [
    COMMETHOD([], HRESULT, 'GetThreadContext',
              ( ['out'], c_void_p, 'Context' ),
              ( ['in'], c_ulong, 'ContextSize' )),
    COMMETHOD([], HRESULT, 'SetThreadContext',
              ( ['in'], c_void_p, 'Context' ),
              ( ['in'], c_ulong, 'ContextSize' )),
    COMMETHOD([], HRESULT, 'Request',
              ( ['in'], c_ulong, 'Request' ),
              ( ['in', 'optional'], c_void_p, 'InBuffer' ),
              ( ['in', 'optional'], c_ulong, 'InBufferSize' ),
              ( ['out', 'optional'], c_void_p, 'OutBuffer' ),
              ( ['in', 'optional'], c_ulong, 'OutBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'OutSize' )),
    COMMETHOD([], HRESULT, 'GetSourceFileInformation',
              ( ['in'], c_ulong, 'Which' ),
              ( ['in'], STRING, 'SourceFile' ),
              ( ['in'], c_ulonglong, 'Arg64' ),
              ( ['in'], c_ulong, 'Arg32' ),
              ( ['in', 'out', 'optional'], c_void_p, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'InfoSize' )),
    COMMETHOD([], HRESULT, 'FindSourceFileAndToken',
              ( ['in'], c_ulong, 'StartElement' ),
              ( ['in'], c_ulonglong, 'ModAddr' ),
              ( ['in'], STRING, 'File' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['in', 'optional'], c_void_p, 'FileToken' ),
              ( ['in', 'optional'], c_ulong, 'FileTokenSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'FoundElement' ),
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'FoundSize' )),
    COMMETHOD([], HRESULT, 'GetSymbolInformation',
              ( ['in'], c_ulong, 'Which' ),
              ( ['in'], c_ulonglong, 'Arg64' ),
              ( ['in'], c_ulong, 'Arg32' ),
              ( ['in', 'out', 'optional'], c_void_p, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'InfoSize' ),
              ( ['out', 'optional'], STRING, 'StringBuffer' ),
              ( ['in', 'optional'], c_ulong, 'StringBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'StringSize' )),
    COMMETHOD([], HRESULT, 'GetSystemObjectInformation',
              ( ['in'], c_ulong, 'Which' ),
              ( ['in'], c_ulonglong, 'Arg64' ),
              ( ['in'], c_ulong, 'Arg32' ),
              ( ['in', 'out', 'optional'], c_void_p, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'InfoSize' )),
]
################################################################
## code template for IDebugAdvanced2 implementation
##class IDebugAdvanced2_Impl(object):
##    def SetThreadContext(self, Context, ContextSize):
##        '-no docstring-'
##        #return 
##
##    def GetSymbolInformation(self, Which, Arg64, Arg32, BufferSize, StringBufferSize):
##        '-no docstring-'
##        #return Buffer, InfoSize, StringBuffer, StringSize
##
##    def GetSourceFileInformation(self, Which, SourceFile, Arg64, Arg32, BufferSize):
##        '-no docstring-'
##        #return Buffer, InfoSize
##
##    def Request(self, Request, InBuffer, InBufferSize, OutBufferSize):
##        '-no docstring-'
##        #return OutBuffer, OutSize
##
##    def FindSourceFileAndToken(self, StartElement, ModAddr, File, Flags, FileToken, FileTokenSize, BufferSize):
##        '-no docstring-'
##        #return FoundElement, Buffer, FoundSize
##
##    def GetThreadContext(self, ContextSize):
##        '-no docstring-'
##        #return Context
##
##    def GetSystemObjectInformation(self, Which, Arg64, Arg32, BufferSize):
##        '-no docstring-'
##        #return Buffer, InfoSize
##


# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0069_0011'
DEBUG_FORMAT_USER_SMALL_FILTER_PATHS = 64
__MIDL___MIDL_itf_DbgEng_0001_0069_0011 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0069_0012'
DEBUG_FORMAT_USER_SMALL_PROCESS_THREAD_DATA = 128
__MIDL___MIDL_itf_DbgEng_0001_0069_0012 = c_int # enum
class Library(object):
    u'DbgEng Type Library'
    name = u'DbgEng'
    _reg_typelib_ = ('{95F974F5-B0AE-44A4-8EB9-FEC4E8136416}', 0, 0)


# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0069_0013'
DEBUG_FORMAT_USER_SMALL_PRIVATE_READ_WRITE_MEMORY = 256
__MIDL___MIDL_itf_DbgEng_0001_0069_0013 = c_int # enum
class IDebugAdvanced(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'IDebugAdvanced'
    _iid_ = GUID('{F2DF5F53-071F-47BD-9DE6-5734C3FED689}')
    _idlflags_ = []
IDebugAdvanced._methods_ = [
    COMMETHOD([], HRESULT, 'GetThreadContext',
              ( ['out'], c_void_p, 'Context' ),
              ( ['in'], c_ulong, 'ContextSize' )),
    COMMETHOD([], HRESULT, 'SetThreadContext',
              ( ['in'], c_void_p, 'Context' ),
              ( ['in'], c_ulong, 'ContextSize' )),
]
################################################################
## code template for IDebugAdvanced implementation
##class IDebugAdvanced_Impl(object):
##    def SetThreadContext(self, Context, ContextSize):
##        '-no docstring-'
##        #return 
##
##    def GetThreadContext(self, ContextSize):
##        '-no docstring-'
##        #return Context
##


# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0069_0014'
DEBUG_FORMAT_USER_SMALL_NO_OPTIONAL_DATA = 512
__MIDL___MIDL_itf_DbgEng_0001_0069_0014 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0069_0017'
DEBUG_FORMAT_USER_SMALL_CODE_SEGMENTS = 4096
__MIDL___MIDL_itf_DbgEng_0001_0069_0017 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0069_0016'
DEBUG_FORMAT_USER_SMALL_THREAD_INFO = 2048
__MIDL___MIDL_itf_DbgEng_0001_0069_0016 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0059'
DEBUG_ENGOPT_DISALLOW_IMAGE_FILE_MAPPING = 131072
__MIDL___MIDL_itf_DbgEng_0001_0073_0059 = c_int # enum
class IDebugBreakpoint2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'IDebugBreakpoint2'
    _iid_ = GUID('{1B278D20-79F2-426E-A3F9-C1DDF375D48E}')
    _idlflags_ = []
IDebugBreakpoint2._methods_ = [
    COMMETHOD([], HRESULT, 'GetId',
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetType',
              ( ['out'], POINTER(c_ulong), 'BreakType' ),
              ( ['out'], POINTER(c_ulong), 'ProcType' )),
    COMMETHOD([], HRESULT, 'GetAdder',
              ( ['out'], POINTER(POINTER(IDebugClient)), 'Adder' )),
    COMMETHOD([], HRESULT, 'GetFlags',
              ( ['out'], POINTER(c_ulong), 'Flags' )),
    COMMETHOD([], HRESULT, 'AddFlags',
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'RemoveFlags',
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'SetFlags',
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'GetOffset',
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'SetOffset',
              ( ['in'], c_ulonglong, 'Offset' )),
    COMMETHOD([], HRESULT, 'GetDataParameters',
              ( ['out'], POINTER(c_ulong), 'Size' ),
              ( ['out'], POINTER(c_ulong), 'AccessType' )),
    COMMETHOD([], HRESULT, 'SetDataParameters',
              ( ['in'], c_ulong, 'Size' ),
              ( ['in'], c_ulong, 'AccessType' )),
    COMMETHOD([], HRESULT, 'GetPassCount',
              ( ['out'], POINTER(c_ulong), 'Count' )),
    COMMETHOD([], HRESULT, 'SetPassCount',
              ( ['in'], c_ulong, 'Count' )),
    COMMETHOD([], HRESULT, 'GetCurrentPassCount',
              ( ['out'], POINTER(c_ulong), 'Count' )),
    COMMETHOD([], HRESULT, 'GetMatchThreadId',
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'SetMatchThreadId',
              ( ['in'], c_ulong, 'Thread' )),
    COMMETHOD([], HRESULT, 'GetCommand',
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'CommandSize' )),
    COMMETHOD([], HRESULT, 'SetCommand',
              ( ['in'], STRING, 'Command' )),
    COMMETHOD([], HRESULT, 'GetOffsetExpression',
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ExpressionSize' )),
    COMMETHOD([], HRESULT, 'SetOffsetExpression',
              ( ['in'], STRING, 'Expression' )),
    COMMETHOD([], HRESULT, 'GetParameters',
              ( ['out'], POINTER(_DEBUG_BREAKPOINT_PARAMETERS), 'Params' )),
    COMMETHOD([], HRESULT, 'GetCommandWide',
              ( ['out', 'optional'], POINTER(c_ushort), 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'CommandSize' )),
    COMMETHOD([], HRESULT, 'SetCommandWide',
              ( ['in'], POINTER(c_ushort), 'Command' )),
    COMMETHOD([], HRESULT, 'GetOffsetExpressionWide',
              ( ['out', 'optional'], POINTER(c_ushort), 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ExpressionSize' )),
    COMMETHOD([], HRESULT, 'SetOffsetExpressionWide',
              ( ['in'], POINTER(c_ushort), 'Expression' )),
]
################################################################
## code template for IDebugBreakpoint2 implementation
##class IDebugBreakpoint2_Impl(object):
##    def GetOffset(self):
##        '-no docstring-'
##        #return Offset
##
##    def GetDataParameters(self):
##        '-no docstring-'
##        #return Size, AccessType
##
##    def GetCommand(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, CommandSize
##
##    def GetCommandWide(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, CommandSize
##
##    def SetOffsetExpression(self, Expression):
##        '-no docstring-'
##        #return 
##
##    def GetFlags(self):
##        '-no docstring-'
##        #return Flags
##
##    def SetCommandWide(self, Command):
##        '-no docstring-'
##        #return 
##
##    def GetOffsetExpression(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, ExpressionSize
##
##    def RemoveFlags(self, Flags):
##        '-no docstring-'
##        #return 
##
##    def GetAdder(self):
##        '-no docstring-'
##        #return Adder
##
##    def GetPassCount(self):
##        '-no docstring-'
##        #return Count
##
##    def GetMatchThreadId(self):
##        '-no docstring-'
##        #return Id
##
##    def GetId(self):
##        '-no docstring-'
##        #return Id
##
##    def SetMatchThreadId(self, Thread):
##        '-no docstring-'
##        #return 
##
##    def AddFlags(self, Flags):
##        '-no docstring-'
##        #return 
##
##    def SetFlags(self, Flags):
##        '-no docstring-'
##        #return 
##
##    def SetOffset(self, Offset):
##        '-no docstring-'
##        #return 
##
##    def SetOffsetExpressionWide(self, Expression):
##        '-no docstring-'
##        #return 
##
##    def SetPassCount(self, Count):
##        '-no docstring-'
##        #return 
##
##    def GetOffsetExpressionWide(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, ExpressionSize
##
##    def SetDataParameters(self, Size, AccessType):
##        '-no docstring-'
##        #return 
##
##    def GetType(self):
##        '-no docstring-'
##        #return BreakType, ProcType
##
##    def GetCurrentPassCount(self):
##        '-no docstring-'
##        #return Count
##
##    def SetCommand(self, Command):
##        '-no docstring-'
##        #return 
##
##    def GetParameters(self):
##        '-no docstring-'
##        #return Params
##


# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0069_0018'
DEBUG_FORMAT_USER_SMALL_NO_AUXILIARY_STATE = 8192
__MIDL___MIDL_itf_DbgEng_0001_0069_0018 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0125'
DEBUG_DATA_PROCESSOR_SPEED = 5
__MIDL___MIDL_itf_DbgEng_0001_0077_0125 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0027'
DEBUG_OUTCTL_AMBIENT_TEXT = -1
__MIDL___MIDL_itf_DbgEng_0001_0073_0027 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0098_0003'
DEBUG_CMDEX_ADD_EVENT_STRING = 1
__MIDL___MIDL_itf_DbgEng_0001_0098_0003 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0091_0002'
DEBUG_MODULE_UNLOADED = 1
__MIDL___MIDL_itf_DbgEng_0001_0091_0002 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0078_0004'
DEBUG_HANDLE_DATA_TYPE_HANDLE_COUNT = 3
__MIDL___MIDL_itf_DbgEng_0001_0078_0004 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0091_0001'
DEBUG_MODULE_LOADED = 0
__MIDL___MIDL_itf_DbgEng_0001_0091_0001 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0091_0011'
DEBUG_SYMTYPE_PDB = 3
__MIDL___MIDL_itf_DbgEng_0001_0091_0011 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0091_0003'
DEBUG_MODULE_USER_MODE = 2
__MIDL___MIDL_itf_DbgEng_0001_0091_0003 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0078_0005'
DEBUG_HANDLE_DATA_TYPE_TYPE_NAME_WIDE = 4
__MIDL___MIDL_itf_DbgEng_0001_0078_0005 = c_int # enum
class __MIDL___MIDL_itf_DbgEng_0001_0073_0127(Union):
    pass
class __MIDL___MIDL_itf_DbgEng_0001_0073_0128(Structure):
    pass
__MIDL___MIDL_itf_DbgEng_0001_0073_0128._fields_ = [
    ('I64', c_ulonglong),
    ('Nat', c_int),
]
assert sizeof(__MIDL___MIDL_itf_DbgEng_0001_0073_0128) == 16, sizeof(__MIDL___MIDL_itf_DbgEng_0001_0073_0128)
assert alignment(__MIDL___MIDL_itf_DbgEng_0001_0073_0128) == 8, alignment(__MIDL___MIDL_itf_DbgEng_0001_0073_0128)
class __MIDL___MIDL_itf_DbgEng_0001_0073_0129(Structure):
    pass
__MIDL___MIDL_itf_DbgEng_0001_0073_0129._fields_ = [
    ('LowPart', c_ulong),
    ('HighPart', c_ulong),
]
assert sizeof(__MIDL___MIDL_itf_DbgEng_0001_0073_0129) == 8, sizeof(__MIDL___MIDL_itf_DbgEng_0001_0073_0129)
assert alignment(__MIDL___MIDL_itf_DbgEng_0001_0073_0129) == 4, alignment(__MIDL___MIDL_itf_DbgEng_0001_0073_0129)
class __MIDL___MIDL_itf_DbgEng_0001_0073_0130(Structure):
    pass
__MIDL___MIDL_itf_DbgEng_0001_0073_0130._fields_ = [
    ('LowPart', c_ulonglong),
    ('HighPart', c_longlong),
]
assert sizeof(__MIDL___MIDL_itf_DbgEng_0001_0073_0130) == 16, sizeof(__MIDL___MIDL_itf_DbgEng_0001_0073_0130)
assert alignment(__MIDL___MIDL_itf_DbgEng_0001_0073_0130) == 8, alignment(__MIDL___MIDL_itf_DbgEng_0001_0073_0130)
__MIDL___MIDL_itf_DbgEng_0001_0073_0127._fields_ = [
    ('I8', c_ubyte),
    ('I16', c_ushort),
    ('I32', c_ulong),
    ('__MIDL____MIDL_itf_DbgEng_0001_00730000', __MIDL___MIDL_itf_DbgEng_0001_0073_0128),
    ('F32', c_float),
    ('F64', c_double),
    ('F80Bytes', c_ubyte * 10),
    ('F82Bytes', c_ubyte * 11),
    ('F128Bytes', c_ubyte * 16),
    ('VI8', c_ubyte * 16),
    ('VI16', c_ushort * 8),
    ('VI32', c_ulong * 4),
    ('VI64', c_ulonglong * 2),
    ('VF32', c_float * 4),
    ('VF64', c_double * 2),
    ('I64Parts32', __MIDL___MIDL_itf_DbgEng_0001_0073_0129),
    ('F128Parts64', __MIDL___MIDL_itf_DbgEng_0001_0073_0130),
    ('RawBytes', c_ubyte * 24),
]
assert sizeof(__MIDL___MIDL_itf_DbgEng_0001_0073_0127) == 24, sizeof(__MIDL___MIDL_itf_DbgEng_0001_0073_0127)
assert alignment(__MIDL___MIDL_itf_DbgEng_0001_0073_0127) == 8, alignment(__MIDL___MIDL_itf_DbgEng_0001_0073_0127)

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0091_0006'
DEBUG_MODULE_SYNTHETIC = 32
__MIDL___MIDL_itf_DbgEng_0001_0091_0006 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0078_0007'
DEBUG_HANDLE_DATA_TYPE_MINI_THREAD_1 = 6
__MIDL___MIDL_itf_DbgEng_0001_0078_0007 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0078_0008'
DEBUG_HANDLE_DATA_TYPE_MINI_MUTANT_1 = 7
__MIDL___MIDL_itf_DbgEng_0001_0078_0008 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0113'
DEBUG_WAIT_DEFAULT = 0
__MIDL___MIDL_itf_DbgEng_0001_0073_0113 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0078_0009'
DEBUG_HANDLE_DATA_TYPE_MINI_MUTANT_2 = 8
__MIDL___MIDL_itf_DbgEng_0001_0078_0009 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0078_0012'
DEBUG_HANDLE_DATA_TYPE_MINI_PROCESS_1 = 11
__MIDL___MIDL_itf_DbgEng_0001_0078_0012 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0078_0010'
DEBUG_HANDLE_DATA_TYPE_PER_HANDLE_OPERATIONS = 9
__MIDL___MIDL_itf_DbgEng_0001_0078_0010 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0078_0011'
DEBUG_HANDLE_DATA_TYPE_ALL_HANDLE_OPERATIONS = 10
__MIDL___MIDL_itf_DbgEng_0001_0078_0011 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0010'
DEBUG_PROC_DESC_NO_SERVICES = 2
__MIDL___MIDL_itf_DbgEng_0001_0068_0010 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0078_0013'
DEBUG_HANDLE_DATA_TYPE_MINI_PROCESS_2 = 12
__MIDL___MIDL_itf_DbgEng_0001_0078_0013 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0091_0014'
DEBUG_SYMTYPE_SYM = 6
__MIDL___MIDL_itf_DbgEng_0001_0091_0014 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0081_0023'
DEBUG_CDS_REGISTERS = 1
__MIDL___MIDL_itf_DbgEng_0001_0081_0023 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0091_0013'
DEBUG_SYMTYPE_DEFERRED = 5
__MIDL___MIDL_itf_DbgEng_0001_0091_0013 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0091_0016'
DEBUG_SCOPE_GROUP_ARGUMENTS = 1
__MIDL___MIDL_itf_DbgEng_0001_0091_0016 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0064'
DEBUG_STACK_FUNCTION_INFO = 2
__MIDL___MIDL_itf_DbgEng_0001_0073_0064 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0091_0018'
DEBUG_SCOPE_GROUP_ALL = 3
__MIDL___MIDL_itf_DbgEng_0001_0091_0018 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0091_0019'
DEBUG_OUTTYPE_DEFAULT = 0
__MIDL___MIDL_itf_DbgEng_0001_0091_0019 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0091_0020'
DEBUG_OUTTYPE_NO_INDENT = 1
__MIDL___MIDL_itf_DbgEng_0001_0091_0020 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0011'
DEBUG_DATA_SavedContextAddr = 40
__MIDL___MIDL_itf_DbgEng_0001_0077_0011 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0091_0021'
DEBUG_OUTTYPE_NO_OFFSET = 2
__MIDL___MIDL_itf_DbgEng_0001_0091_0021 = c_int # enum
class IDebugControl4(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'IDebugControl4'
    _iid_ = GUID('{94E60CE9-9B41-4B19-9FC0-6D9EB35272B3}')
    _idlflags_ = []
IDebugControl4._methods_ = [
    COMMETHOD([], HRESULT, 'GetInterrupt'),
    COMMETHOD([], HRESULT, 'SetInterrupt',
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'GetInterruptTimeout',
              ( ['out'], POINTER(c_ulong), 'Seconds' )),
    COMMETHOD([], HRESULT, 'SetInterruptTimeout',
              ( ['in'], c_ulong, 'Seconds' )),
    COMMETHOD([], HRESULT, 'GetLogFile',
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'FileSize' ),
              ( ['out', 'optional'], POINTER(c_int), 'Append' )),
    COMMETHOD([], HRESULT, 'OpenLogFile',
              ( ['in'], STRING, 'File' ),
              ( ['in'], c_int, 'Append' )),
    COMMETHOD([], HRESULT, 'CloseLogFile'),
    COMMETHOD([], HRESULT, 'GetLogMask',
              ( ['out'], POINTER(c_ulong), 'Mask' )),
    COMMETHOD([], HRESULT, 'SetLogMask',
              ( ['in'], c_ulong, 'Mask' )),
    COMMETHOD([], HRESULT, 'Input',
              ( ['out'], STRING, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'InputSize' )),
    COMMETHOD([], HRESULT, 'ReturnInput',
              ( ['in'], STRING, 'Buffer' )),
    COMMETHOD([], HRESULT, 'Output',
              ( ['in'], c_ulong, 'Mask' ),
              ( ['in'], STRING, 'Format' ),
              ( [], _midlSAFEARRAY(VARIANT), '__MIDL__IDebugControl40000' )),
    COMMETHOD([], HRESULT, 'OutputVaList',
              ( ['in'], c_ulong, 'Mask' ),
              ( ['in'], STRING, 'Format' ),
              ( ['in'], STRING, 'Args' )),
    COMMETHOD([], HRESULT, 'ControlledOutput',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], c_ulong, 'Mask' ),
              ( ['in'], STRING, 'Format' ),
              ( [], _midlSAFEARRAY(VARIANT), '__MIDL__IDebugControl40001' )),
    COMMETHOD([], HRESULT, 'ControlledOutputVaList',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], c_ulong, 'Mask' ),
              ( ['in'], STRING, 'Format' ),
              ( ['in'], STRING, 'Args' )),
    COMMETHOD([], HRESULT, 'OutputPrompt',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in', 'optional'], STRING, 'Format' ),
              ( ['optional'], _midlSAFEARRAY(VARIANT), '__MIDL__IDebugControl40002' )),
    COMMETHOD([], HRESULT, 'OutputPromptVaList',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in', 'optional'], STRING, 'Format' ),
              ( ['in', 'optional'], STRING, 'Args' )),
    COMMETHOD([], HRESULT, 'GetPromptText',
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'TextSize' )),
    COMMETHOD([], HRESULT, 'OutputCurrentState',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'OutputVersionInformation',
              ( ['in'], c_ulong, 'OutputControl' )),
    COMMETHOD([], HRESULT, 'GetNotifyEventHandle',
              ( ['out'], POINTER(c_ulonglong), 'Handle' )),
    COMMETHOD([], HRESULT, 'SetNotifyEventHandle',
              ( ['in'], c_ulonglong, 'Handle' )),
    COMMETHOD([], HRESULT, 'Assemble',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], STRING, 'Instr' ),
              ( ['out'], POINTER(c_ulonglong), 'EndOffset' )),
    COMMETHOD([], HRESULT, 'Disassemble',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'DisassemblySize' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'EndOffset' )),
    COMMETHOD([], HRESULT, 'GetDisassembleEffectiveOffset',
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'OutputDisassembly',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out'], POINTER(c_ulonglong), 'EndOffset' )),
    COMMETHOD([], HRESULT, 'OutputDisassemblyLines',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], c_ulong, 'PreviousLines' ),
              ( ['in'], c_ulong, 'TotalLines' ),
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'OffsetLine' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'StartOffset' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'EndOffset' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'LineOffsets' )),
    COMMETHOD([], HRESULT, 'GetNearInstruction',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_int, 'Delta' ),
              ( ['out'], POINTER(c_ulonglong), 'NearOffset' )),
    COMMETHOD([], HRESULT, 'GetStackTrace',
              ( ['in'], c_ulonglong, 'FrameOffset' ),
              ( ['in'], c_ulonglong, 'StackOffset' ),
              ( ['in'], c_ulonglong, 'InstructionOffset' ),
              ( ['in', 'out'], POINTER(_DEBUG_STACK_FRAME), 'Frames' ),
              ( ['in'], c_ulong, 'FramesSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'FramesFilled' )),
    COMMETHOD([], HRESULT, 'GetReturnOffset',
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'OutputStackTrace',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in', 'optional'], POINTER(_DEBUG_STACK_FRAME), 'Frames' ),
              ( ['in', 'optional'], c_ulong, 'FramesSize' ),
              ( ['in', 'optional'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'GetDebuggeeType',
              ( ['out'], POINTER(c_ulong), 'Class' ),
              ( ['out'], POINTER(c_ulong), 'Qualifier' )),
    COMMETHOD([], HRESULT, 'GetActualProcessorType',
              ( ['out'], POINTER(c_ulong), 'Type' )),
    COMMETHOD([], HRESULT, 'GetExecutingProcessorType',
              ( ['out'], POINTER(c_ulong), 'Type' )),
    COMMETHOD([], HRESULT, 'GetNumberPossibleExecutingProcessorTypes',
              ( ['out'], POINTER(c_ulong), 'Number' )),
    COMMETHOD([], HRESULT, 'GetPossibleExecutingProcessorTypes',
              ( ['in'], c_ulong, 'Start' ),
              ( ['in'], c_ulong, 'Count' ),
              ( ['out'], POINTER(c_ulong), 'Types' )),
    COMMETHOD([], HRESULT, 'GetNumberProcessors',
              ( ['out'], POINTER(c_ulong), 'Number' )),
    COMMETHOD([], HRESULT, 'GetSystemVersion',
              ( ['out'], POINTER(c_ulong), 'PlatformId' ),
              ( ['out'], POINTER(c_ulong), 'Major' ),
              ( ['out'], POINTER(c_ulong), 'Minor' ),
              ( ['out', 'optional'], STRING, 'ServicePackString' ),
              ( ['in', 'optional'], c_ulong, 'ServicePackStringSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ServicePackStringUsed' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ServicePackNumber' ),
              ( ['out', 'optional'], STRING, 'BuildString' ),
              ( ['in', 'optional'], c_ulong, 'BuildStringSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'BuildStringUsed' )),
    COMMETHOD([], HRESULT, 'GetPageSize',
              ( ['out'], POINTER(c_ulong), 'Size' )),
    COMMETHOD([], HRESULT, 'IsPointer64Bit'),
    COMMETHOD([], HRESULT, 'ReadBugCheckData',
              ( ['out'], POINTER(c_ulong), 'Code' ),
              ( ['out'], POINTER(c_ulonglong), 'Arg1' ),
              ( ['out'], POINTER(c_ulonglong), 'Arg2' ),
              ( ['out'], POINTER(c_ulonglong), 'Arg3' ),
              ( ['out'], POINTER(c_ulonglong), 'Arg4' )),
    COMMETHOD([], HRESULT, 'GetNumberSupportedProcessorTypes',
              ( ['out'], POINTER(c_ulong), 'Number' )),
    COMMETHOD([], HRESULT, 'GetSupportedProcessorTypes',
              ( ['in'], c_ulong, 'Start' ),
              ( ['in'], c_ulong, 'Count' ),
              ( ['out'], POINTER(c_ulong), 'Types' )),
    COMMETHOD([], HRESULT, 'GetProcessorTypeNames',
              ( ['in'], c_ulong, 'Type' ),
              ( ['out', 'optional'], STRING, 'FullNameBuffer' ),
              ( ['in', 'optional'], c_ulong, 'FullNameBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'FullNameSize' ),
              ( ['out', 'optional'], STRING, 'AbbrevNameBuffer' ),
              ( ['in', 'optional'], c_ulong, 'AbbrevNameBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'AbbrevNameSize' )),
    COMMETHOD([], HRESULT, 'GetEffectiveProcessorType',
              ( ['out'], POINTER(c_ulong), 'Type' )),
    COMMETHOD([], HRESULT, 'SetEffectiveProcessorType',
              ( ['in'], c_ulong, 'Type' )),
    COMMETHOD([], HRESULT, 'GetExecutionStatus',
              ( ['out'], POINTER(c_ulong), 'Status' )),
    COMMETHOD([], HRESULT, 'SetExecutionStatus',
              ( ['in'], c_ulong, 'Status' )),
    COMMETHOD([], HRESULT, 'GetCodeLevel',
              ( ['out'], POINTER(c_ulong), 'Level' )),
    COMMETHOD([], HRESULT, 'SetCodeLevel',
              ( ['in'], c_ulong, 'Level' )),
    COMMETHOD([], HRESULT, 'GetEngineOptions',
              ( ['out'], POINTER(c_ulong), 'Options' )),
    COMMETHOD([], HRESULT, 'AddEngineOptions',
              ( ['in'], c_ulong, 'Options' )),
    COMMETHOD([], HRESULT, 'RemoveEngineOptions',
              ( ['in'], c_ulong, 'Options' )),
    COMMETHOD([], HRESULT, 'SetEngineOptions',
              ( ['in'], c_ulong, 'Options' )),
    COMMETHOD([], HRESULT, 'GetSystemErrorControl',
              ( ['out'], POINTER(c_ulong), 'OutputLevel' ),
              ( ['out'], POINTER(c_ulong), 'BreakLevel' )),
    COMMETHOD([], HRESULT, 'SetSystemErrorControl',
              ( ['in'], c_ulong, 'OutputLevel' ),
              ( ['in'], c_ulong, 'BreakLevel' )),
    COMMETHOD([], HRESULT, 'GetTextMacro',
              ( ['in'], c_ulong, 'Slot' ),
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'MacroSize' )),
    COMMETHOD([], HRESULT, 'SetTextMacro',
              ( ['in'], c_ulong, 'Slot' ),
              ( ['in'], STRING, 'Macro' )),
    COMMETHOD([], HRESULT, 'GetRadix',
              ( ['out'], POINTER(c_ulong), 'Radix' )),
    COMMETHOD([], HRESULT, 'SetRadix',
              ( ['in'], c_ulong, 'Radix' )),
    COMMETHOD([], HRESULT, 'Evaluate',
              ( ['in'], STRING, 'Expression' ),
              ( ['in'], c_ulong, 'DesiredType' ),
              ( ['out'], POINTER(_DEBUG_VALUE), 'Value' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'RemainderIndex' )),
    COMMETHOD([], HRESULT, 'CoerceValue',
              ( ['in'], POINTER(_DEBUG_VALUE), 'In' ),
              ( ['in'], c_ulong, 'OutType' ),
              ( ['out'], POINTER(_DEBUG_VALUE), 'Out' )),
    COMMETHOD([], HRESULT, 'CoerceValues',
              ( ['in'], c_ulong, 'Count' ),
              ( ['in'], POINTER(_DEBUG_VALUE), 'In' ),
              ( ['in'], POINTER(c_ulong), 'OutTypes' ),
              ( ['out'], POINTER(_DEBUG_VALUE), 'Out' )),
    COMMETHOD([], HRESULT, 'Execute',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], STRING, 'Command' ),
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'ExecuteCommandFile',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], STRING, 'CommandFile' ),
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'GetNumberBreakpoints',
              ( ['out'], POINTER(c_ulong), 'Number' )),
    COMMETHOD([], HRESULT, 'GetBreakpointByIndex',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out'], POINTER(POINTER(IDebugBreakpoint)), 'Bp' )),
    COMMETHOD([], HRESULT, 'GetBreakpointById',
              ( ['in'], c_ulong, 'Id' ),
              ( ['out'], POINTER(POINTER(IDebugBreakpoint)), 'Bp' )),
    COMMETHOD([], HRESULT, 'GetBreakpointParameters',
              ( ['in'], c_ulong, 'Count' ),
              ( ['in', 'optional'], POINTER(c_ulong), 'Ids' ),
              ( ['in', 'optional'], c_ulong, 'Start' ),
              ( ['out', 'optional'], POINTER(_DEBUG_BREAKPOINT_PARAMETERS), 'Params' )),
    COMMETHOD([], HRESULT, 'AddBreakpoint',
              ( ['in'], c_ulong, 'Type' ),
              ( ['in'], c_ulong, 'DesiredId' ),
              ( ['out'], POINTER(POINTER(IDebugBreakpoint)), 'Bp' )),
    COMMETHOD([], HRESULT, 'RemoveBreakpoint',
              ( ['in'], POINTER(IDebugBreakpoint), 'Bp' )),
    COMMETHOD([], HRESULT, 'AddExtension',
              ( ['in'], STRING, 'Path' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out'], POINTER(c_ulonglong), 'Handle' )),
    COMMETHOD([], HRESULT, 'RemoveExtension',
              ( ['in'], c_ulonglong, 'Handle' )),
    COMMETHOD([], HRESULT, 'GetExtensionByPath',
              ( ['in'], STRING, 'Path' ),
              ( ['out'], POINTER(c_ulonglong), 'Handle' )),
    COMMETHOD([], HRESULT, 'CallExtension',
              ( ['in'], c_ulonglong, 'Handle' ),
              ( ['in'], STRING, 'Function' ),
              ( ['in', 'optional'], STRING, 'Arguments' )),
    COMMETHOD([], HRESULT, 'GetExtensionFunction',
              ( ['in'], c_ulonglong, 'Handle' ),
              ( ['in'], STRING, 'FuncName' ),
              ( ['out'], POINTER(c_void_p), 'Function' )),
    COMMETHOD([], HRESULT, 'GetWindbgExtensionApis32',
              ( ['in', 'out'], POINTER(_WINDBG_EXTENSION_APIS32), 'Api' )),
    COMMETHOD([], HRESULT, 'GetWindbgExtensionApis64',
              ( ['in', 'out'], POINTER(_WINDBG_EXTENSION_APIS64), 'Api' )),
    COMMETHOD([], HRESULT, 'GetNumberEventFilters',
              ( ['out'], POINTER(c_ulong), 'SpecificEvents' ),
              ( ['out'], POINTER(c_ulong), 'SpecificExceptions' ),
              ( ['out'], POINTER(c_ulong), 'ArbitraryExceptions' )),
    COMMETHOD([], HRESULT, 'GetEventFilterText',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'TextSize' )),
    COMMETHOD([], HRESULT, 'GetEventFilterCommand',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'CommandSize' )),
    COMMETHOD([], HRESULT, 'SetEventFilterCommand',
              ( ['in'], c_ulong, 'Index' ),
              ( ['in'], STRING, 'Command' )),
    COMMETHOD([], HRESULT, 'GetSpecificFilterParameters',
              ( ['in'], c_ulong, 'Start' ),
              ( ['in'], c_ulong, 'Count' ),
              ( ['out'], POINTER(_DEBUG_SPECIFIC_FILTER_PARAMETERS), 'Params' )),
    COMMETHOD([], HRESULT, 'SetSpecificFilterParameters',
              ( ['in'], c_ulong, 'Start' ),
              ( ['in'], c_ulong, 'Count' ),
              ( ['in'], POINTER(_DEBUG_SPECIFIC_FILTER_PARAMETERS), 'Params' )),
    COMMETHOD([], HRESULT, 'GetSpecificFilterArgument',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ArgumentSize' )),
    COMMETHOD([], HRESULT, 'SetSpecificFilterArgument',
              ( ['in'], c_ulong, 'Index' ),
              ( ['in'], STRING, 'Argument' )),
    COMMETHOD([], HRESULT, 'GetExceptionFilterParameters',
              ( ['in'], c_ulong, 'Count' ),
              ( ['in', 'optional'], POINTER(c_ulong), 'Codes' ),
              ( ['in', 'optional'], c_ulong, 'Start' ),
              ( ['out', 'optional'], POINTER(_DEBUG_EXCEPTION_FILTER_PARAMETERS), 'Params' )),
    COMMETHOD([], HRESULT, 'SetExceptionFilterParameters',
              ( ['in'], c_ulong, 'Count' ),
              ( ['in'], POINTER(_DEBUG_EXCEPTION_FILTER_PARAMETERS), 'Params' )),
    COMMETHOD([], HRESULT, 'GetExceptionFilterSecondCommand',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'CommandSize' )),
    COMMETHOD([], HRESULT, 'SetExceptionFilterSecondCommand',
              ( ['in'], c_ulong, 'Index' ),
              ( ['in'], STRING, 'Command' )),
    COMMETHOD([], HRESULT, 'WaitForEvent',
              ( ['in'], c_ulong, 'Flags' ),
              ( ['in'], c_ulong, 'Timeout' )),
    COMMETHOD([], HRESULT, 'GetLastEventInformation',
              ( ['out'], POINTER(c_ulong), 'Type' ),
              ( ['out'], POINTER(c_ulong), 'ProcessId' ),
              ( ['out'], POINTER(c_ulong), 'ThreadId' ),
              ( ['out', 'optional'], c_void_p, 'ExtraInformation' ),
              ( ['in', 'optional'], c_ulong, 'ExtraInformationSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ExtraInformationUsed' ),
              ( ['out', 'optional'], STRING, 'Description' ),
              ( ['in', 'optional'], c_ulong, 'DescriptionSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'DescriptionUsed' )),
    COMMETHOD([], HRESULT, 'GetCurrentTimeDate',
              ( ['out'], POINTER(c_ulong), 'TimeDate' )),
    COMMETHOD([], HRESULT, 'GetCurrentSystemUpTime',
              ( ['out'], POINTER(c_ulong), 'UpTime' )),
    COMMETHOD([], HRESULT, 'GetDumpFormatFlags',
              ( ['out'], POINTER(c_ulong), 'FormatFlags' )),
    COMMETHOD([], HRESULT, 'GetNumberTextReplacements',
              ( ['out'], POINTER(c_ulong), 'NumRepl' )),
    COMMETHOD([], HRESULT, 'GetTextReplacement',
              ( ['in', 'optional'], STRING, 'SrcText' ),
              ( ['in', 'optional'], c_ulong, 'Index' ),
              ( ['out', 'optional'], STRING, 'SrcBuffer' ),
              ( ['in', 'optional'], c_ulong, 'SrcBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'SrcSize' ),
              ( ['out', 'optional'], STRING, 'DstBuffer' ),
              ( ['in', 'optional'], c_ulong, 'DstBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'DstSize' )),
    COMMETHOD([], HRESULT, 'SetTextReplacement',
              ( ['in'], STRING, 'SrcText' ),
              ( ['in', 'optional'], STRING, 'DstText' )),
    COMMETHOD([], HRESULT, 'RemoveTextReplacements'),
    COMMETHOD([], HRESULT, 'OutputTextReplacements',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'GetAssemblyOptions',
              ( ['out'], POINTER(c_ulong), 'Options' )),
    COMMETHOD([], HRESULT, 'AddAssemblyOptions',
              ( ['in'], c_ulong, 'Options' )),
    COMMETHOD([], HRESULT, 'RemoveAssemblyOptions',
              ( ['in'], c_ulong, 'Options' )),
    COMMETHOD([], HRESULT, 'SetAssemblyOptions',
              ( ['in'], c_ulong, 'Options' )),
    COMMETHOD([], HRESULT, 'GetExpressionSyntax',
              ( ['out'], POINTER(c_ulong), 'Flags' )),
    COMMETHOD([], HRESULT, 'SetExpressionSyntax',
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'SetExpressionSyntaxByName',
              ( ['in'], STRING, 'AbbrevName' )),
    COMMETHOD([], HRESULT, 'GetNumberExpressionSyntaxes',
              ( ['out'], POINTER(c_ulong), 'Number' )),
    COMMETHOD([], HRESULT, 'GetExpressionSyntaxNames',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out', 'optional'], STRING, 'FullNameBuffer' ),
              ( ['in', 'optional'], c_ulong, 'FullNameBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'FullNameSize' ),
              ( ['out', 'optional'], STRING, 'AbbrevNameBuffer' ),
              ( ['in', 'optional'], c_ulong, 'AbbrevNameBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'AbbrevNameSize' )),
    COMMETHOD([], HRESULT, 'GetNumberEvents',
              ( ['out'], POINTER(c_ulong), 'Events' )),
    COMMETHOD([], HRESULT, 'GetEventIndexDescription',
              ( ['in'], c_ulong, 'Index' ),
              ( ['in'], c_ulong, 'Which' ),
              ( ['in', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'DescSize' )),
    COMMETHOD([], HRESULT, 'GetCurrentEventIndex',
              ( ['out'], POINTER(c_ulong), 'Index' )),
    COMMETHOD([], HRESULT, 'SetNextEventIndex',
              ( ['in'], c_ulong, 'Relation' ),
              ( ['in'], c_ulong, 'Value' ),
              ( ['out'], POINTER(c_ulong), 'NextIndex' )),
    COMMETHOD([], HRESULT, 'GetLogFileWide',
              ( ['out', 'optional'], POINTER(c_ushort), 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'FileSize' ),
              ( ['out', 'optional'], POINTER(c_int), 'Append' )),
    COMMETHOD([], HRESULT, 'OpenLogFileWide',
              ( ['in'], POINTER(c_ushort), 'File' ),
              ( ['in'], c_int, 'Append' )),
    COMMETHOD([], HRESULT, 'InputWide',
              ( ['out'], POINTER(c_ushort), 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'InputSize' )),
    COMMETHOD([], HRESULT, 'ReturnInputWide',
              ( ['in'], POINTER(c_ushort), 'Buffer' )),
    COMMETHOD([], HRESULT, 'OutputWide',
              ( ['in'], c_ulong, 'Mask' ),
              ( ['in'], POINTER(c_ushort), 'Format' ),
              ( [], _midlSAFEARRAY(VARIANT), '__MIDL__IDebugControl40003' )),
    COMMETHOD([], HRESULT, 'OutputVaListWide',
              ( ['in'], c_ulong, 'Mask' ),
              ( ['in'], POINTER(c_ushort), 'Format' ),
              ( ['in'], STRING, 'Args' )),
    COMMETHOD([], HRESULT, 'ControlledOutputWide',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], c_ulong, 'Mask' ),
              ( ['in'], POINTER(c_ushort), 'Format' ),
              ( [], _midlSAFEARRAY(VARIANT), '__MIDL__IDebugControl40004' )),
    COMMETHOD([], HRESULT, 'ControlledOutputVaListWide',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], c_ulong, 'Mask' ),
              ( ['in'], POINTER(c_ushort), 'Format' ),
              ( ['in'], STRING, 'Args' )),
    COMMETHOD([], HRESULT, 'OutputPromptWide',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in', 'optional'], POINTER(c_ushort), 'Format' ),
              ( ['optional'], _midlSAFEARRAY(VARIANT), '__MIDL__IDebugControl40005' )),
    COMMETHOD([], HRESULT, 'OutputPromptVaListWide',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in', 'optional'], POINTER(c_ushort), 'Format' ),
              ( ['in', 'optional'], STRING, 'Args' )),
    COMMETHOD([], HRESULT, 'GetPromptTextWide',
              ( ['out', 'optional'], POINTER(c_ushort), 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'TextSize' )),
    COMMETHOD([], HRESULT, 'AssembleWide',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], POINTER(c_ushort), 'Instr' ),
              ( ['out'], POINTER(c_ulonglong), 'EndOffset' )),
    COMMETHOD([], HRESULT, 'DisassembleWide',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out', 'optional'], POINTER(c_ushort), 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'DisassemblySize' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'EndOffset' )),
    COMMETHOD([], HRESULT, 'GetProcessorTypeNamesWide',
              ( ['in'], c_ulong, 'Type' ),
              ( ['out', 'optional'], POINTER(c_ushort), 'FullNameBuffer' ),
              ( ['in', 'optional'], c_ulong, 'FullNameBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'FullNameSize' ),
              ( ['out', 'optional'], POINTER(c_ushort), 'AbbrevNameBuffer' ),
              ( ['in', 'optional'], c_ulong, 'AbbrevNameBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'AbbrevNameSize' )),
    COMMETHOD([], HRESULT, 'GetTextMacroWide',
              ( ['in'], c_ulong, 'Slot' ),
              ( ['out', 'optional'], POINTER(c_ushort), 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'MacroSize' )),
    COMMETHOD([], HRESULT, 'SetTextMacroWide',
              ( ['in'], c_ulong, 'Slot' ),
              ( ['in'], POINTER(c_ushort), 'Macro' )),
    COMMETHOD([], HRESULT, 'EvaluateWide',
              ( ['in'], POINTER(c_ushort), 'Expression' ),
              ( ['in'], c_ulong, 'DesiredType' ),
              ( ['out'], POINTER(_DEBUG_VALUE), 'Value' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'RemainderIndex' )),
    COMMETHOD([], HRESULT, 'ExecuteWide',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], POINTER(c_ushort), 'Command' ),
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'ExecuteCommandFileWide',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], POINTER(c_ushort), 'CommandFile' ),
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'GetBreakpointByIndex2',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out'], POINTER(POINTER(IDebugBreakpoint2)), 'Bp' )),
    COMMETHOD([], HRESULT, 'GetBreakpointById2',
              ( ['in'], c_ulong, 'Id' ),
              ( ['out'], POINTER(POINTER(IDebugBreakpoint2)), 'Bp' )),
    COMMETHOD([], HRESULT, 'AddBreakpoint2',
              ( ['in'], c_ulong, 'Type' ),
              ( ['in'], c_ulong, 'DesiredId' ),
              ( ['out'], POINTER(POINTER(IDebugBreakpoint2)), 'Bp' )),
    COMMETHOD([], HRESULT, 'RemoveBreakpoint2',
              ( ['in'], POINTER(IDebugBreakpoint2), 'Bp' )),
    COMMETHOD([], HRESULT, 'AddExtensionWide',
              ( ['in'], POINTER(c_ushort), 'Path' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out'], POINTER(c_ulonglong), 'Handle' )),
    COMMETHOD([], HRESULT, 'GetExtensionByPathWide',
              ( ['in'], POINTER(c_ushort), 'Path' ),
              ( ['out'], POINTER(c_ulonglong), 'Handle' )),
    COMMETHOD([], HRESULT, 'CallExtensionWide',
              ( ['in'], c_ulonglong, 'Handle' ),
              ( ['in'], POINTER(c_ushort), 'Function' ),
              ( ['in', 'optional'], POINTER(c_ushort), 'Arguments' )),
    COMMETHOD([], HRESULT, 'GetExtensionFunctionWide',
              ( ['in'], c_ulonglong, 'Handle' ),
              ( ['in'], POINTER(c_ushort), 'FuncName' ),
              ( ['out'], POINTER(c_void_p), 'Function' )),
    COMMETHOD([], HRESULT, 'GetEventFilterTextWide',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out', 'optional'], POINTER(c_ushort), 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'TextSize' )),
    COMMETHOD([], HRESULT, 'GetEventFilterCommandWide',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out', 'optional'], POINTER(c_ushort), 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'CommandSize' )),
    COMMETHOD([], HRESULT, 'SetEventFilterCommandWide',
              ( ['in'], c_ulong, 'Index' ),
              ( ['in'], POINTER(c_ushort), 'Command' )),
    COMMETHOD([], HRESULT, 'GetSpecificFilterArgumentWide',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out', 'optional'], POINTER(c_ushort), 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ArgumentSize' )),
    COMMETHOD([], HRESULT, 'SetSpecificFilterArgumentWide',
              ( ['in'], c_ulong, 'Index' ),
              ( ['in'], POINTER(c_ushort), 'Argument' )),
    COMMETHOD([], HRESULT, 'GetExceptionFilterSecondCommandWide',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out', 'optional'], POINTER(c_ushort), 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'CommandSize' )),
    COMMETHOD([], HRESULT, 'SetExceptionFilterSecondCommandWide',
              ( ['in'], c_ulong, 'Index' ),
              ( ['in'], POINTER(c_ushort), 'Command' )),
    COMMETHOD([], HRESULT, 'GetLastEventInformationWide',
              ( ['out'], POINTER(c_ulong), 'Type' ),
              ( ['out'], POINTER(c_ulong), 'ProcessId' ),
              ( ['out'], POINTER(c_ulong), 'ThreadId' ),
              ( ['out', 'optional'], c_void_p, 'ExtraInformation' ),
              ( ['in', 'optional'], c_ulong, 'ExtraInformationSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ExtraInformationUsed' ),
              ( ['out', 'optional'], POINTER(c_ushort), 'Description' ),
              ( ['in', 'optional'], c_ulong, 'DescriptionSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'DescriptionUsed' )),
    COMMETHOD([], HRESULT, 'GetTextReplacementWide',
              ( ['in', 'optional'], POINTER(c_ushort), 'SrcText' ),
              ( ['in', 'optional'], c_ulong, 'Index' ),
              ( ['out', 'optional'], POINTER(c_ushort), 'SrcBuffer' ),
              ( ['in', 'optional'], c_ulong, 'SrcBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'SrcSize' ),
              ( ['out', 'optional'], POINTER(c_ushort), 'DstBuffer' ),
              ( ['in', 'optional'], c_ulong, 'DstBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'DstSize' )),
    COMMETHOD([], HRESULT, 'SetTextReplacementWide',
              ( ['in'], POINTER(c_ushort), 'SrcText' ),
              ( ['in', 'optional'], POINTER(c_ushort), 'DstText' )),
    COMMETHOD([], HRESULT, 'SetExpressionSyntaxByNameWide',
              ( ['in'], POINTER(c_ushort), 'AbbrevName' )),
    COMMETHOD([], HRESULT, 'GetExpressionSyntaxNamesWide',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out', 'optional'], POINTER(c_ushort), 'FullNameBuffer' ),
              ( ['in', 'optional'], c_ulong, 'FullNameBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'FullNameSize' ),
              ( ['out', 'optional'], POINTER(c_ushort), 'AbbrevNameBuffer' ),
              ( ['in', 'optional'], c_ulong, 'AbbrevNameBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'AbbrevNameSize' )),
    COMMETHOD([], HRESULT, 'GetEventIndexDescriptionWide',
              ( ['in'], c_ulong, 'Index' ),
              ( ['in'], c_ulong, 'Which' ),
              ( ['in', 'optional'], POINTER(c_ushort), 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'DescSize' )),
    COMMETHOD([], HRESULT, 'GetLogFile2',
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'FileSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'Flags' )),
    COMMETHOD([], HRESULT, 'OpenLogFile2',
              ( ['in'], STRING, 'File' ),
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'GetLogFile2Wide',
              ( ['out', 'optional'], POINTER(c_ushort), 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'FileSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'Flags' )),
    COMMETHOD([], HRESULT, 'OpenLogFile2Wide',
              ( ['in'], POINTER(c_ushort), 'File' ),
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'GetSystemVersionValues',
              ( ['out'], POINTER(c_ulong), 'PlatformId' ),
              ( ['out'], POINTER(c_ulong), 'Win32Major' ),
              ( ['out'], POINTER(c_ulong), 'Win32Minor' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'KdMajor' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'KdMinor' )),
    COMMETHOD([], HRESULT, 'GetSystemVersionString',
              ( ['in'], c_ulong, 'Which' ),
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'StringSize' )),
    COMMETHOD([], HRESULT, 'GetSystemVersionStringWide',
              ( ['in'], c_ulong, 'Which' ),
              ( ['out', 'optional'], POINTER(c_ushort), 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'StringSize' )),
    COMMETHOD([], HRESULT, 'GetContextStackTrace',
              ( ['in', 'optional'], c_void_p, 'StartContext' ),
              ( ['in', 'optional'], c_ulong, 'StartContextSize' ),
              ( ['in', 'out', 'optional'], POINTER(_DEBUG_STACK_FRAME), 'Frames' ),
              ( ['in', 'optional'], c_ulong, 'FramesSize' ),
              ( ['out', 'optional'], c_void_p, 'FrameContexts' ),
              ( ['in', 'optional'], c_ulong, 'FrameContextsSize' ),
              ( ['in', 'optional'], c_ulong, 'FrameContextsEntrySize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'FramesFilled' )),
    COMMETHOD([], HRESULT, 'OutputContextStackTrace',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], POINTER(_DEBUG_STACK_FRAME), 'Frames' ),
              ( ['in'], c_ulong, 'FramesSize' ),
              ( ['in'], c_void_p, 'FrameContexts' ),
              ( ['in'], c_ulong, 'FrameContextsSize' ),
              ( ['in'], c_ulong, 'FrameContextsEntrySize' ),
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'GetStoredEventInformation',
              ( ['out'], POINTER(c_ulong), 'Type' ),
              ( ['out'], POINTER(c_ulong), 'ProcessId' ),
              ( ['out'], POINTER(c_ulong), 'ThreadId' ),
              ( ['out', 'optional'], c_void_p, 'Context' ),
              ( ['in', 'optional'], c_ulong, 'ContextSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ContextUsed' ),
              ( ['out', 'optional'], c_void_p, 'ExtraInformation' ),
              ( ['in', 'optional'], c_ulong, 'ExtraInformationSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ExtraInformationUsed' )),
    COMMETHOD([], HRESULT, 'GetManagedStatus',
              ( ['out', 'optional'], POINTER(c_ulong), 'Flags' ),
              ( ['in', 'optional'], c_ulong, 'WhichString' ),
              ( ['out', 'optional'], STRING, 'String' ),
              ( ['in', 'optional'], c_ulong, 'StringSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'StringNeeded' )),
    COMMETHOD([], HRESULT, 'GetManagedStatusWide',
              ( ['out', 'optional'], POINTER(c_ulong), 'Flags' ),
              ( ['in', 'optional'], c_ulong, 'WhichString' ),
              ( ['out', 'optional'], POINTER(c_ushort), 'String' ),
              ( ['in', 'optional'], c_ulong, 'StringSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'StringNeeded' )),
    COMMETHOD([], HRESULT, 'ResetManagedStatus',
              ( ['in'], c_ulong, 'Flags' )),
]
################################################################
## code template for IDebugControl4 implementation
##class IDebugControl4_Impl(object):
##    def AddBreakpoint(self, Type, DesiredId):
##        '-no docstring-'
##        #return Bp
##
##    def GetInterrupt(self):
##        '-no docstring-'
##        #return 
##
##    def OpenLogFileWide(self, File, Append):
##        '-no docstring-'
##        #return 
##
##    def CoerceValues(self, Count, In, OutTypes):
##        '-no docstring-'
##        #return Out
##
##    def ExecuteCommandFileWide(self, OutputControl, CommandFile, Flags):
##        '-no docstring-'
##        #return 
##
##    def RemoveExtension(self, Handle):
##        '-no docstring-'
##        #return 
##
##    def GetExecutingProcessorType(self):
##        '-no docstring-'
##        #return Type
##
##    def GetTextReplacementWide(self, SrcText, Index, SrcBufferSize, DstBufferSize):
##        '-no docstring-'
##        #return SrcBuffer, SrcSize, DstBuffer, DstSize
##
##    def AddBreakpoint2(self, Type, DesiredId):
##        '-no docstring-'
##        #return Bp
##
##    def GetCurrentTimeDate(self):
##        '-no docstring-'
##        #return TimeDate
##
##    def AddEngineOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def GetNumberExpressionSyntaxes(self):
##        '-no docstring-'
##        #return Number
##
##    def GetDebuggeeType(self):
##        '-no docstring-'
##        #return Class, Qualifier
##
##    def Execute(self, OutputControl, Command, Flags):
##        '-no docstring-'
##        #return 
##
##    def CoerceValue(self, In, OutType):
##        '-no docstring-'
##        #return Out
##
##    def GetTextMacro(self, Slot, BufferSize):
##        '-no docstring-'
##        #return Buffer, MacroSize
##
##    def GetEventFilterTextWide(self, Index, BufferSize):
##        '-no docstring-'
##        #return Buffer, TextSize
##
##    def ControlledOutput(self, OutputControl, Mask, Format, __MIDL__IDebugControl40001):
##        '-no docstring-'
##        #return 
##
##    def GetStoredEventInformation(self, ContextSize, ExtraInformationSize):
##        '-no docstring-'
##        #return Type, ProcessId, ThreadId, Context, ContextUsed, ExtraInformation, ExtraInformationUsed
##
##    def OutputVaListWide(self, Mask, Format, Args):
##        '-no docstring-'
##        #return 
##
##    def ResetManagedStatus(self, Flags):
##        '-no docstring-'
##        #return 
##
##    def WaitForEvent(self, Flags, Timeout):
##        '-no docstring-'
##        #return 
##
##    def GetRadix(self):
##        '-no docstring-'
##        #return Radix
##
##    def GetBreakpointByIndex2(self, Index):
##        '-no docstring-'
##        #return Bp
##
##    def DisassembleWide(self, Offset, Flags, BufferSize):
##        '-no docstring-'
##        #return Buffer, DisassemblySize, EndOffset
##
##    def GetSpecificFilterParameters(self, Start, Count):
##        '-no docstring-'
##        #return Params
##
##    def RemoveEngineOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def ExecuteWide(self, OutputControl, Command, Flags):
##        '-no docstring-'
##        #return 
##
##    def SetExceptionFilterParameters(self, Count, Params):
##        '-no docstring-'
##        #return 
##
##    def SetExceptionFilterSecondCommand(self, Index, Command):
##        '-no docstring-'
##        #return 
##
##    def GetExpressionSyntaxNamesWide(self, Index, FullNameBufferSize, AbbrevNameBufferSize):
##        '-no docstring-'
##        #return FullNameBuffer, FullNameSize, AbbrevNameBuffer, AbbrevNameSize
##
##    def GetDisassembleEffectiveOffset(self):
##        '-no docstring-'
##        #return Offset
##
##    def GetNearInstruction(self, Offset, Delta):
##        '-no docstring-'
##        #return NearOffset
##
##    def GetInterruptTimeout(self):
##        '-no docstring-'
##        #return Seconds
##
##    def GetSystemVersion(self, ServicePackStringSize, BuildStringSize):
##        '-no docstring-'
##        #return PlatformId, Major, Minor, ServicePackString, ServicePackStringUsed, ServicePackNumber, BuildString, BuildStringUsed
##
##    def GetExtensionByPathWide(self, Path):
##        '-no docstring-'
##        #return Handle
##
##    def SetTextMacro(self, Slot, Macro):
##        '-no docstring-'
##        #return 
##
##    def GetWindbgExtensionApis64(self):
##        '-no docstring-'
##        #return Api
##
##    def GetLogFile(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, FileSize, Append
##
##    def GetSpecificFilterArgumentWide(self, Index, BufferSize):
##        '-no docstring-'
##        #return Buffer, ArgumentSize
##
##    def OutputContextStackTrace(self, OutputControl, Frames, FramesSize, FrameContexts, FrameContextsSize, FrameContextsEntrySize, Flags):
##        '-no docstring-'
##        #return 
##
##    def GetNumberEvents(self):
##        '-no docstring-'
##        #return Events
##
##    def RemoveBreakpoint2(self, Bp):
##        '-no docstring-'
##        #return 
##
##    def GetTextReplacement(self, SrcText, Index, SrcBufferSize, DstBufferSize):
##        '-no docstring-'
##        #return SrcBuffer, SrcSize, DstBuffer, DstSize
##
##    def OpenLogFile(self, File, Append):
##        '-no docstring-'
##        #return 
##
##    def OutputDisassembly(self, OutputControl, Offset, Flags):
##        '-no docstring-'
##        #return EndOffset
##
##    def RemoveAssemblyOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def ControlledOutputVaListWide(self, OutputControl, Mask, Format, Args):
##        '-no docstring-'
##        #return 
##
##    def GetNumberSupportedProcessorTypes(self):
##        '-no docstring-'
##        #return Number
##
##    def OutputVersionInformation(self, OutputControl):
##        '-no docstring-'
##        #return 
##
##    def GetActualProcessorType(self):
##        '-no docstring-'
##        #return Type
##
##    def GetBreakpointParameters(self, Count, Ids, Start):
##        '-no docstring-'
##        #return Params
##
##    def Evaluate(self, Expression, DesiredType):
##        '-no docstring-'
##        #return Value, RemainderIndex
##
##    def OpenLogFile2(self, File, Flags):
##        '-no docstring-'
##        #return 
##
##    def GetCurrentEventIndex(self):
##        '-no docstring-'
##        #return Index
##
##    def SetNextEventIndex(self, Relation, Value):
##        '-no docstring-'
##        #return NextIndex
##
##    def GetNumberProcessors(self):
##        '-no docstring-'
##        #return Number
##
##    def AddExtension(self, Path, Flags):
##        '-no docstring-'
##        #return Handle
##
##    def GetSystemVersionString(self, Which, BufferSize):
##        '-no docstring-'
##        #return Buffer, StringSize
##
##    def GetEventIndexDescription(self, Index, Which, Buffer, BufferSize):
##        '-no docstring-'
##        #return DescSize
##
##    def SetCodeLevel(self, Level):
##        '-no docstring-'
##        #return 
##
##    def SetLogMask(self, Mask):
##        '-no docstring-'
##        #return 
##
##    def SetTextReplacementWide(self, SrcText, DstText):
##        '-no docstring-'
##        #return 
##
##    def CloseLogFile(self):
##        '-no docstring-'
##        #return 
##
##    def SetInterrupt(self, Flags):
##        '-no docstring-'
##        #return 
##
##    def SetNotifyEventHandle(self, Handle):
##        '-no docstring-'
##        #return 
##
##    def GetSystemVersionStringWide(self, Which, BufferSize):
##        '-no docstring-'
##        #return Buffer, StringSize
##
##    def SetSpecificFilterArgument(self, Index, Argument):
##        '-no docstring-'
##        #return 
##
##    def GetNotifyEventHandle(self):
##        '-no docstring-'
##        #return Handle
##
##    def ReadBugCheckData(self):
##        '-no docstring-'
##        #return Code, Arg1, Arg2, Arg3, Arg4
##
##    def SetEffectiveProcessorType(self, Type):
##        '-no docstring-'
##        #return 
##
##    def GetCodeLevel(self):
##        '-no docstring-'
##        #return Level
##
##    def GetCurrentSystemUpTime(self):
##        '-no docstring-'
##        #return UpTime
##
##    def OpenLogFile2Wide(self, File, Flags):
##        '-no docstring-'
##        #return 
##
##    def GetExceptionFilterParameters(self, Count, Codes, Start):
##        '-no docstring-'
##        #return Params
##
##    def ControlledOutputWide(self, OutputControl, Mask, Format, __MIDL__IDebugControl40004):
##        '-no docstring-'
##        #return 
##
##    def OutputStackTrace(self, OutputControl, Frames, FramesSize, Flags):
##        '-no docstring-'
##        #return 
##
##    def SetRadix(self, Radix):
##        '-no docstring-'
##        #return 
##
##    def GetNumberTextReplacements(self):
##        '-no docstring-'
##        #return NumRepl
##
##    def GetExpressionSyntaxNames(self, Index, FullNameBufferSize, AbbrevNameBufferSize):
##        '-no docstring-'
##        #return FullNameBuffer, FullNameSize, AbbrevNameBuffer, AbbrevNameSize
##
##    def Input(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, InputSize
##
##    def GetExpressionSyntax(self):
##        '-no docstring-'
##        #return Flags
##
##    def GetManagedStatusWide(self, WhichString, StringSize):
##        '-no docstring-'
##        #return Flags, String, StringNeeded
##
##    def SetExecutionStatus(self, Status):
##        '-no docstring-'
##        #return 
##
##    def ControlledOutputVaList(self, OutputControl, Mask, Format, Args):
##        '-no docstring-'
##        #return 
##
##    def GetBreakpointById(self, Id):
##        '-no docstring-'
##        #return Bp
##
##    def GetEventFilterCommandWide(self, Index, BufferSize):
##        '-no docstring-'
##        #return Buffer, CommandSize
##
##    def RemoveBreakpoint(self, Bp):
##        '-no docstring-'
##        #return 
##
##    def GetWindbgExtensionApis32(self):
##        '-no docstring-'
##        #return Api
##
##    def Assemble(self, Offset, Instr):
##        '-no docstring-'
##        #return EndOffset
##
##    def OutputVaList(self, Mask, Format, Args):
##        '-no docstring-'
##        #return 
##
##    def ReturnInput(self, Buffer):
##        '-no docstring-'
##        #return 
##
##    def GetSystemVersionValues(self):
##        '-no docstring-'
##        #return PlatformId, Win32Major, Win32Minor, KdMajor, KdMinor
##
##    def ExecuteCommandFile(self, OutputControl, CommandFile, Flags):
##        '-no docstring-'
##        #return 
##
##    def OutputPrompt(self, OutputControl, Format, __MIDL__IDebugControl40002):
##        '-no docstring-'
##        #return 
##
##    def SetExceptionFilterSecondCommandWide(self, Index, Command):
##        '-no docstring-'
##        #return 
##
##    def OutputCurrentState(self, OutputControl, Flags):
##        '-no docstring-'
##        #return 
##
##    def ReturnInputWide(self, Buffer):
##        '-no docstring-'
##        #return 
##
##    def GetEngineOptions(self):
##        '-no docstring-'
##        #return Options
##
##    def CallExtension(self, Handle, Function, Arguments):
##        '-no docstring-'
##        #return 
##
##    def GetEventFilterText(self, Index, BufferSize):
##        '-no docstring-'
##        #return Buffer, TextSize
##
##    def SetEventFilterCommand(self, Index, Command):
##        '-no docstring-'
##        #return 
##
##    def AssembleWide(self, Offset, Instr):
##        '-no docstring-'
##        #return EndOffset
##
##    def GetExceptionFilterSecondCommandWide(self, Index, BufferSize):
##        '-no docstring-'
##        #return Buffer, CommandSize
##
##    def GetLogFile2Wide(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, FileSize, Flags
##
##    def GetNumberPossibleExecutingProcessorTypes(self):
##        '-no docstring-'
##        #return Number
##
##    def GetAssemblyOptions(self):
##        '-no docstring-'
##        #return Options
##
##    def SetSpecificFilterParameters(self, Start, Count, Params):
##        '-no docstring-'
##        #return 
##
##    def GetNumberEventFilters(self):
##        '-no docstring-'
##        #return SpecificEvents, SpecificExceptions, ArbitraryExceptions
##
##    def OutputDisassemblyLines(self, OutputControl, PreviousLines, TotalLines, Offset, Flags):
##        '-no docstring-'
##        #return OffsetLine, StartOffset, EndOffset, LineOffsets
##
##    def SetTextReplacement(self, SrcText, DstText):
##        '-no docstring-'
##        #return 
##
##    def GetLogFileWide(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, FileSize, Append
##
##    def SetExpressionSyntaxByNameWide(self, AbbrevName):
##        '-no docstring-'
##        #return 
##
##    def CallExtensionWide(self, Handle, Function, Arguments):
##        '-no docstring-'
##        #return 
##
##    def GetReturnOffset(self):
##        '-no docstring-'
##        #return Offset
##
##    def SetTextMacroWide(self, Slot, Macro):
##        '-no docstring-'
##        #return 
##
##    def GetLastEventInformation(self, ExtraInformationSize, DescriptionSize):
##        '-no docstring-'
##        #return Type, ProcessId, ThreadId, ExtraInformation, ExtraInformationUsed, Description, DescriptionUsed
##
##    def GetBreakpointById2(self, Id):
##        '-no docstring-'
##        #return Bp
##
##    def SetInterruptTimeout(self, Seconds):
##        '-no docstring-'
##        #return 
##
##    def GetStackTrace(self, FrameOffset, StackOffset, InstructionOffset, FramesSize):
##        '-no docstring-'
##        #return Frames, FramesFilled
##
##    def GetSystemErrorControl(self):
##        '-no docstring-'
##        #return OutputLevel, BreakLevel
##
##    def GetSpecificFilterArgument(self, Index, BufferSize):
##        '-no docstring-'
##        #return Buffer, ArgumentSize
##
##    def GetExceptionFilterSecondCommand(self, Index, BufferSize):
##        '-no docstring-'
##        #return Buffer, CommandSize
##
##    def GetExtensionFunctionWide(self, Handle, FuncName):
##        '-no docstring-'
##        #return Function
##
##    def EvaluateWide(self, Expression, DesiredType):
##        '-no docstring-'
##        #return Value, RemainderIndex
##
##    def GetPageSize(self):
##        '-no docstring-'
##        #return Size
##
##    def GetContextStackTrace(self, StartContext, StartContextSize, FramesSize, FrameContextsSize, FrameContextsEntrySize):
##        '-no docstring-'
##        #return Frames, FrameContexts, FramesFilled
##
##    def GetLastEventInformationWide(self, ExtraInformationSize, DescriptionSize):
##        '-no docstring-'
##        #return Type, ProcessId, ThreadId, ExtraInformation, ExtraInformationUsed, Description, DescriptionUsed
##
##    def Disassemble(self, Offset, Flags, BufferSize):
##        '-no docstring-'
##        #return Buffer, DisassemblySize, EndOffset
##
##    def GetProcessorTypeNamesWide(self, Type, FullNameBufferSize, AbbrevNameBufferSize):
##        '-no docstring-'
##        #return FullNameBuffer, FullNameSize, AbbrevNameBuffer, AbbrevNameSize
##
##    def SetExpressionSyntax(self, Flags):
##        '-no docstring-'
##        #return 
##
##    def OutputPromptVaListWide(self, OutputControl, Format, Args):
##        '-no docstring-'
##        #return 
##
##    def GetExecutionStatus(self):
##        '-no docstring-'
##        #return Status
##
##    def GetExtensionByPath(self, Path):
##        '-no docstring-'
##        #return Handle
##
##    def OutputPromptVaList(self, OutputControl, Format, Args):
##        '-no docstring-'
##        #return 
##
##    def GetNumberBreakpoints(self):
##        '-no docstring-'
##        #return Number
##
##    def GetBreakpointByIndex(self, Index):
##        '-no docstring-'
##        #return Bp
##
##    def RemoveTextReplacements(self):
##        '-no docstring-'
##        #return 
##
##    def SetExpressionSyntaxByName(self, AbbrevName):
##        '-no docstring-'
##        #return 
##
##    def GetEventFilterCommand(self, Index, BufferSize):
##        '-no docstring-'
##        #return Buffer, CommandSize
##
##    def SetEngineOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def GetTextMacroWide(self, Slot, BufferSize):
##        '-no docstring-'
##        #return Buffer, MacroSize
##
##    def AddAssemblyOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def SetAssemblyOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def GetDumpFormatFlags(self):
##        '-no docstring-'
##        #return FormatFlags
##
##    def GetExtensionFunction(self, Handle, FuncName):
##        '-no docstring-'
##        #return Function
##
##    def SetEventFilterCommandWide(self, Index, Command):
##        '-no docstring-'
##        #return 
##
##    def GetLogFile2(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, FileSize, Flags
##
##    def GetPossibleExecutingProcessorTypes(self, Start, Count):
##        '-no docstring-'
##        #return Types
##
##    def GetPromptTextWide(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, TextSize
##
##    def GetSupportedProcessorTypes(self, Start, Count):
##        '-no docstring-'
##        #return Types
##
##    def GetLogMask(self):
##        '-no docstring-'
##        #return Mask
##
##    def GetEventIndexDescriptionWide(self, Index, Which, Buffer, BufferSize):
##        '-no docstring-'
##        #return DescSize
##
##    def GetManagedStatus(self, WhichString, StringSize):
##        '-no docstring-'
##        #return Flags, String, StringNeeded
##
##    def GetPromptText(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, TextSize
##
##    def GetEffectiveProcessorType(self):
##        '-no docstring-'
##        #return Type
##
##    def Output(self, Mask, Format, __MIDL__IDebugControl40000):
##        '-no docstring-'
##        #return 
##
##    def IsPointer64Bit(self):
##        '-no docstring-'
##        #return 
##
##    def InputWide(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, InputSize
##
##    def OutputPromptWide(self, OutputControl, Format, __MIDL__IDebugControl40005):
##        '-no docstring-'
##        #return 
##
##    def OutputTextReplacements(self, OutputControl, Flags):
##        '-no docstring-'
##        #return 
##
##    def OutputWide(self, Mask, Format, __MIDL__IDebugControl40003):
##        '-no docstring-'
##        #return 
##
##    def SetSpecificFilterArgumentWide(self, Index, Argument):
##        '-no docstring-'
##        #return 
##
##    def AddExtensionWide(self, Path, Flags):
##        '-no docstring-'
##        #return Handle
##
##    def SetSystemErrorControl(self, OutputLevel, BreakLevel):
##        '-no docstring-'
##        #return 
##
##    def GetProcessorTypeNames(self, Type, FullNameBufferSize, AbbrevNameBufferSize):
##        '-no docstring-'
##        #return FullNameBuffer, FullNameSize, AbbrevNameBuffer, AbbrevNameSize
##


# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0091_0022'
DEBUG_OUTTYPE_VERBOSE = 4
__MIDL___MIDL_itf_DbgEng_0001_0091_0022 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0028'
DEBUG_INTERRUPT_ACTIVE = 0
__MIDL___MIDL_itf_DbgEng_0001_0073_0028 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0091_0023'
DEBUG_OUTTYPE_COMPACT_OUTPUT = 8
__MIDL___MIDL_itf_DbgEng_0001_0091_0023 = c_int # enum
class IDebugDataSpaces2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'IDebugDataSpaces2'
    _iid_ = GUID('{7A5E852F-96E9-468F-AC1B-0B3ADDC4A049}')
    _idlflags_ = []
IDebugDataSpaces2._methods_ = [
    COMMETHOD([], HRESULT, 'ReadVirtual',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in', 'out'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['in', 'out', 'optional'], POINTER(c_ulong), 'BytesRead' )),
    COMMETHOD([], HRESULT, 'WriteVirtual',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'BytesWritten' )),
    COMMETHOD([], HRESULT, 'SearchVirtual',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulonglong, 'Length' ),
              ( ['in'], c_void_p, 'Pattern' ),
              ( ['in'], c_ulong, 'PatternSize' ),
              ( ['in'], c_ulong, 'PatternGranularity' ),
              ( ['out'], POINTER(c_ulonglong), 'MatchOffset' )),
    COMMETHOD([], HRESULT, 'ReadVirtualUncached',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in', 'out'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['in', 'out', 'optional'], POINTER(c_ulong), 'BytesRead' )),
    COMMETHOD([], HRESULT, 'WriteVirtualUncached',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'BytesWritten' )),
    COMMETHOD([], HRESULT, 'ReadPointersVirtual',
              ( ['in'], c_ulong, 'Count' ),
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['out'], POINTER(c_ulonglong), 'Ptrs' )),
    COMMETHOD([], HRESULT, 'WritePointersVirtual',
              ( ['in'], c_ulong, 'Count' ),
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], POINTER(c_ulonglong), 'Ptrs' )),
    COMMETHOD([], HRESULT, 'ReadPhysical',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in', 'out'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['in', 'out', 'optional'], POINTER(c_ulong), 'BytesRead' )),
    COMMETHOD([], HRESULT, 'WritePhysical',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'BytesWritten' )),
    COMMETHOD([], HRESULT, 'ReadControl',
              ( ['in'], c_ulong, 'Processor' ),
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in', 'out'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['in', 'out', 'optional'], POINTER(c_ulong), 'BytesRead' )),
    COMMETHOD([], HRESULT, 'WriteControl',
              ( ['in'], c_ulong, 'Processor' ),
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'BytesWritten' )),
    COMMETHOD([], HRESULT, 'ReadIo',
              ( ['in'], c_ulong, 'InterfaceType' ),
              ( ['in'], c_ulong, 'BusNumber' ),
              ( ['in'], c_ulong, 'AddressSpace' ),
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in', 'out'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['in', 'out', 'optional'], POINTER(c_ulong), 'BytesRead' )),
    COMMETHOD([], HRESULT, 'WriteIo',
              ( ['in'], c_ulong, 'InterfaceType' ),
              ( ['in'], c_ulong, 'BusNumber' ),
              ( ['in'], c_ulong, 'AddressSpace' ),
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'BytesWritten' )),
    COMMETHOD([], HRESULT, 'ReadMsr',
              ( ['in'], c_ulong, 'Msr' ),
              ( ['out'], POINTER(c_ulonglong), 'Value' )),
    COMMETHOD([], HRESULT, 'WriteMsr',
              ( ['in'], c_ulong, 'Msr' ),
              ( ['in'], c_ulonglong, 'Value' )),
    COMMETHOD([], HRESULT, 'ReadBusData',
              ( ['in'], c_ulong, 'BusDataType' ),
              ( ['in'], c_ulong, 'BusNumber' ),
              ( ['in'], c_ulong, 'SlotNumber' ),
              ( ['in'], c_ulong, 'Offset' ),
              ( ['in', 'out'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['in', 'out', 'optional'], POINTER(c_ulong), 'BytesRead' )),
    COMMETHOD([], HRESULT, 'WriteBusData',
              ( ['in'], c_ulong, 'BusDataType' ),
              ( ['in'], c_ulong, 'BusNumber' ),
              ( ['in'], c_ulong, 'SlotNumber' ),
              ( ['in'], c_ulong, 'Offset' ),
              ( ['in'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'BytesWritten' )),
    COMMETHOD([], HRESULT, 'CheckLowMemory'),
    COMMETHOD([], HRESULT, 'ReadDebuggerData',
              ( ['in'], c_ulong, 'Index' ),
              ( ['in', 'out'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'DataSize' )),
    COMMETHOD([], HRESULT, 'ReadProcessorSystemData',
              ( ['in'], c_ulong, 'Processor' ),
              ( ['in'], c_ulong, 'Index' ),
              ( ['in', 'out'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'DataSize' )),
    COMMETHOD([], HRESULT, 'VirtualToPhysical',
              ( ['in'], c_ulonglong, 'Virtual' ),
              ( ['out'], POINTER(c_ulonglong), 'Physical' )),
    COMMETHOD([], HRESULT, 'GetVirtualTranslationPhysicalOffsets',
              ( ['in'], c_ulonglong, 'Virtual' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'Offsets' ),
              ( ['in', 'optional'], c_ulong, 'OffsetsSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'Levels' )),
    COMMETHOD([], HRESULT, 'ReadHandleData',
              ( ['in'], c_ulonglong, 'Handle' ),
              ( ['in'], c_ulong, 'DataType' ),
              ( ['in', 'out', 'optional'], c_void_p, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'DataSize' )),
    COMMETHOD([], HRESULT, 'FillVirtual',
              ( ['in'], c_ulonglong, 'Start' ),
              ( ['in'], c_ulong, 'Size' ),
              ( ['in'], c_void_p, 'Pattern' ),
              ( ['in'], c_ulong, 'PatternSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'Filled' )),
    COMMETHOD([], HRESULT, 'FillPhysical',
              ( ['in'], c_ulonglong, 'Start' ),
              ( ['in'], c_ulong, 'Size' ),
              ( ['in'], c_void_p, 'Pattern' ),
              ( ['in'], c_ulong, 'PatternSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'Filled' )),
    COMMETHOD([], HRESULT, 'QueryVirtual',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['out'], POINTER(_MEMORY_BASIC_INFORMATION64), 'Info' )),
]
################################################################
## code template for IDebugDataSpaces2 implementation
##class IDebugDataSpaces2_Impl(object):
##    def FillPhysical(self, Start, Size, Pattern, PatternSize):
##        '-no docstring-'
##        #return Filled
##
##    def WriteVirtual(self, Offset, Buffer, BufferSize):
##        '-no docstring-'
##        #return BytesWritten
##
##    def QueryVirtual(self, Offset):
##        '-no docstring-'
##        #return Info
##
##    def ReadControl(self, Processor, Offset, BufferSize):
##        '-no docstring-'
##        #return Buffer, BytesRead
##
##    def GetVirtualTranslationPhysicalOffsets(self, Virtual, OffsetsSize):
##        '-no docstring-'
##        #return Offsets, Levels
##
##    def ReadPointersVirtual(self, Count, Offset):
##        '-no docstring-'
##        #return Ptrs
##
##    def ReadVirtualUncached(self, Offset, BufferSize):
##        '-no docstring-'
##        #return Buffer, BytesRead
##
##    def ReadPhysical(self, Offset, BufferSize):
##        '-no docstring-'
##        #return Buffer, BytesRead
##
##    def WriteControl(self, Processor, Offset, Buffer, BufferSize):
##        '-no docstring-'
##        #return BytesWritten
##
##    def ReadDebuggerData(self, Index, BufferSize):
##        '-no docstring-'
##        #return Buffer, DataSize
##
##    def ReadProcessorSystemData(self, Processor, Index, BufferSize):
##        '-no docstring-'
##        #return Buffer, DataSize
##
##    def WritePointersVirtual(self, Count, Offset, Ptrs):
##        '-no docstring-'
##        #return 
##
##    def WriteVirtualUncached(self, Offset, Buffer, BufferSize):
##        '-no docstring-'
##        #return BytesWritten
##
##    def ReadBusData(self, BusDataType, BusNumber, SlotNumber, Offset, BufferSize):
##        '-no docstring-'
##        #return Buffer, BytesRead
##
##    def WriteBusData(self, BusDataType, BusNumber, SlotNumber, Offset, Buffer, BufferSize):
##        '-no docstring-'
##        #return BytesWritten
##
##    def SearchVirtual(self, Offset, Length, Pattern, PatternSize, PatternGranularity):
##        '-no docstring-'
##        #return MatchOffset
##
##    def WriteIo(self, InterfaceType, BusNumber, AddressSpace, Offset, Buffer, BufferSize):
##        '-no docstring-'
##        #return BytesWritten
##
##    def ReadMsr(self, Msr):
##        '-no docstring-'
##        #return Value
##
##    def ReadIo(self, InterfaceType, BusNumber, AddressSpace, Offset, BufferSize):
##        '-no docstring-'
##        #return Buffer, BytesRead
##
##    def ReadVirtual(self, Offset, BufferSize):
##        '-no docstring-'
##        #return Buffer, BytesRead
##
##    def VirtualToPhysical(self, Virtual):
##        '-no docstring-'
##        #return Physical
##
##    def FillVirtual(self, Start, Size, Pattern, PatternSize):
##        '-no docstring-'
##        #return Filled
##
##    def CheckLowMemory(self):
##        '-no docstring-'
##        #return 
##
##    def ReadHandleData(self, Handle, DataType, BufferSize):
##        '-no docstring-'
##        #return Buffer, DataSize
##
##    def WritePhysical(self, Offset, Buffer, BufferSize):
##        '-no docstring-'
##        #return BytesWritten
##
##    def WriteMsr(self, Msr, Value):
##        '-no docstring-'
##        #return 
##


# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0091_0024'
DEBUG_OUTTYPE_ADDRESS_OF_FIELD = 65536
__MIDL___MIDL_itf_DbgEng_0001_0091_0024 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0080_0005'
DEBUG_VSEARCH_DEFAULT = 0
__MIDL___MIDL_itf_DbgEng_0001_0080_0005 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0091_0026'
DEBUG_OUTTYPE_BLOCK_RECURSE = 2097152
__MIDL___MIDL_itf_DbgEng_0001_0091_0026 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0080_0008'
DEBUG_PHYSICAL_CACHED = 1
__MIDL___MIDL_itf_DbgEng_0001_0080_0008 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0091_0027'
DEBUG_FIND_SOURCE_DEFAULT = 0
__MIDL___MIDL_itf_DbgEng_0001_0091_0027 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0080_0009'
DEBUG_PHYSICAL_UNCACHED = 2
__MIDL___MIDL_itf_DbgEng_0001_0080_0009 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0091_0028'
DEBUG_FIND_SOURCE_FULL_PATH = 1
__MIDL___MIDL_itf_DbgEng_0001_0091_0028 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0080_0010'
DEBUG_PHYSICAL_WRITE_COMBINED = 3
__MIDL___MIDL_itf_DbgEng_0001_0080_0010 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0091_0029'
DEBUG_FIND_SOURCE_BEST_MATCH = 2
__MIDL___MIDL_itf_DbgEng_0001_0091_0029 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0081_0001'
DEBUG_EVENT_BREAKPOINT = 1
__MIDL___MIDL_itf_DbgEng_0001_0081_0001 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0091_0030'
DEBUG_FIND_SOURCE_NO_SRCSRV = 4
__MIDL___MIDL_itf_DbgEng_0001_0091_0030 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0081_0002'
DEBUG_EVENT_EXCEPTION = 2
__MIDL___MIDL_itf_DbgEng_0001_0081_0002 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0091_0010'
DEBUG_SYMTYPE_CODEVIEW = 2
__MIDL___MIDL_itf_DbgEng_0001_0091_0010 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0000_0000_0008'
NORMAL_PRIORITY_CLASS = 32
__MIDL___MIDL_itf_DbgEng_0000_0000_0008 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0081_0020'
DEBUG_SESSION_HIBERNATE = 6
__MIDL___MIDL_itf_DbgEng_0001_0081_0020 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0081_0003'
DEBUG_EVENT_CREATE_THREAD = 4
__MIDL___MIDL_itf_DbgEng_0001_0081_0003 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0092_0001'
DEBUG_MODNAME_IMAGE = 0
__MIDL___MIDL_itf_DbgEng_0001_0092_0001 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0081_0004'
DEBUG_EVENT_EXIT_THREAD = 8
__MIDL___MIDL_itf_DbgEng_0001_0081_0004 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0092_0002'
DEBUG_MODNAME_MODULE = 1
__MIDL___MIDL_itf_DbgEng_0001_0092_0002 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0081_0005'
DEBUG_EVENT_CREATE_PROCESS = 16
__MIDL___MIDL_itf_DbgEng_0001_0081_0005 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0092_0003'
DEBUG_MODNAME_LOADED_IMAGE = 2
__MIDL___MIDL_itf_DbgEng_0001_0092_0003 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0081_0006'
DEBUG_EVENT_EXIT_PROCESS = 32
__MIDL___MIDL_itf_DbgEng_0001_0081_0006 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0092_0004'
DEBUG_MODNAME_SYMBOL_FILE = 3
__MIDL___MIDL_itf_DbgEng_0001_0092_0004 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0081_0007'
DEBUG_EVENT_LOAD_MODULE = 64
__MIDL___MIDL_itf_DbgEng_0001_0081_0007 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0092_0005'
DEBUG_MODNAME_MAPPED_IMAGE = 4
__MIDL___MIDL_itf_DbgEng_0001_0092_0005 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0081_0008'
DEBUG_EVENT_UNLOAD_MODULE = 128
__MIDL___MIDL_itf_DbgEng_0001_0081_0008 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0092_0006'
DEBUG_TYPEOPTS_UNICODE_DISPLAY = 1
__MIDL___MIDL_itf_DbgEng_0001_0092_0006 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0081_0009'
DEBUG_EVENT_SYSTEM_ERROR = 256
__MIDL___MIDL_itf_DbgEng_0001_0081_0009 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0092_0007'
DEBUG_TYPEOPTS_LONGSTATUS_DISPLAY = 2
__MIDL___MIDL_itf_DbgEng_0001_0092_0007 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0081_0010'
DEBUG_EVENT_SESSION_STATUS = 512
__MIDL___MIDL_itf_DbgEng_0001_0081_0010 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0092_0008'
DEBUG_TYPEOPTS_FORCERADIX_OUTPUT = 4
__MIDL___MIDL_itf_DbgEng_0001_0092_0008 = c_int # enum
class _DEBUG_REGISTER_DESCRIPTION(Structure):
    pass
_DEBUG_REGISTER_DESCRIPTION._fields_ = [
    ('Type', c_ulong),
    ('Flags', c_ulong),
    ('SubregMaster', c_ulong),
    ('SubregLength', c_ulong),
    ('SubregMask', c_ulonglong),
    ('SubregShift', c_ulong),
    ('Reserved0', c_ulong),
]
assert sizeof(_DEBUG_REGISTER_DESCRIPTION) == 32, sizeof(_DEBUG_REGISTER_DESCRIPTION)
assert alignment(_DEBUG_REGISTER_DESCRIPTION) == 8, alignment(_DEBUG_REGISTER_DESCRIPTION)

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0092_0009'
DEBUG_TYPEOPTS_MATCH_MAXSIZE = 8
__MIDL___MIDL_itf_DbgEng_0001_0092_0009 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0081_0012'
DEBUG_EVENT_CHANGE_ENGINE_STATE = 2048
__MIDL___MIDL_itf_DbgEng_0001_0081_0012 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0093_0001'
DEBUG_GETMOD_DEFAULT = 0
__MIDL___MIDL_itf_DbgEng_0001_0093_0001 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0081_0013'
DEBUG_EVENT_CHANGE_SYMBOL_STATE = 4096
__MIDL___MIDL_itf_DbgEng_0001_0081_0013 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0093_0002'
DEBUG_GETMOD_NO_LOADED_MODULES = 1
__MIDL___MIDL_itf_DbgEng_0001_0093_0002 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0081_0014'
DEBUG_SESSION_ACTIVE = 0
__MIDL___MIDL_itf_DbgEng_0001_0081_0014 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0093_0003'
DEBUG_GETMOD_NO_UNLOADED_MODULES = 2
__MIDL___MIDL_itf_DbgEng_0001_0093_0003 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0081_0015'
DEBUG_SESSION_END_SESSION_ACTIVE_TERMINATE = 1
__MIDL___MIDL_itf_DbgEng_0001_0081_0015 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0093_0004'
DEBUG_ADDSYNTHMOD_DEFAULT = 0
__MIDL___MIDL_itf_DbgEng_0001_0093_0004 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0081_0016'
DEBUG_SESSION_END_SESSION_ACTIVE_DETACH = 2
__MIDL___MIDL_itf_DbgEng_0001_0081_0016 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0093_0005'
DEBUG_ADDSYNTHSYM_DEFAULT = 0
__MIDL___MIDL_itf_DbgEng_0001_0093_0005 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0081_0017'
DEBUG_SESSION_END_SESSION_PASSIVE = 3
__MIDL___MIDL_itf_DbgEng_0001_0081_0017 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0093_0006'
DEBUG_OUTSYM_DEFAULT = 0
__MIDL___MIDL_itf_DbgEng_0001_0093_0006 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0081_0018'
DEBUG_SESSION_END = 4
__MIDL___MIDL_itf_DbgEng_0001_0081_0018 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0093_0007'
DEBUG_OUTSYM_FORCE_OFFSET = 1
__MIDL___MIDL_itf_DbgEng_0001_0093_0007 = c_int # enum
class IDebugDataSpaces3(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'IDebugDataSpaces3'
    _iid_ = GUID('{23F79D6C-8AAF-4F7C-A607-9995F5407E63}')
    _idlflags_ = []
IDebugDataSpaces3._methods_ = [
    COMMETHOD([], HRESULT, 'ReadVirtual',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in', 'out'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['in', 'out', 'optional'], POINTER(c_ulong), 'BytesRead' )),
    COMMETHOD([], HRESULT, 'WriteVirtual',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'BytesWritten' )),
    COMMETHOD([], HRESULT, 'SearchVirtual',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulonglong, 'Length' ),
              ( ['in'], c_void_p, 'Pattern' ),
              ( ['in'], c_ulong, 'PatternSize' ),
              ( ['in'], c_ulong, 'PatternGranularity' ),
              ( ['out'], POINTER(c_ulonglong), 'MatchOffset' )),
    COMMETHOD([], HRESULT, 'ReadVirtualUncached',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in', 'out'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['in', 'out', 'optional'], POINTER(c_ulong), 'BytesRead' )),
    COMMETHOD([], HRESULT, 'WriteVirtualUncached',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'BytesWritten' )),
    COMMETHOD([], HRESULT, 'ReadPointersVirtual',
              ( ['in'], c_ulong, 'Count' ),
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['out'], POINTER(c_ulonglong), 'Ptrs' )),
    COMMETHOD([], HRESULT, 'WritePointersVirtual',
              ( ['in'], c_ulong, 'Count' ),
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], POINTER(c_ulonglong), 'Ptrs' )),
    COMMETHOD([], HRESULT, 'ReadPhysical',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in', 'out'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['in', 'out', 'optional'], POINTER(c_ulong), 'BytesRead' )),
    COMMETHOD([], HRESULT, 'WritePhysical',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'BytesWritten' )),
    COMMETHOD([], HRESULT, 'ReadControl',
              ( ['in'], c_ulong, 'Processor' ),
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in', 'out'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['in', 'out', 'optional'], POINTER(c_ulong), 'BytesRead' )),
    COMMETHOD([], HRESULT, 'WriteControl',
              ( ['in'], c_ulong, 'Processor' ),
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'BytesWritten' )),
    COMMETHOD([], HRESULT, 'ReadIo',
              ( ['in'], c_ulong, 'InterfaceType' ),
              ( ['in'], c_ulong, 'BusNumber' ),
              ( ['in'], c_ulong, 'AddressSpace' ),
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in', 'out'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['in', 'out', 'optional'], POINTER(c_ulong), 'BytesRead' )),
    COMMETHOD([], HRESULT, 'WriteIo',
              ( ['in'], c_ulong, 'InterfaceType' ),
              ( ['in'], c_ulong, 'BusNumber' ),
              ( ['in'], c_ulong, 'AddressSpace' ),
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'BytesWritten' )),
    COMMETHOD([], HRESULT, 'ReadMsr',
              ( ['in'], c_ulong, 'Msr' ),
              ( ['out'], POINTER(c_ulonglong), 'Value' )),
    COMMETHOD([], HRESULT, 'WriteMsr',
              ( ['in'], c_ulong, 'Msr' ),
              ( ['in'], c_ulonglong, 'Value' )),
    COMMETHOD([], HRESULT, 'ReadBusData',
              ( ['in'], c_ulong, 'BusDataType' ),
              ( ['in'], c_ulong, 'BusNumber' ),
              ( ['in'], c_ulong, 'SlotNumber' ),
              ( ['in'], c_ulong, 'Offset' ),
              ( ['in', 'out'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['in', 'out', 'optional'], POINTER(c_ulong), 'BytesRead' )),
    COMMETHOD([], HRESULT, 'WriteBusData',
              ( ['in'], c_ulong, 'BusDataType' ),
              ( ['in'], c_ulong, 'BusNumber' ),
              ( ['in'], c_ulong, 'SlotNumber' ),
              ( ['in'], c_ulong, 'Offset' ),
              ( ['in'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'BytesWritten' )),
    COMMETHOD([], HRESULT, 'CheckLowMemory'),
    COMMETHOD([], HRESULT, 'ReadDebuggerData',
              ( ['in'], c_ulong, 'Index' ),
              ( ['in', 'out'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'DataSize' )),
    COMMETHOD([], HRESULT, 'ReadProcessorSystemData',
              ( ['in'], c_ulong, 'Processor' ),
              ( ['in'], c_ulong, 'Index' ),
              ( ['in', 'out'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'DataSize' )),
    COMMETHOD([], HRESULT, 'VirtualToPhysical',
              ( ['in'], c_ulonglong, 'Virtual' ),
              ( ['out'], POINTER(c_ulonglong), 'Physical' )),
    COMMETHOD([], HRESULT, 'GetVirtualTranslationPhysicalOffsets',
              ( ['in'], c_ulonglong, 'Virtual' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'Offsets' ),
              ( ['in', 'optional'], c_ulong, 'OffsetsSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'Levels' )),
    COMMETHOD([], HRESULT, 'ReadHandleData',
              ( ['in'], c_ulonglong, 'Handle' ),
              ( ['in'], c_ulong, 'DataType' ),
              ( ['in', 'out', 'optional'], c_void_p, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'DataSize' )),
    COMMETHOD([], HRESULT, 'FillVirtual',
              ( ['in'], c_ulonglong, 'Start' ),
              ( ['in'], c_ulong, 'Size' ),
              ( ['in'], c_void_p, 'Pattern' ),
              ( ['in'], c_ulong, 'PatternSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'Filled' )),
    COMMETHOD([], HRESULT, 'FillPhysical',
              ( ['in'], c_ulonglong, 'Start' ),
              ( ['in'], c_ulong, 'Size' ),
              ( ['in'], c_void_p, 'Pattern' ),
              ( ['in'], c_ulong, 'PatternSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'Filled' )),
    COMMETHOD([], HRESULT, 'QueryVirtual',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['out'], POINTER(_MEMORY_BASIC_INFORMATION64), 'Info' )),
    COMMETHOD([], HRESULT, 'ReadImageNtHeaders',
              ( ['in'], c_ulonglong, 'ImageBase' ),
              ( ['out'], POINTER(_IMAGE_NT_HEADERS64), 'Headers' )),
    COMMETHOD([], HRESULT, 'ReadTagged',
              ( ['in'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.GUID), 'Tag' ),
              ( ['in'], c_ulong, 'Offset' ),
              ( ['in', 'out', 'optional'], c_void_p, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'TotalSize' )),
    COMMETHOD([], HRESULT, 'StartEnumTagged',
              ( ['out'], POINTER(c_ulonglong), 'Handle' )),
    COMMETHOD([], HRESULT, 'GetNextTagged',
              ( ['in'], c_ulonglong, 'Handle' ),
              ( ['out'], POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.GUID), 'Tag' ),
              ( ['out'], POINTER(c_ulong), 'Size' )),
    COMMETHOD([], HRESULT, 'EndEnumTagged',
              ( ['in'], c_ulonglong, 'Handle' )),
]
################################################################
## code template for IDebugDataSpaces3 implementation
##class IDebugDataSpaces3_Impl(object):
##    def FillPhysical(self, Start, Size, Pattern, PatternSize):
##        '-no docstring-'
##        #return Filled
##
##    def WriteVirtual(self, Offset, Buffer, BufferSize):
##        '-no docstring-'
##        #return BytesWritten
##
##    def QueryVirtual(self, Offset):
##        '-no docstring-'
##        #return Info
##
##    def ReadControl(self, Processor, Offset, BufferSize):
##        '-no docstring-'
##        #return Buffer, BytesRead
##
##    def EndEnumTagged(self, Handle):
##        '-no docstring-'
##        #return 
##
##    def GetVirtualTranslationPhysicalOffsets(self, Virtual, OffsetsSize):
##        '-no docstring-'
##        #return Offsets, Levels
##
##    def ReadPointersVirtual(self, Count, Offset):
##        '-no docstring-'
##        #return Ptrs
##
##    def GetNextTagged(self, Handle):
##        '-no docstring-'
##        #return Tag, Size
##
##    def ReadVirtualUncached(self, Offset, BufferSize):
##        '-no docstring-'
##        #return Buffer, BytesRead
##
##    def ReadPhysical(self, Offset, BufferSize):
##        '-no docstring-'
##        #return Buffer, BytesRead
##
##    def WriteControl(self, Processor, Offset, Buffer, BufferSize):
##        '-no docstring-'
##        #return BytesWritten
##
##    def ReadDebuggerData(self, Index, BufferSize):
##        '-no docstring-'
##        #return Buffer, DataSize
##
##    def ReadImageNtHeaders(self, ImageBase):
##        '-no docstring-'
##        #return Headers
##
##    def ReadProcessorSystemData(self, Processor, Index, BufferSize):
##        '-no docstring-'
##        #return Buffer, DataSize
##
##    def WritePointersVirtual(self, Count, Offset, Ptrs):
##        '-no docstring-'
##        #return 
##
##    def WriteVirtualUncached(self, Offset, Buffer, BufferSize):
##        '-no docstring-'
##        #return BytesWritten
##
##    def ReadBusData(self, BusDataType, BusNumber, SlotNumber, Offset, BufferSize):
##        '-no docstring-'
##        #return Buffer, BytesRead
##
##    def WriteBusData(self, BusDataType, BusNumber, SlotNumber, Offset, Buffer, BufferSize):
##        '-no docstring-'
##        #return BytesWritten
##
##    def SearchVirtual(self, Offset, Length, Pattern, PatternSize, PatternGranularity):
##        '-no docstring-'
##        #return MatchOffset
##
##    def WriteIo(self, InterfaceType, BusNumber, AddressSpace, Offset, Buffer, BufferSize):
##        '-no docstring-'
##        #return BytesWritten
##
##    def ReadMsr(self, Msr):
##        '-no docstring-'
##        #return Value
##
##    def ReadIo(self, InterfaceType, BusNumber, AddressSpace, Offset, BufferSize):
##        '-no docstring-'
##        #return Buffer, BytesRead
##
##    def ReadVirtual(self, Offset, BufferSize):
##        '-no docstring-'
##        #return Buffer, BytesRead
##
##    def VirtualToPhysical(self, Virtual):
##        '-no docstring-'
##        #return Physical
##
##    def FillVirtual(self, Start, Size, Pattern, PatternSize):
##        '-no docstring-'
##        #return Filled
##
##    def CheckLowMemory(self):
##        '-no docstring-'
##        #return 
##
##    def ReadHandleData(self, Handle, DataType, BufferSize):
##        '-no docstring-'
##        #return Buffer, DataSize
##
##    def ReadTagged(self, Tag, Offset, BufferSize):
##        '-no docstring-'
##        #return Buffer, TotalSize
##
##    def WritePhysical(self, Offset, Buffer, BufferSize):
##        '-no docstring-'
##        #return BytesWritten
##
##    def StartEnumTagged(self):
##        '-no docstring-'
##        #return Handle
##
##    def WriteMsr(self, Msr, Value):
##        '-no docstring-'
##        #return 
##


# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0093_0008'
DEBUG_OUTSYM_SOURCE_LINE = 2
__MIDL___MIDL_itf_DbgEng_0001_0093_0008 = c_int # enum
_WINDBG_EXTENSION_APIS64._fields_ = [
    ('NotSupported', c_ulong),
]
assert sizeof(_WINDBG_EXTENSION_APIS64) == 4, sizeof(_WINDBG_EXTENSION_APIS64)
assert alignment(_WINDBG_EXTENSION_APIS64) == 4, alignment(_WINDBG_EXTENSION_APIS64)

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0093_0009'
DEBUG_OUTSYM_ALLOW_DISPLACEMENT = 4
__MIDL___MIDL_itf_DbgEng_0001_0093_0009 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0081_0021'
DEBUG_SESSION_FAILURE = 7
__MIDL___MIDL_itf_DbgEng_0001_0081_0021 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0093_0010'
DEBUG_GETFNENT_DEFAULT = 0
__MIDL___MIDL_itf_DbgEng_0001_0093_0010 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0081_0022'
DEBUG_CDS_ALL = -1
__MIDL___MIDL_itf_DbgEng_0001_0081_0022 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0093_0011'
DEBUG_GETFNENT_RAW_ENTRY_ONLY = 1
__MIDL___MIDL_itf_DbgEng_0001_0093_0011 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0081_0028'
DEBUG_CES_BREAKPOINTS = 4
__MIDL___MIDL_itf_DbgEng_0001_0081_0028 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0093_0012'
DEBUG_SOURCE_IS_STATEMENT = 1
__MIDL___MIDL_itf_DbgEng_0001_0093_0012 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0081_0025'
DEBUG_CES_ALL = -1
__MIDL___MIDL_itf_DbgEng_0001_0081_0025 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0029'
DEBUG_INTERRUPT_PASSIVE = 1
__MIDL___MIDL_itf_DbgEng_0001_0073_0029 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0093_0013'
DEBUG_GSEL_DEFAULT = 0
__MIDL___MIDL_itf_DbgEng_0001_0093_0013 = c_int # enum
class IDebugOutputCallbacks2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'IDebugOutputCallbacks2'
    _iid_ = GUID('{67721FE9-56D2-4A44-A325-2B65513CE6EB}')
    _idlflags_ = []
IDebugOutputCallbacks2._methods_ = [
    COMMETHOD([], HRESULT, 'Output',
              ( ['in'], c_ulong, 'Mask' ),
              ( ['in'], STRING, 'Text' )),
    COMMETHOD([], HRESULT, 'GetInterestMask',
              ( ['out'], POINTER(c_ulong), 'Mask' )),
    COMMETHOD([], HRESULT, 'Output2',
              ( ['in'], c_ulong, 'Which' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['in'], c_ulonglong, 'Arg' ),
              ( ['in', 'optional'], POINTER(c_ushort), 'Text' )),
]
################################################################
## code template for IDebugOutputCallbacks2 implementation
##class IDebugOutputCallbacks2_Impl(object):
##    def Output2(self, Which, Flags, Arg, Text):
##        '-no docstring-'
##        #return 
##
##    def Output(self, Mask, Text):
##        '-no docstring-'
##        #return 
##
##    def GetInterestMask(self):
##        '-no docstring-'
##        #return Mask
##


# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0093_0014'
DEBUG_GSEL_NO_SYMBOL_LOADS = 1
__MIDL___MIDL_itf_DbgEng_0001_0093_0014 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0081_0026'
DEBUG_CES_CURRENT_THREAD = 1
__MIDL___MIDL_itf_DbgEng_0001_0081_0026 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0093_0015'
DEBUG_GSEL_ALLOW_LOWER = 2
__MIDL___MIDL_itf_DbgEng_0001_0093_0015 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0081_0029'
DEBUG_CES_CODE_LEVEL = 8
__MIDL___MIDL_itf_DbgEng_0001_0081_0029 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0093_0016'
DEBUG_GSEL_ALLOW_HIGHER = 4
__MIDL___MIDL_itf_DbgEng_0001_0093_0016 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0093_0017'
DEBUG_GSEL_NEAREST_ONLY = 8
__MIDL___MIDL_itf_DbgEng_0001_0093_0017 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0098_0001'
DEBUG_COMMAND_EXCEPTION_ID = -606073410
__MIDL___MIDL_itf_DbgEng_0001_0098_0001 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0081_0024'
DEBUG_CDS_DATA = 2
__MIDL___MIDL_itf_DbgEng_0001_0081_0024 = c_int # enum
_DEBUG_SPECIFIC_FILTER_PARAMETERS._fields_ = [
    ('ExecutionOption', c_ulong),
    ('ContinueOption', c_ulong),
    ('TextSize', c_ulong),
    ('CommandSize', c_ulong),
    ('ArgumentSize', c_ulong),
]
assert sizeof(_DEBUG_SPECIFIC_FILTER_PARAMETERS) == 20, sizeof(_DEBUG_SPECIFIC_FILTER_PARAMETERS)
assert alignment(_DEBUG_SPECIFIC_FILTER_PARAMETERS) == 4, alignment(_DEBUG_SPECIFIC_FILTER_PARAMETERS)

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0000_0000_0009'
IDLE_PRIORITY_CLASS = 64
__MIDL___MIDL_itf_DbgEng_0000_0000_0009 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0080_0001'
DEBUG_OFFSINFO_VIRTUAL_SOURCE = 1
__MIDL___MIDL_itf_DbgEng_0001_0080_0001 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0081_0030'
DEBUG_CES_EXECUTION_STATUS = 16
__MIDL___MIDL_itf_DbgEng_0001_0081_0030 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0053'
DEBUG_ENGOPT_SYNCHRONIZE_BREAKPOINTS = 2048
__MIDL___MIDL_itf_DbgEng_0001_0073_0053 = c_int # enum
class IDebugSystemObjects4(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'IDebugSystemObjects4'
    _iid_ = GUID('{489468E6-7D0F-4AF5-87AB-25207454D553}')
    _idlflags_ = []
IDebugSystemObjects4._methods_ = [
    COMMETHOD([], HRESULT, 'GetEventThread',
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetEventProcess',
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetCurrentThreadId',
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'SetCurrentThreadId',
              ( ['in'], c_ulong, 'Id' )),
    COMMETHOD([], HRESULT, 'GetCurrentProcessId',
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'SetCurrentProcessId',
              ( ['in'], c_ulong, 'Id' )),
    COMMETHOD([], HRESULT, 'GetNumberThreads',
              ( ['out'], POINTER(c_ulong), 'Number' )),
    COMMETHOD([], HRESULT, 'GetTotalNumberThreads',
              ( ['out'], POINTER(c_ulong), 'Total' ),
              ( ['out'], POINTER(c_ulong), 'LargestProcess' )),
    COMMETHOD([], HRESULT, 'GetThreadIdsByIndex',
              ( ['in'], c_ulong, 'Start' ),
              ( ['in'], c_ulong, 'Count' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'Ids' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'SysIds' )),
    COMMETHOD([], HRESULT, 'GetThreadIdByProcessor',
              ( ['in'], c_ulong, 'Processor' ),
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetCurrentThreadDataOffset',
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'GetThreadIdByDataOffset',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetCurrentThreadTeb',
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'GetThreadIdByTeb',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetCurrentThreadSystemId',
              ( ['out'], POINTER(c_ulong), 'SysId' )),
    COMMETHOD([], HRESULT, 'GetThreadIdBySystemId',
              ( ['in'], c_ulong, 'SysId' ),
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetCurrentThreadHandle',
              ( ['out'], POINTER(c_ulonglong), 'Handle' )),
    COMMETHOD([], HRESULT, 'GetThreadIdByHandle',
              ( ['in'], c_ulonglong, 'Handle' ),
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetNumberProcesses',
              ( ['out'], POINTER(c_ulong), 'Number' )),
    COMMETHOD([], HRESULT, 'GetProcessIdsByIndex',
              ( ['in'], c_ulong, 'Start' ),
              ( ['in'], c_ulong, 'Count' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'Ids' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'SysIds' )),
    COMMETHOD([], HRESULT, 'GetCurrentProcessDataOffset',
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'GetProcessIdByDataOffset',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetCurrentProcessPeb',
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'GetProcessIdByPeb',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetCurrentProcessSystemId',
              ( ['out'], POINTER(c_ulong), 'SysId' )),
    COMMETHOD([], HRESULT, 'GetProcessIdBySystemId',
              ( ['in'], c_ulong, 'SysId' ),
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetCurrentProcessHandle',
              ( ['out'], POINTER(c_ulonglong), 'Handle' )),
    COMMETHOD([], HRESULT, 'GetProcessIdByHandle',
              ( ['in'], c_ulonglong, 'Handle' ),
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetCurrentProcessExecutableName',
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ExeSize' )),
    COMMETHOD([], HRESULT, 'GetCurrentProcessUpTime',
              ( ['out'], POINTER(c_ulong), 'UpTime' )),
    COMMETHOD([], HRESULT, 'GetImplicitThreadDataOffset',
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'SetImplicitThreadDataOffset',
              ( ['in'], c_ulonglong, 'Offset' )),
    COMMETHOD([], HRESULT, 'GetImplicitProcessDataOffset',
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'SetImplicitProcessDataOffset',
              ( ['in'], c_ulonglong, 'Offset' )),
    COMMETHOD([], HRESULT, 'GetEventSystem',
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetCurrentSystemId',
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'SetCurrentSystemId',
              ( ['in'], c_ulong, 'Id' )),
    COMMETHOD([], HRESULT, 'GetNumberSystems',
              ( ['out'], POINTER(c_ulong), 'Number' )),
    COMMETHOD([], HRESULT, 'GetSystemIdsByIndex',
              ( ['in'], c_ulong, 'Start' ),
              ( ['in'], c_ulong, 'Count' ),
              ( ['out'], POINTER(c_ulong), 'Ids' )),
    COMMETHOD([], HRESULT, 'GetTotalNumberThreadsAndProcesses',
              ( ['out'], POINTER(c_ulong), 'TotalThreads' ),
              ( ['out'], POINTER(c_ulong), 'TotalProcesses' ),
              ( ['out'], POINTER(c_ulong), 'LargestProcessThreads' ),
              ( ['out'], POINTER(c_ulong), 'LargestSystemThreads' ),
              ( ['out'], POINTER(c_ulong), 'LargestSystemProcesses' )),
    COMMETHOD([], HRESULT, 'GetCurrentSystemServer',
              ( ['out'], POINTER(c_ulonglong), 'Server' )),
    COMMETHOD([], HRESULT, 'GetSystemByServer',
              ( ['in'], c_ulonglong, 'Server' ),
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetCurrentSystemServerName',
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'NameSize' )),
    COMMETHOD([], HRESULT, 'GetCurrentProcessExecutableNameWide',
              ( ['out', 'optional'], POINTER(c_ushort), 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ExeSize' )),
    COMMETHOD([], HRESULT, 'GetCurrentSystemServerNameWide',
              ( ['out', 'optional'], POINTER(c_ushort), 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'NameSize' )),
]
################################################################
## code template for IDebugSystemObjects4 implementation
##class IDebugSystemObjects4_Impl(object):
##    def GetThreadIdByTeb(self, Offset):
##        '-no docstring-'
##        #return Id
##
##    def GetProcessIdsByIndex(self, Start, Count):
##        '-no docstring-'
##        #return Ids, SysIds
##
##    def GetCurrentProcessSystemId(self):
##        '-no docstring-'
##        #return SysId
##
##    def GetImplicitThreadDataOffset(self):
##        '-no docstring-'
##        #return Offset
##
##    def GetThreadIdsByIndex(self, Start, Count):
##        '-no docstring-'
##        #return Ids, SysIds
##
##    def SetCurrentThreadId(self, Id):
##        '-no docstring-'
##        #return 
##
##    def GetEventSystem(self):
##        '-no docstring-'
##        #return Id
##
##    def GetCurrentProcessPeb(self):
##        '-no docstring-'
##        #return Offset
##
##    def GetCurrentSystemServer(self):
##        '-no docstring-'
##        #return Server
##
##    def GetCurrentProcessExecutableName(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, ExeSize
##
##    def GetTotalNumberThreads(self):
##        '-no docstring-'
##        #return Total, LargestProcess
##
##    def GetProcessIdByPeb(self, Offset):
##        '-no docstring-'
##        #return Id
##
##    def SetImplicitProcessDataOffset(self, Offset):
##        '-no docstring-'
##        #return 
##
##    def GetCurrentProcessId(self):
##        '-no docstring-'
##        #return Id
##
##    def GetEventProcess(self):
##        '-no docstring-'
##        #return Id
##
##    def GetThreadIdBySystemId(self, SysId):
##        '-no docstring-'
##        #return Id
##
##    def GetCurrentSystemId(self):
##        '-no docstring-'
##        #return Id
##
##    def GetThreadIdByDataOffset(self, Offset):
##        '-no docstring-'
##        #return Id
##
##    def GetCurrentProcessUpTime(self):
##        '-no docstring-'
##        #return UpTime
##
##    def GetThreadIdByHandle(self, Handle):
##        '-no docstring-'
##        #return Id
##
##    def GetCurrentThreadTeb(self):
##        '-no docstring-'
##        #return Offset
##
##    def GetCurrentProcessExecutableNameWide(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, ExeSize
##
##    def SetImplicitThreadDataOffset(self, Offset):
##        '-no docstring-'
##        #return 
##
##    def GetCurrentSystemServerName(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, NameSize
##
##    def GetImplicitProcessDataOffset(self):
##        '-no docstring-'
##        #return Offset
##
##    def GetNumberSystems(self):
##        '-no docstring-'
##        #return Number
##
##    def GetProcessIdBySystemId(self, SysId):
##        '-no docstring-'
##        #return Id
##
##    def GetEventThread(self):
##        '-no docstring-'
##        #return Id
##
##    def GetSystemByServer(self, Server):
##        '-no docstring-'
##        #return Id
##
##    def GetCurrentProcessDataOffset(self):
##        '-no docstring-'
##        #return Offset
##
##    def GetProcessIdByDataOffset(self, Offset):
##        '-no docstring-'
##        #return Id
##
##    def GetNumberProcesses(self):
##        '-no docstring-'
##        #return Number
##
##    def GetTotalNumberThreadsAndProcesses(self):
##        '-no docstring-'
##        #return TotalThreads, TotalProcesses, LargestProcessThreads, LargestSystemThreads, LargestSystemProcesses
##
##    def GetCurrentThreadId(self):
##        '-no docstring-'
##        #return Id
##
##    def GetCurrentProcessHandle(self):
##        '-no docstring-'
##        #return Handle
##
##    def SetCurrentProcessId(self, Id):
##        '-no docstring-'
##        #return 
##
##    def GetCurrentThreadHandle(self):
##        '-no docstring-'
##        #return Handle
##
##    def GetProcessIdByHandle(self, Handle):
##        '-no docstring-'
##        #return Id
##
##    def GetCurrentSystemServerNameWide(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, NameSize
##
##    def SetCurrentSystemId(self, Id):
##        '-no docstring-'
##        #return 
##
##    def GetSystemIdsByIndex(self, Start, Count):
##        '-no docstring-'
##        #return Ids
##
##    def GetNumberThreads(self):
##        '-no docstring-'
##        #return Number
##
##    def GetCurrentThreadSystemId(self):
##        '-no docstring-'
##        #return SysId
##
##    def GetCurrentThreadDataOffset(self):
##        '-no docstring-'
##        #return Offset
##
##    def GetThreadIdByProcessor(self, Processor):
##        '-no docstring-'
##        #return Id
##


# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0081_0027'
DEBUG_CES_EFFECTIVE_PROCESSOR = 2
__MIDL___MIDL_itf_DbgEng_0001_0081_0027 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0098_0004'
DEBUG_CMDEX_RESET_EVENT_STRINGS = 2
__MIDL___MIDL_itf_DbgEng_0001_0098_0004 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0064_0014'
DEBUG_REQUEST_READ_USER_MINIDUMP_STREAM = 7
__MIDL___MIDL_itf_DbgEng_0001_0064_0014 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0064_0012'
DEBUG_REQUEST_SET_ADDITIONAL_CREATE_OPTIONS = 5
__MIDL___MIDL_itf_DbgEng_0001_0064_0012 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0064_0016'
DEBUG_REQUEST_SET_LOCAL_IMPLICIT_COMMAND_LINE = 9
__MIDL___MIDL_itf_DbgEng_0001_0064_0016 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0064_0013'
DEBUG_REQUEST_GET_WIN32_MAJOR_MINOR_VERSIONS = 6
__MIDL___MIDL_itf_DbgEng_0001_0064_0013 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0064_0015'
DEBUG_REQUEST_TARGET_CAN_DETACH = 8
__MIDL___MIDL_itf_DbgEng_0001_0064_0015 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0069_0020'
DEBUG_DUMP_FILE_BASE = -1
__MIDL___MIDL_itf_DbgEng_0001_0069_0020 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0064_0017'
DEBUG_REQUEST_GET_CAPTURED_EVENT_CODE_OFFSET = 10
__MIDL___MIDL_itf_DbgEng_0001_0064_0017 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0064_0018'
DEBUG_REQUEST_READ_CAPTURED_EVENT_CODE_STREAM = 11
__MIDL___MIDL_itf_DbgEng_0001_0064_0018 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0064_0019'
DEBUG_REQUEST_EXT_TYPED_DATA_ANSI = 12
__MIDL___MIDL_itf_DbgEng_0001_0064_0019 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0003'
DEBUG_STATUS_GO_HANDLED = 2
__MIDL___MIDL_itf_DbgEng_0001_0073_0003 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0064_0020'
DEBUG_REQUEST_GET_EXTENSION_SEARCH_PATH_WIDE = 13
__MIDL___MIDL_itf_DbgEng_0001_0064_0020 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0064_0021'
DEBUG_REQUEST_GET_TEXT_COMPLETIONS_WIDE = 14
__MIDL___MIDL_itf_DbgEng_0001_0064_0021 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0064_0022'
DEBUG_REQUEST_GET_CACHED_SYMBOL_INFO = 15
__MIDL___MIDL_itf_DbgEng_0001_0064_0022 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0071_0001'
DEBUG_DUMP_FILE_LOAD_FAILED_INDEX = -1
__MIDL___MIDL_itf_DbgEng_0001_0071_0001 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0064_0023'
DEBUG_REQUEST_ADD_CACHED_SYMBOL_INFO = 16
__MIDL___MIDL_itf_DbgEng_0001_0064_0023 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0080_0007'
DEBUG_PHYSICAL_DEFAULT = 0
__MIDL___MIDL_itf_DbgEng_0001_0080_0007 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0064_0024'
DEBUG_REQUEST_REMOVE_CACHED_SYMBOL_INFO = 17
__MIDL___MIDL_itf_DbgEng_0001_0064_0024 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0064_0025'
DEBUG_REQUEST_GET_TEXT_COMPLETIONS_ANSI = 18
__MIDL___MIDL_itf_DbgEng_0001_0064_0025 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0084'
DEBUG_DATA_MmSessionBase = 632
__MIDL___MIDL_itf_DbgEng_0001_0077_0084 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0064_0026'
DEBUG_REQUEST_CURRENT_OUTPUT_CALLBACKS_ARE_DML_AWARE = 19
__MIDL___MIDL_itf_DbgEng_0001_0064_0026 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0064_0027'
DEBUG_SRCFILE_SYMBOL_TOKEN = 0
__MIDL___MIDL_itf_DbgEng_0001_0064_0027 = c_int # enum
class IDebugSymbols(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'IDebugSymbols'
    _iid_ = GUID('{8C31E98C-983A-48A5-9016-6FE5D667A950}')
    _idlflags_ = []
class _DEBUG_MODULE_PARAMETERS(Structure):
    pass
IDebugSymbols._methods_ = [
    COMMETHOD([], HRESULT, 'GetSymbolOptions',
              ( ['out'], POINTER(c_ulong), 'Options' )),
    COMMETHOD([], HRESULT, 'AddSymbolOptions',
              ( ['in'], c_ulong, 'Options' )),
    COMMETHOD([], HRESULT, 'RemoveSymbolOptions',
              ( ['in'], c_ulong, 'Options' )),
    COMMETHOD([], HRESULT, 'SetSymbolOptions',
              ( ['in'], c_ulong, 'Options' )),
    COMMETHOD([], HRESULT, 'GetNameByOffset',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in', 'out', 'optional'], STRING, 'NameBuffer' ),
              ( ['in', 'optional'], c_ulong, 'NameBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'NameSize' ),
              ( ['in', 'out', 'optional'], POINTER(c_ulonglong), 'Displacement' )),
    COMMETHOD([], HRESULT, 'GetOffsetByName',
              ( ['in'], STRING, 'Symbol' ),
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'GetNearNameByOffset',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_int, 'Delta' ),
              ( ['in', 'out', 'optional'], STRING, 'NameBuffer' ),
              ( ['in', 'optional'], c_ulong, 'NameBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'NameSize' ),
              ( ['in', 'out', 'optional'], POINTER(c_ulonglong), 'Displacement' )),
    COMMETHOD([], HRESULT, 'GetLineByOffset',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'Line' ),
              ( ['out', 'optional'], STRING, 'FileBuffer' ),
              ( ['in', 'optional'], c_ulong, 'FileBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'FileSize' ),
              ( ['in', 'out', 'optional'], POINTER(c_ulonglong), 'Displacement' )),
    COMMETHOD([], HRESULT, 'GetOffsetByLine',
              ( ['in'], c_ulong, 'Line' ),
              ( ['in'], STRING, 'File' ),
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'GetNumberModules',
              ( ['out'], POINTER(c_ulong), 'Loaded' ),
              ( ['out'], POINTER(c_ulong), 'Unloaded' )),
    COMMETHOD([], HRESULT, 'GetModuleByIndex',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out'], POINTER(c_ulonglong), 'Base' )),
    COMMETHOD([], HRESULT, 'GetModuleByModuleName',
              ( ['in'], STRING, 'Name' ),
              ( ['in'], c_ulong, 'StartIndex' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'Index' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'Base' )),
    COMMETHOD([], HRESULT, 'GetModuleByOffset',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulong, 'StartIndex' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'Index' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'Base' )),
    COMMETHOD([], HRESULT, 'GetModuleNames',
              ( ['in'], c_ulong, 'Index' ),
              ( ['in'], c_ulonglong, 'Base' ),
              ( ['out', 'optional'], STRING, 'ImageNameBuffer' ),
              ( ['in', 'optional'], c_ulong, 'ImageNameBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ImageNameSize' ),
              ( ['out', 'optional'], STRING, 'ModuleNameBuffer' ),
              ( ['in', 'optional'], c_ulong, 'ModuleNameBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ModuleNameSize' ),
              ( ['out', 'optional'], STRING, 'LoadedImageNameBuffer' ),
              ( ['in', 'optional'], c_ulong, 'LoadedImageNameBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'LoadedImageNameSize' )),
    COMMETHOD([], HRESULT, 'GetModuleParameters',
              ( ['in'], c_ulong, 'Count' ),
              ( ['in', 'optional'], POINTER(c_ulonglong), 'Bases' ),
              ( ['in', 'optional'], c_ulong, 'Start' ),
              ( ['out', 'optional'], POINTER(_DEBUG_MODULE_PARAMETERS), 'Params' )),
    COMMETHOD([], HRESULT, 'GetSymbolModule',
              ( ['in'], STRING, 'Symbol' ),
              ( ['out'], POINTER(c_ulonglong), 'Base' )),
    COMMETHOD([], HRESULT, 'GetTypeName',
              ( ['in'], c_ulonglong, 'Module' ),
              ( ['in'], c_ulong, 'TypeId' ),
              ( ['in', 'out', 'optional'], STRING, 'NameBuffer' ),
              ( ['in', 'optional'], c_ulong, 'NameBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'NameSize' )),
    COMMETHOD([], HRESULT, 'GetTypeId',
              ( ['in'], c_ulonglong, 'Module' ),
              ( ['in'], STRING, 'Name' ),
              ( ['out'], POINTER(c_ulong), 'TypeId' )),
    COMMETHOD([], HRESULT, 'GetTypeSize',
              ( ['in'], c_ulonglong, 'Module' ),
              ( ['in'], c_ulong, 'TypeId' ),
              ( ['out'], POINTER(c_ulong), 'Size' )),
    COMMETHOD([], HRESULT, 'GetFieldOffset',
              ( ['in'], c_ulonglong, 'Module' ),
              ( ['in'], c_ulong, 'TypeId' ),
              ( ['in'], STRING, 'Field' ),
              ( ['out'], POINTER(c_ulong), 'Offset' )),
    COMMETHOD([], HRESULT, 'GetSymbolTypeId',
              ( ['in'], STRING, 'Symbol' ),
              ( ['out'], POINTER(c_ulong), 'TypeId' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'Module' )),
    COMMETHOD([], HRESULT, 'GetOffsetTypeId',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['out'], POINTER(c_ulong), 'TypeId' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'Module' )),
    COMMETHOD([], HRESULT, 'ReadTypedDataVirtual',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulonglong, 'Module' ),
              ( ['in'], c_ulong, 'TypeId' ),
              ( ['in', 'out'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['in', 'out', 'optional'], POINTER(c_ulong), 'BytesRead' )),
    COMMETHOD([], HRESULT, 'WriteTypedDataVirtual',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulonglong, 'Module' ),
              ( ['in'], c_ulong, 'TypeId' ),
              ( ['in'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'BytesWritten' )),
    COMMETHOD([], HRESULT, 'OutputTypedDataVirtual',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulonglong, 'Module' ),
              ( ['in'], c_ulong, 'TypeId' ),
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'ReadTypedDataPhysical',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulonglong, 'Module' ),
              ( ['in'], c_ulong, 'TypeId' ),
              ( ['in', 'out'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['in', 'out', 'optional'], POINTER(c_ulong), 'BytesRead' )),
    COMMETHOD([], HRESULT, 'WriteTypedDataPhysical',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulonglong, 'Module' ),
              ( ['in'], c_ulong, 'TypeId' ),
              ( ['in'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'BytesWritten' )),
    COMMETHOD([], HRESULT, 'OutputTypedDataPhysical',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulonglong, 'Module' ),
              ( ['in'], c_ulong, 'TypeId' ),
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'GetScope',
              ( ['out', 'optional'], POINTER(c_ulonglong), 'InstructionOffset' ),
              ( ['out', 'optional'], POINTER(_DEBUG_STACK_FRAME), 'ScopeFrame' ),
              ( ['out', 'optional'], c_void_p, 'ScopeContext' ),
              ( ['in', 'optional'], c_ulong, 'ScopeContextSize' )),
    COMMETHOD([], HRESULT, 'SetScope',
              ( ['in'], c_ulonglong, 'InstructionOffset' ),
              ( ['in', 'optional'], POINTER(_DEBUG_STACK_FRAME), 'ScopeFrame' ),
              ( ['in', 'optional'], c_void_p, 'ScopeContext' ),
              ( ['in', 'optional'], c_ulong, 'ScopeContextSize' )),
    COMMETHOD([], HRESULT, 'ResetScope'),
    COMMETHOD([], HRESULT, 'GetScopeSymbolGroup',
              ( ['in'], c_ulong, 'Flags' ),
              ( ['in', 'optional'], POINTER(IDebugSymbolGroup), 'Update' ),
              ( ['out', 'optional'], POINTER(POINTER(IDebugSymbolGroup)), 'Symbols' )),
    COMMETHOD([], HRESULT, 'CreateSymbolGroup',
              ( ['out'], POINTER(POINTER(IDebugSymbolGroup)), 'Group' )),
    COMMETHOD([], HRESULT, 'StartSymbolMatch',
              ( ['in'], STRING, 'Pattern' ),
              ( ['out'], POINTER(c_ulonglong), 'Handle' )),
    COMMETHOD([], HRESULT, 'GetNextSymbolMatch',
              ( ['in'], c_ulonglong, 'Handle' ),
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'MatchSize' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'EndSymbolMatch',
              ( ['in'], c_ulonglong, 'Handle' )),
    COMMETHOD([], HRESULT, 'Reload',
              ( ['in'], STRING, 'Module' )),
    COMMETHOD([], HRESULT, 'GetSymbolPath',
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'PathSize' )),
    COMMETHOD([], HRESULT, 'SetSymbolPath',
              ( ['in'], STRING, 'Path' )),
    COMMETHOD([], HRESULT, 'AppendSymbolPath',
              ( ['in'], STRING, 'Addition' )),
    COMMETHOD([], HRESULT, 'GetImagePath',
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'PathSize' )),
    COMMETHOD([], HRESULT, 'SetImagePath',
              ( ['in'], STRING, 'Path' )),
    COMMETHOD([], HRESULT, 'AppendImagePath',
              ( ['in'], STRING, 'Addition' )),
    COMMETHOD([], HRESULT, 'GetSourcePath',
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'PathSize' )),
    COMMETHOD([], HRESULT, 'GetSourcePathElement',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ElementSize' )),
    COMMETHOD([], HRESULT, 'SetSourcePath',
              ( ['in'], STRING, 'Path' )),
    COMMETHOD([], HRESULT, 'AppendSourcePath',
              ( ['in'], STRING, 'Addition' )),
    COMMETHOD([], HRESULT, 'FindSourceFile',
              ( ['in'], c_ulong, 'StartElement' ),
              ( ['in'], STRING, 'File' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'FoundElement' ),
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'FoundSize' )),
    COMMETHOD([], HRESULT, 'GetSourceFileLineOffsets',
              ( ['in'], STRING, 'File' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferLines' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'FileLines' )),
]
################################################################
## code template for IDebugSymbols implementation
##class IDebugSymbols_Impl(object):
##    def GetSymbolOptions(self):
##        '-no docstring-'
##        #return Options
##
##    def FindSourceFile(self, StartElement, File, Flags, BufferSize):
##        '-no docstring-'
##        #return FoundElement, Buffer, FoundSize
##
##    def GetOffsetTypeId(self, Offset):
##        '-no docstring-'
##        #return TypeId, Module
##
##    def GetTypeId(self, Module, Name):
##        '-no docstring-'
##        #return TypeId
##
##    def GetSourcePath(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, PathSize
##
##    def GetOffsetByName(self, Symbol):
##        '-no docstring-'
##        #return Offset
##
##    def WriteTypedDataVirtual(self, Offset, Module, TypeId, Buffer, BufferSize):
##        '-no docstring-'
##        #return BytesWritten
##
##    def SetSourcePath(self, Path):
##        '-no docstring-'
##        #return 
##
##    def RemoveSymbolOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def ReadTypedDataPhysical(self, Offset, Module, TypeId, BufferSize):
##        '-no docstring-'
##        #return Buffer, BytesRead
##
##    def GetSymbolPath(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, PathSize
##
##    def AppendSymbolPath(self, Addition):
##        '-no docstring-'
##        #return 
##
##    def GetModuleByOffset(self, Offset, StartIndex):
##        '-no docstring-'
##        #return Index, Base
##
##    def GetNextSymbolMatch(self, Handle, BufferSize):
##        '-no docstring-'
##        #return Buffer, MatchSize, Offset
##
##    def GetTypeName(self, Module, TypeId, NameBufferSize):
##        '-no docstring-'
##        #return NameBuffer, NameSize
##
##    def GetSymbolTypeId(self, Symbol):
##        '-no docstring-'
##        #return TypeId, Module
##
##    def GetLineByOffset(self, Offset, FileBufferSize):
##        '-no docstring-'
##        #return Line, FileBuffer, FileSize, Displacement
##
##    def AppendSourcePath(self, Addition):
##        '-no docstring-'
##        #return 
##
##    def GetImagePath(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, PathSize
##
##    def GetSourceFileLineOffsets(self, File, BufferLines):
##        '-no docstring-'
##        #return Buffer, FileLines
##
##    def WriteTypedDataPhysical(self, Offset, Module, TypeId, Buffer, BufferSize):
##        '-no docstring-'
##        #return BytesWritten
##
##    def StartSymbolMatch(self, Pattern):
##        '-no docstring-'
##        #return Handle
##
##    def SetScope(self, InstructionOffset, ScopeFrame, ScopeContext, ScopeContextSize):
##        '-no docstring-'
##        #return 
##
##    def GetScopeSymbolGroup(self, Flags, Update):
##        '-no docstring-'
##        #return Symbols
##
##    def AddSymbolOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def GetNearNameByOffset(self, Offset, Delta, NameBufferSize):
##        '-no docstring-'
##        #return NameBuffer, NameSize, Displacement
##
##    def GetFieldOffset(self, Module, TypeId, Field):
##        '-no docstring-'
##        #return Offset
##
##    def GetScope(self, ScopeContextSize):
##        '-no docstring-'
##        #return InstructionOffset, ScopeFrame, ScopeContext
##
##    def SetImagePath(self, Path):
##        '-no docstring-'
##        #return 
##
##    def AppendImagePath(self, Addition):
##        '-no docstring-'
##        #return 
##
##    def Reload(self, Module):
##        '-no docstring-'
##        #return 
##
##    def GetModuleNames(self, Index, Base, ImageNameBufferSize, ModuleNameBufferSize, LoadedImageNameBufferSize):
##        '-no docstring-'
##        #return ImageNameBuffer, ImageNameSize, ModuleNameBuffer, ModuleNameSize, LoadedImageNameBuffer, LoadedImageNameSize
##
##    def GetTypeSize(self, Module, TypeId):
##        '-no docstring-'
##        #return Size
##
##    def EndSymbolMatch(self, Handle):
##        '-no docstring-'
##        #return 
##
##    def OutputTypedDataVirtual(self, OutputControl, Offset, Module, TypeId, Flags):
##        '-no docstring-'
##        #return 
##
##    def GetModuleByIndex(self, Index):
##        '-no docstring-'
##        #return Base
##
##    def GetOffsetByLine(self, Line, File):
##        '-no docstring-'
##        #return Offset
##
##    def CreateSymbolGroup(self):
##        '-no docstring-'
##        #return Group
##
##    def ReadTypedDataVirtual(self, Offset, Module, TypeId, BufferSize):
##        '-no docstring-'
##        #return Buffer, BytesRead
##
##    def ResetScope(self):
##        '-no docstring-'
##        #return 
##
##    def GetNumberModules(self):
##        '-no docstring-'
##        #return Loaded, Unloaded
##
##    def GetNameByOffset(self, Offset, NameBufferSize):
##        '-no docstring-'
##        #return NameBuffer, NameSize, Displacement
##
##    def GetSourcePathElement(self, Index, BufferSize):
##        '-no docstring-'
##        #return Buffer, ElementSize
##
##    def GetModuleParameters(self, Count, Bases, Start):
##        '-no docstring-'
##        #return Params
##
##    def SetSymbolPath(self, Path):
##        '-no docstring-'
##        #return 
##
##    def GetSymbolModule(self, Symbol):
##        '-no docstring-'
##        #return Base
##
##    def GetModuleByModuleName(self, Name, StartIndex):
##        '-no docstring-'
##        #return Index, Base
##
##    def SetSymbolOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def OutputTypedDataPhysical(self, OutputControl, Offset, Module, TypeId, Flags):
##        '-no docstring-'
##        #return 
##


# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0064_0028'
DEBUG_SRCFILE_SYMBOL_TOKEN_SOURCE_COMMAND_WIDE = 1
__MIDL___MIDL_itf_DbgEng_0001_0064_0028 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0064_0029'
DEBUG_SYMINFO_BREAKPOINT_SOURCE_LINE = 0
__MIDL___MIDL_itf_DbgEng_0001_0064_0029 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0064_0030'
DEBUG_SYMINFO_IMAGEHLP_MODULEW64 = 1
__MIDL___MIDL_itf_DbgEng_0001_0064_0030 = c_int # enum
class _DEBUG_SYMBOL_SOURCE_ENTRY(Structure):
    pass
_DEBUG_SYMBOL_SOURCE_ENTRY._fields_ = [
    ('ModuleBase', c_ulonglong),
    ('Offset', c_ulonglong),
    ('FileNameId', c_ulonglong),
    ('EngineInternal', c_ulonglong),
    ('Size', c_ulong),
    ('Flags', c_ulong),
    ('FileNameSize', c_ulong),
    ('StartLine', c_ulong),
    ('EndLine', c_ulong),
    ('StartColumn', c_ulong),
    ('EndColumn', c_ulong),
    ('Reserved', c_ulong),
]
assert sizeof(_DEBUG_SYMBOL_SOURCE_ENTRY) == 64, sizeof(_DEBUG_SYMBOL_SOURCE_ENTRY)
assert alignment(_DEBUG_SYMBOL_SOURCE_ENTRY) == 8, alignment(_DEBUG_SYMBOL_SOURCE_ENTRY)

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0064_0031'
DEBUG_SYMINFO_GET_SYMBOL_NAME_BY_OFFSET_AND_TAG_WIDE = 2
__MIDL___MIDL_itf_DbgEng_0001_0064_0031 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0064_0032'
DEBUG_SYMINFO_GET_MODULE_SYMBOL_NAMES_AND_OFFSETS = 3
__MIDL___MIDL_itf_DbgEng_0001_0064_0032 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0064_0033'
DEBUG_SYSOBJINFO_THREAD_BASIC_INFORMATION = 0
__MIDL___MIDL_itf_DbgEng_0001_0064_0033 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0064_0034'
DEBUG_SYSOBJINFO_THREAD_NAME_WIDE = 1
__MIDL___MIDL_itf_DbgEng_0001_0064_0034 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0064_0035'
DEBUG_SYSOBJINFO_CURRENT_PROCESS_COOKIE = 2
__MIDL___MIDL_itf_DbgEng_0001_0064_0035 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0091_0025'
DEBUG_OUTTYPE_ADDRESS_AT_END = 131072
__MIDL___MIDL_itf_DbgEng_0001_0091_0025 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0064_0036'
DEBUG_TBINFO_EXIT_STATUS = 1
__MIDL___MIDL_itf_DbgEng_0001_0064_0036 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0064_0037'
DEBUG_TBINFO_PRIORITY_CLASS = 2
__MIDL___MIDL_itf_DbgEng_0001_0064_0037 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0064_0038'
DEBUG_TBINFO_PRIORITY = 4
__MIDL___MIDL_itf_DbgEng_0001_0064_0038 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0064_0039'
DEBUG_TBINFO_TIMES = 8
__MIDL___MIDL_itf_DbgEng_0001_0064_0039 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0016'
DEBUG_ATTACH_NONINVASIVE = 1
__MIDL___MIDL_itf_DbgEng_0001_0068_0016 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0064_0040'
DEBUG_TBINFO_START_OFFSET = 16
__MIDL___MIDL_itf_DbgEng_0001_0064_0040 = c_int # enum
class _DEBUG_SYMBOL_ENTRY(Structure):
    pass
_DEBUG_SYMBOL_ENTRY._fields_ = [
    ('ModuleBase', c_ulonglong),
    ('Offset', c_ulonglong),
    ('Id', c_ulonglong),
    ('Arg64', c_ulonglong),
    ('Size', c_ulong),
    ('Flags', c_ulong),
    ('TypeId', c_ulong),
    ('NameSize', c_ulong),
    ('Token', c_ulong),
    ('Tag', c_ulong),
    ('Arg32', c_ulong),
    ('Reserved', c_ulong),
]
assert sizeof(_DEBUG_SYMBOL_ENTRY) == 64, sizeof(_DEBUG_SYMBOL_ENTRY)
assert alignment(_DEBUG_SYMBOL_ENTRY) == 8, alignment(_DEBUG_SYMBOL_ENTRY)

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0000_0000_0012'
CREATE_NEW_PROCESS_GROUP = 512
__MIDL___MIDL_itf_DbgEng_0000_0000_0012 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0064_0042'
DEBUG_TBINFO_ALL = 63
__MIDL___MIDL_itf_DbgEng_0001_0064_0042 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0027'
DEBUG_DATA_MmSystemCacheEndAddr = 176
__MIDL___MIDL_itf_DbgEng_0001_0077_0027 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0001'
DEBUG_ATTACH_KERNEL_CONNECTION = 0
__MIDL___MIDL_itf_DbgEng_0001_0068_0001 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0091_0015'
DEBUG_SYMTYPE_DIA = 7
__MIDL___MIDL_itf_DbgEng_0001_0091_0015 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0098_0014'
DEBUG_EXT_PVALUE_DEFAULT = 0
__MIDL___MIDL_itf_DbgEng_0001_0098_0014 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0066_0004'
DEBUG_BREAKPOINT_GO_ONLY = 1
__MIDL___MIDL_itf_DbgEng_0001_0066_0004 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0066_0006'
DEBUG_BREAKPOINT_ENABLED = 4
__MIDL___MIDL_itf_DbgEng_0001_0066_0006 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0066_0002'
DEBUG_BREAKPOINT_DATA = 1
__MIDL___MIDL_itf_DbgEng_0001_0066_0002 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0066_0001'
DEBUG_BREAKPOINT_CODE = 0
__MIDL___MIDL_itf_DbgEng_0001_0066_0001 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0066_0003'
DEBUG_BREAKPOINT_TIME = 2
__MIDL___MIDL_itf_DbgEng_0001_0066_0003 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0026'
DEBUG_OUTCTL_AMBIENT_DML = -2
__MIDL___MIDL_itf_DbgEng_0001_0073_0026 = c_int # enum
class IDebugRegisters2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'IDebugRegisters2'
    _iid_ = GUID('{1656AFA9-19C6-4E3A-97E7-5DC9160CF9C4}')
    _idlflags_ = []
IDebugRegisters2._methods_ = [
    COMMETHOD([], HRESULT, 'GetNumberRegisters',
              ( ['out'], POINTER(c_ulong), 'Number' )),
    COMMETHOD([], HRESULT, 'GetDescription',
              ( ['in'], c_ulong, 'Register' ),
              ( ['in', 'out', 'optional'], STRING, 'NameBuffer' ),
              ( ['in', 'optional'], c_ulong, 'NameBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'NameSize' ),
              ( ['out', 'optional'], POINTER(_DEBUG_REGISTER_DESCRIPTION), 'Desc' )),
    COMMETHOD([], HRESULT, 'GetIndexByName',
              ( ['in'], STRING, 'Name' ),
              ( ['out'], POINTER(c_ulong), 'Index' )),
    COMMETHOD([], HRESULT, 'GetValue',
              ( ['in'], c_ulong, 'Register' ),
              ( ['out'], POINTER(_DEBUG_VALUE), 'Value' )),
    COMMETHOD([], HRESULT, 'SetValue',
              ( ['in'], c_ulong, 'Register' ),
              ( ['in'], POINTER(_DEBUG_VALUE), 'Value' )),
    COMMETHOD([], HRESULT, 'GetValues',
              ( ['in'], c_ulong, 'Count' ),
              ( ['in', 'optional'], POINTER(c_ulong), 'Indices' ),
              ( ['in', 'optional'], c_ulong, 'Start' ),
              ( ['out', 'optional'], POINTER(_DEBUG_VALUE), 'Values' )),
    COMMETHOD([], HRESULT, 'SetValues',
              ( ['in'], c_ulong, 'Count' ),
              ( ['in', 'optional'], POINTER(c_ulong), 'Indices' ),
              ( ['in', 'optional'], c_ulong, 'Start' ),
              ( ['in', 'optional'], POINTER(_DEBUG_VALUE), 'Values' )),
    COMMETHOD([], HRESULT, 'OutputRegisters',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'GetInstructionOffset',
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'GetStackOffset',
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'GetFrameOffset',
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'GetDescriptionWide',
              ( ['in'], c_ulong, 'Register' ),
              ( ['out', 'optional'], POINTER(c_ushort), 'NameBuffer' ),
              ( ['in', 'optional'], c_ulong, 'NameBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'NameSize' ),
              ( ['out', 'optional'], POINTER(_DEBUG_REGISTER_DESCRIPTION), 'Desc' )),
    COMMETHOD([], HRESULT, 'GetIndexByNameWide',
              ( ['in'], POINTER(c_ushort), 'Name' ),
              ( ['out'], POINTER(c_ulong), 'Index' )),
    COMMETHOD([], HRESULT, 'GetNumberPseudoRegisters',
              ( ['out'], POINTER(c_ulong), 'Number' )),
    COMMETHOD([], HRESULT, 'GetPseudoDescription',
              ( ['in'], c_ulong, 'Register' ),
              ( ['in', 'out', 'optional'], STRING, 'NameBuffer' ),
              ( ['in', 'optional'], c_ulong, 'NameBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'NameSize' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'TypeModule' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'TypeId' )),
    COMMETHOD([], HRESULT, 'GetPseudoDescriptionWide',
              ( ['in'], c_ulong, 'Register' ),
              ( ['out', 'optional'], POINTER(c_ushort), 'NameBuffer' ),
              ( ['in', 'optional'], c_ulong, 'NameBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'NameSize' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'TypeModule' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'TypeId' )),
    COMMETHOD([], HRESULT, 'GetPseudoIndexByName',
              ( ['in'], STRING, 'Name' ),
              ( ['out'], POINTER(c_ulong), 'Index' )),
    COMMETHOD([], HRESULT, 'GetPseudoIndexByNameWide',
              ( ['in'], POINTER(c_ushort), 'Name' ),
              ( ['out'], POINTER(c_ulong), 'Index' )),
    COMMETHOD([], HRESULT, 'GetPseudoValues',
              ( ['in'], c_ulong, 'Source' ),
              ( ['in'], c_ulong, 'Count' ),
              ( ['in', 'optional'], POINTER(c_ulong), 'Indices' ),
              ( ['in', 'optional'], c_ulong, 'Start' ),
              ( ['out', 'optional'], POINTER(_DEBUG_VALUE), 'Values' )),
    COMMETHOD([], HRESULT, 'SetPseudoValues',
              ( ['in'], c_ulong, 'Source' ),
              ( ['in'], c_ulong, 'Count' ),
              ( ['in', 'optional'], POINTER(c_ulong), 'Indices' ),
              ( ['in', 'optional'], c_ulong, 'Start' ),
              ( ['in', 'optional'], POINTER(_DEBUG_VALUE), 'Values' )),
    COMMETHOD([], HRESULT, 'GetValues2',
              ( ['in'], c_ulong, 'Source' ),
              ( ['in'], c_ulong, 'Count' ),
              ( ['in', 'optional'], POINTER(c_ulong), 'Indices' ),
              ( ['in', 'optional'], c_ulong, 'Start' ),
              ( ['out', 'optional'], POINTER(_DEBUG_VALUE), 'Values' )),
    COMMETHOD([], HRESULT, 'SetValues2',
              ( ['in'], c_ulong, 'Source' ),
              ( ['in'], c_ulong, 'Count' ),
              ( ['in', 'optional'], POINTER(c_ulong), 'Indices' ),
              ( ['in', 'optional'], c_ulong, 'Start' ),
              ( ['in', 'optional'], POINTER(_DEBUG_VALUE), 'Values' )),
    COMMETHOD([], HRESULT, 'OutputRegisters2',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], c_ulong, 'Source' ),
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'GetInstructionOffset2',
              ( ['in'], c_ulong, 'Source' ),
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'GetStackOffset2',
              ( ['in'], c_ulong, 'Source' ),
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'GetFrameOffset2',
              ( ['in'], c_ulong, 'Source' ),
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
]
################################################################
## code template for IDebugRegisters2 implementation
##class IDebugRegisters2_Impl(object):
##    def GetInstructionOffset2(self, Source):
##        '-no docstring-'
##        #return Offset
##
##    def GetDescription(self, Register, NameBufferSize):
##        '-no docstring-'
##        #return NameBuffer, NameSize, Desc
##
##    def GetStackOffset(self):
##        '-no docstring-'
##        #return Offset
##
##    def GetIndexByName(self, Name):
##        '-no docstring-'
##        #return Index
##
##    def GetValue(self, Register):
##        '-no docstring-'
##        #return Value
##
##    def GetInstructionOffset(self):
##        '-no docstring-'
##        #return Offset
##
##    def GetDescriptionWide(self, Register, NameBufferSize):
##        '-no docstring-'
##        #return NameBuffer, NameSize, Desc
##
##    def GetFrameOffset(self):
##        '-no docstring-'
##        #return Offset
##
##    def GetValues(self, Count, Indices, Start):
##        '-no docstring-'
##        #return Values
##
##    def GetPseudoDescription(self, Register, NameBufferSize):
##        '-no docstring-'
##        #return NameBuffer, NameSize, TypeModule, TypeId
##
##    def GetPseudoIndexByNameWide(self, Name):
##        '-no docstring-'
##        #return Index
##
##    def GetPseudoValues(self, Source, Count, Indices, Start):
##        '-no docstring-'
##        #return Values
##
##    def GetPseudoIndexByName(self, Name):
##        '-no docstring-'
##        #return Index
##
##    def GetIndexByNameWide(self, Name):
##        '-no docstring-'
##        #return Index
##
##    def GetValues2(self, Source, Count, Indices, Start):
##        '-no docstring-'
##        #return Values
##
##    def SetPseudoValues(self, Source, Count, Indices, Start, Values):
##        '-no docstring-'
##        #return 
##
##    def OutputRegisters(self, OutputControl, Flags):
##        '-no docstring-'
##        #return 
##
##    def GetNumberRegisters(self):
##        '-no docstring-'
##        #return Number
##
##    def GetFrameOffset2(self, Source):
##        '-no docstring-'
##        #return Offset
##
##    def SetValue(self, Register, Value):
##        '-no docstring-'
##        #return 
##
##    def GetNumberPseudoRegisters(self):
##        '-no docstring-'
##        #return Number
##
##    def SetValues2(self, Source, Count, Indices, Start, Values):
##        '-no docstring-'
##        #return 
##
##    def GetStackOffset2(self, Source):
##        '-no docstring-'
##        #return Offset
##
##    def OutputRegisters2(self, OutputControl, Source, Flags):
##        '-no docstring-'
##        #return 
##
##    def GetPseudoDescriptionWide(self, Register, NameBufferSize):
##        '-no docstring-'
##        #return NameBuffer, NameSize, TypeModule, TypeId
##
##    def SetValues(self, Count, Indices, Start, Values):
##        '-no docstring-'
##        #return 
##


# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0066_0007'
DEBUG_BREAKPOINT_ADDER_ONLY = 8
__MIDL___MIDL_itf_DbgEng_0001_0066_0007 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0111'
DEBUG_DATA_PaeEnabled = 100000
__MIDL___MIDL_itf_DbgEng_0001_0077_0111 = c_int # enum
class IDebugSymbolGroup2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'IDebugSymbolGroup2'
    _iid_ = GUID('{6A7CCC5F-FB5E-4DCC-B41C-6C20307BCCC7}')
    _idlflags_ = []
IDebugSymbolGroup2._methods_ = [
    COMMETHOD([], HRESULT, 'GetNumberSymbols',
              ( ['out'], POINTER(c_ulong), 'Number' )),
    COMMETHOD([], HRESULT, 'AddSymbol',
              ( ['in'], STRING, 'Name' ),
              ( ['in', 'out'], POINTER(c_ulong), 'Index' )),
    COMMETHOD([], HRESULT, 'RemoveSymbolByName',
              ( ['in'], STRING, 'Name' )),
    COMMETHOD([], HRESULT, 'RemoveSymbolByIndex',
              ( ['in'], c_ulong, 'Index' )),
    COMMETHOD([], HRESULT, 'GetSymbolName',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'NameSize' )),
    COMMETHOD([], HRESULT, 'GetSymbolParameters',
              ( ['in'], c_ulong, 'Start' ),
              ( ['in'], c_ulong, 'Count' ),
              ( ['out'], POINTER(_DEBUG_SYMBOL_PARAMETERS), 'Params' )),
    COMMETHOD([], HRESULT, 'ExpandSymbol',
              ( ['in'], c_ulong, 'Index' ),
              ( ['in'], c_int, 'Expand' )),
    COMMETHOD([], HRESULT, 'OutputSymbols',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['in'], c_ulong, 'Start' ),
              ( ['in'], c_ulong, 'Count' )),
    COMMETHOD([], HRESULT, 'WriteSymbol',
              ( ['in'], c_ulong, 'Index' ),
              ( ['in'], STRING, 'Value' )),
    COMMETHOD([], HRESULT, 'OutputAsType',
              ( ['in'], c_ulong, 'Index' ),
              ( ['in'], STRING, 'Type' )),
    COMMETHOD([], HRESULT, 'AddSymbolWide',
              ( ['in'], POINTER(c_ushort), 'Name' ),
              ( ['in', 'out'], POINTER(c_ulong), 'Index' )),
    COMMETHOD([], HRESULT, 'RemoveSymbolByNameWide',
              ( ['in'], POINTER(c_ushort), 'Name' )),
    COMMETHOD([], HRESULT, 'GetSymbolNameWide',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out', 'optional'], POINTER(c_ushort), 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'NameSize' )),
    COMMETHOD([], HRESULT, 'WriteSymbolWide',
              ( ['in'], c_ulong, 'Index' ),
              ( ['in'], POINTER(c_ushort), 'Value' )),
    COMMETHOD([], HRESULT, 'OutputAsTypeWide',
              ( ['in'], c_ulong, 'Index' ),
              ( ['in'], POINTER(c_ushort), 'Type' )),
    COMMETHOD([], HRESULT, 'GetSymbolTypeName',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'NameSize' )),
    COMMETHOD([], HRESULT, 'GetSymbolTypeNameWide',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out', 'optional'], POINTER(c_ushort), 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'NameSize' )),
    COMMETHOD([], HRESULT, 'GetSymbolSize',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out'], POINTER(c_ulong), 'Size' )),
    COMMETHOD([], HRESULT, 'GetSymbolOffset',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'GetSymbolRegister',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out'], POINTER(c_ulong), 'Register' )),
    COMMETHOD([], HRESULT, 'GetSymbolValueText',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'NameSize' )),
    COMMETHOD([], HRESULT, 'GetSymbolValueTextWide',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out', 'optional'], POINTER(c_ushort), 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'NameSize' )),
    COMMETHOD([], HRESULT, 'GetSymbolEntryInformation',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out'], POINTER(_DEBUG_SYMBOL_ENTRY), 'Entry' )),
]
################################################################
## code template for IDebugSymbolGroup2 implementation
##class IDebugSymbolGroup2_Impl(object):
##    def RemoveSymbolByNameWide(self, Name):
##        '-no docstring-'
##        #return 
##
##    def GetSymbolName(self, Index, BufferSize):
##        '-no docstring-'
##        #return Buffer, NameSize
##
##    def RemoveSymbolByIndex(self, Index):
##        '-no docstring-'
##        #return 
##
##    def GetNumberSymbols(self):
##        '-no docstring-'
##        #return Number
##
##    def RemoveSymbolByName(self, Name):
##        '-no docstring-'
##        #return 
##
##    def WriteSymbol(self, Index, Value):
##        '-no docstring-'
##        #return 
##
##    def OutputSymbols(self, OutputControl, Flags, Start, Count):
##        '-no docstring-'
##        #return 
##
##    def ExpandSymbol(self, Index, Expand):
##        '-no docstring-'
##        #return 
##
##    def GetSymbolSize(self, Index):
##        '-no docstring-'
##        #return Size
##
##    def GetSymbolValueTextWide(self, Index, BufferSize):
##        '-no docstring-'
##        #return Buffer, NameSize
##
##    def GetSymbolRegister(self, Index):
##        '-no docstring-'
##        #return Register
##
##    def AddSymbolWide(self, Name):
##        '-no docstring-'
##        #return Index
##
##    def GetSymbolTypeNameWide(self, Index, BufferSize):
##        '-no docstring-'
##        #return Buffer, NameSize
##
##    def OutputAsType(self, Index, Type):
##        '-no docstring-'
##        #return 
##
##    def GetSymbolValueText(self, Index, BufferSize):
##        '-no docstring-'
##        #return Buffer, NameSize
##
##    def GetSymbolTypeName(self, Index, BufferSize):
##        '-no docstring-'
##        #return Buffer, NameSize
##
##    def GetSymbolOffset(self, Index):
##        '-no docstring-'
##        #return Offset
##
##    def GetSymbolEntryInformation(self, Index):
##        '-no docstring-'
##        #return Entry
##
##    def WriteSymbolWide(self, Index, Value):
##        '-no docstring-'
##        #return 
##
##    def OutputAsTypeWide(self, Index, Type):
##        '-no docstring-'
##        #return 
##
##    def GetSymbolParameters(self, Start, Count):
##        '-no docstring-'
##        #return Params
##
##    def AddSymbol(self, Name):
##        '-no docstring-'
##        #return Index
##
##    def GetSymbolNameWide(self, Index, BufferSize):
##        '-no docstring-'
##        #return Buffer, NameSize
##

_DEBUG_EXCEPTION_FILTER_PARAMETERS._fields_ = [
    ('ExecutionOption', c_ulong),
    ('ContinueOption', c_ulong),
    ('TextSize', c_ulong),
    ('CommandSize', c_ulong),
    ('SecondCommandSize', c_ulong),
    ('ExceptionCode', c_ulong),
]
assert sizeof(_DEBUG_EXCEPTION_FILTER_PARAMETERS) == 24, sizeof(_DEBUG_EXCEPTION_FILTER_PARAMETERS)
assert alignment(_DEBUG_EXCEPTION_FILTER_PARAMETERS) == 4, alignment(_DEBUG_EXCEPTION_FILTER_PARAMETERS)

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0066_0008'
DEBUG_BREAKPOINT_ONE_SHOT = 16
__MIDL___MIDL_itf_DbgEng_0001_0066_0008 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0066_0009'
DEBUG_BREAK_READ = 1
__MIDL___MIDL_itf_DbgEng_0001_0066_0009 = c_int # enum
IDebugInputCallbacks._methods_ = [
    COMMETHOD([], HRESULT, 'StartInput',
              ( ['in'], c_ulong, 'BufferSize' )),
    COMMETHOD([], HRESULT, 'EndInput'),
]
################################################################
## code template for IDebugInputCallbacks implementation
##class IDebugInputCallbacks_Impl(object):
##    def EndInput(self):
##        '-no docstring-'
##        #return 
##
##    def StartInput(self, BufferSize):
##        '-no docstring-'
##        #return 
##


# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0066_0010'
DEBUG_BREAK_WRITE = 2
__MIDL___MIDL_itf_DbgEng_0001_0066_0010 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0066_0011'
DEBUG_BREAK_EXECUTE = 4
__MIDL___MIDL_itf_DbgEng_0001_0066_0011 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0000_0000_0010'
HIGH_PRIORITY_CLASS = 128
__MIDL___MIDL_itf_DbgEng_0000_0000_0010 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0066_0012'
DEBUG_BREAK_IO = 8
__MIDL___MIDL_itf_DbgEng_0001_0066_0012 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0007'
DEBUG_GET_PROC_SERVICE_NAME = 4
__MIDL___MIDL_itf_DbgEng_0001_0068_0007 = c_int # enum
IDebugEventCallbacks._methods_ = [
    COMMETHOD([], HRESULT, 'GetInterestMask',
              ( ['out'], POINTER(c_ulong), 'Mask' )),
    COMMETHOD([], HRESULT, 'Breakpoint',
              ( ['in'], POINTER(IDebugBreakpoint), 'Bp' )),
    COMMETHOD([], HRESULT, 'Exception',
              ( ['in'], POINTER(_EXCEPTION_RECORD64), 'Exception' ),
              ( ['in'], c_ulong, 'FirstChance' )),
    COMMETHOD([], HRESULT, 'CreateThread',
              ( ['in'], c_ulonglong, 'Handle' ),
              ( ['in'], c_ulonglong, 'DataOffset' ),
              ( ['in'], c_ulonglong, 'StartOffset' )),
    COMMETHOD([], HRESULT, 'ExitThread',
              ( ['in'], c_ulong, 'ExitCode' )),
    COMMETHOD([], HRESULT, 'CreateProcess',
              ( ['in'], c_ulonglong, 'ImageFileHandle' ),
              ( ['in'], c_ulonglong, 'Handle' ),
              ( ['in'], c_ulonglong, 'BaseOffset' ),
              ( ['in'], c_ulong, 'ModuleSize' ),
              ( ['in', 'optional'], STRING, 'ModuleName' ),
              ( ['in', 'optional'], STRING, 'ImageName' ),
              ( ['in', 'optional'], c_ulong, 'CheckSum' ),
              ( ['in', 'optional'], c_ulong, 'TimeDateStamp' ),
              ( ['in', 'optional'], c_ulonglong, 'InitialThreadHandle' ),
              ( ['in', 'optional'], c_ulonglong, 'ThreadDataOffset' ),
              ( ['in', 'optional'], c_ulonglong, 'StartOffset' )),
    COMMETHOD([], HRESULT, 'ExitProcess',
              ( ['in'], c_ulong, 'ExitCode' )),
    COMMETHOD([], HRESULT, 'LoadModule',
              ( ['in'], c_ulonglong, 'ImageFileHandle' ),
              ( ['in'], c_ulonglong, 'BaseOffset' ),
              ( ['in'], c_ulong, 'ModuleSize' ),
              ( ['in', 'optional'], STRING, 'ModuleName' ),
              ( ['in', 'optional'], STRING, 'ImageName' ),
              ( ['in', 'optional'], c_ulong, 'CheckSum' ),
              ( ['in', 'optional'], c_ulong, 'TimeDateStamp' )),
    COMMETHOD([], HRESULT, 'UnloadModule',
              ( ['in', 'optional'], STRING, 'ImageBaseName' ),
              ( ['in', 'optional'], c_ulonglong, 'BaseOffset' )),
    COMMETHOD([], HRESULT, 'SystemError',
              ( ['in'], c_ulong, 'Error' ),
              ( ['in'], c_ulong, 'Level' )),
    COMMETHOD([], HRESULT, 'SessionStatus',
              ( ['in'], c_ulong, 'Status' )),
    COMMETHOD([], HRESULT, 'ChangeDebuggeeState',
              ( ['in'], c_ulong, 'Flags' ),
              ( ['in'], c_ulonglong, 'Argument' )),
    COMMETHOD([], HRESULT, 'ChangeEngineState',
              ( ['in'], c_ulong, 'Flags' ),
              ( ['in'], c_ulonglong, 'Argument' )),
    COMMETHOD([], HRESULT, 'ChangeSymbolState',
              ( ['in'], c_ulong, 'Flags' ),
              ( ['in'], c_ulonglong, 'Argument' )),
]
################################################################
## code template for IDebugEventCallbacks implementation
##class IDebugEventCallbacks_Impl(object):
##    def Exception(self, Exception, FirstChance):
##        '-no docstring-'
##        #return 
##
##    def CreateThread(self, Handle, DataOffset, StartOffset):
##        '-no docstring-'
##        #return 
##
##    def ChangeSymbolState(self, Flags, Argument):
##        '-no docstring-'
##        #return 
##
##    def CreateProcess(self, ImageFileHandle, Handle, BaseOffset, ModuleSize, ModuleName, ImageName, CheckSum, TimeDateStamp, InitialThreadHandle, ThreadDataOffset, StartOffset):
##        '-no docstring-'
##        #return 
##
##    def ExitProcess(self, ExitCode):
##        '-no docstring-'
##        #return 
##
##    def GetInterestMask(self):
##        '-no docstring-'
##        #return Mask
##
##    def LoadModule(self, ImageFileHandle, BaseOffset, ModuleSize, ModuleName, ImageName, CheckSum, TimeDateStamp):
##        '-no docstring-'
##        #return 
##
##    def Breakpoint(self, Bp):
##        '-no docstring-'
##        #return 
##
##    def ChangeEngineState(self, Flags, Argument):
##        '-no docstring-'
##        #return 
##
##    def UnloadModule(self, ImageBaseName, BaseOffset):
##        '-no docstring-'
##        #return 
##
##    def ExitThread(self, ExitCode):
##        '-no docstring-'
##        #return 
##
##    def SystemError(self, Error, Level):
##        '-no docstring-'
##        #return 
##
##    def ChangeDebuggeeState(self, Flags, Argument):
##        '-no docstring-'
##        #return 
##
##    def SessionStatus(self, Status):
##        '-no docstring-'
##        #return 
##


# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0009'
DEBUG_PROC_DESC_NO_PATHS = 1
__MIDL___MIDL_itf_DbgEng_0001_0068_0009 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0003'
DEBUG_ATTACH_EXDI_DRIVER = 2
__MIDL___MIDL_itf_DbgEng_0001_0068_0003 = c_int # enum
_DEBUG_SYMBOL_PARAMETERS._fields_ = [
    ('Module', c_ulonglong),
    ('TypeId', c_ulong),
    ('ParentSymbol', c_ulong),
    ('SubElements', c_ulong),
    ('Flags', c_ulong),
    ('Reserved', c_ulonglong),
]
assert sizeof(_DEBUG_SYMBOL_PARAMETERS) == 32, sizeof(_DEBUG_SYMBOL_PARAMETERS)
assert alignment(_DEBUG_SYMBOL_PARAMETERS) == 8, alignment(_DEBUG_SYMBOL_PARAMETERS)

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0005'
DEBUG_GET_PROC_FULL_MATCH = 1
__MIDL___MIDL_itf_DbgEng_0001_0068_0005 = c_int # enum
_MEMORY_BASIC_INFORMATION64._fields_ = [
    ('BaseAddress', c_ulonglong),
    ('AllocationBase', c_ulonglong),
    ('AllocationProtect', c_ulong),
    ('__alignment1', c_ulong),
    ('RegionSize', c_ulonglong),
    ('State', c_ulong),
    ('Protect', c_ulong),
    ('Type', c_ulong),
    ('__alignment2', c_ulong),
]
assert sizeof(_MEMORY_BASIC_INFORMATION64) == 48, sizeof(_MEMORY_BASIC_INFORMATION64)
assert alignment(_MEMORY_BASIC_INFORMATION64) == 8, alignment(_MEMORY_BASIC_INFORMATION64)

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0006'
DEBUG_GET_PROC_ONLY_MATCH = 2
__MIDL___MIDL_itf_DbgEng_0001_0068_0006 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0002'
DEBUG_ATTACH_LOCAL_KERNEL = 1
__MIDL___MIDL_itf_DbgEng_0001_0068_0002 = c_int # enum
class IDebugSystemObjects3(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'IDebugSystemObjects3'
    _iid_ = GUID('{E9676E2F-E286-4EA3-B0F9-DFE5D9FC330E}')
    _idlflags_ = []
IDebugSystemObjects3._methods_ = [
    COMMETHOD([], HRESULT, 'GetEventThread',
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetEventProcess',
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetCurrentThreadId',
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'SetCurrentThreadId',
              ( ['in'], c_ulong, 'Id' )),
    COMMETHOD([], HRESULT, 'GetCurrentProcessId',
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'SetCurrentProcessId',
              ( ['in'], c_ulong, 'Id' )),
    COMMETHOD([], HRESULT, 'GetNumberThreads',
              ( ['out'], POINTER(c_ulong), 'Number' )),
    COMMETHOD([], HRESULT, 'GetTotalNumberThreads',
              ( ['out'], POINTER(c_ulong), 'Total' ),
              ( ['out'], POINTER(c_ulong), 'LargestProcess' )),
    COMMETHOD([], HRESULT, 'GetThreadIdsByIndex',
              ( ['in'], c_ulong, 'Start' ),
              ( ['in'], c_ulong, 'Count' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'Ids' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'SysIds' )),
    COMMETHOD([], HRESULT, 'GetThreadIdByProcessor',
              ( ['in'], c_ulong, 'Processor' ),
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetCurrentThreadDataOffset',
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'GetThreadIdByDataOffset',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetCurrentThreadTeb',
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'GetThreadIdByTeb',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetCurrentThreadSystemId',
              ( ['out'], POINTER(c_ulong), 'SysId' )),
    COMMETHOD([], HRESULT, 'GetThreadIdBySystemId',
              ( ['in'], c_ulong, 'SysId' ),
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetCurrentThreadHandle',
              ( ['out'], POINTER(c_ulonglong), 'Handle' )),
    COMMETHOD([], HRESULT, 'GetThreadIdByHandle',
              ( ['in'], c_ulonglong, 'Handle' ),
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetNumberProcesses',
              ( ['out'], POINTER(c_ulong), 'Number' )),
    COMMETHOD([], HRESULT, 'GetProcessIdsByIndex',
              ( ['in'], c_ulong, 'Start' ),
              ( ['in'], c_ulong, 'Count' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'Ids' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'SysIds' )),
    COMMETHOD([], HRESULT, 'GetCurrentProcessDataOffset',
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'GetProcessIdByDataOffset',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetCurrentProcessPeb',
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'GetProcessIdByPeb',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetCurrentProcessSystemId',
              ( ['out'], POINTER(c_ulong), 'SysId' )),
    COMMETHOD([], HRESULT, 'GetProcessIdBySystemId',
              ( ['in'], c_ulong, 'SysId' ),
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetCurrentProcessHandle',
              ( ['out'], POINTER(c_ulonglong), 'Handle' )),
    COMMETHOD([], HRESULT, 'GetProcessIdByHandle',
              ( ['in'], c_ulonglong, 'Handle' ),
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetCurrentProcessExecutableName',
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ExeSize' )),
    COMMETHOD([], HRESULT, 'GetCurrentProcessUpTime',
              ( ['out'], POINTER(c_ulong), 'UpTime' )),
    COMMETHOD([], HRESULT, 'GetImplicitThreadDataOffset',
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'SetImplicitThreadDataOffset',
              ( ['in'], c_ulonglong, 'Offset' )),
    COMMETHOD([], HRESULT, 'GetImplicitProcessDataOffset',
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'SetImplicitProcessDataOffset',
              ( ['in'], c_ulonglong, 'Offset' )),
    COMMETHOD([], HRESULT, 'GetEventSystem',
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetCurrentSystemId',
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'SetCurrentSystemId',
              ( ['in'], c_ulong, 'Id' )),
    COMMETHOD([], HRESULT, 'GetNumberSystems',
              ( ['out'], POINTER(c_ulong), 'Number' )),
    COMMETHOD([], HRESULT, 'GetSystemIdsByIndex',
              ( ['in'], c_ulong, 'Start' ),
              ( ['in'], c_ulong, 'Count' ),
              ( ['out'], POINTER(c_ulong), 'Ids' )),
    COMMETHOD([], HRESULT, 'GetTotalNumberThreadsAndProcesses',
              ( ['out'], POINTER(c_ulong), 'TotalThreads' ),
              ( ['out'], POINTER(c_ulong), 'TotalProcesses' ),
              ( ['out'], POINTER(c_ulong), 'LargestProcessThreads' ),
              ( ['out'], POINTER(c_ulong), 'LargestSystemThreads' ),
              ( ['out'], POINTER(c_ulong), 'LargestSystemProcesses' )),
    COMMETHOD([], HRESULT, 'GetCurrentSystemServer',
              ( ['out'], POINTER(c_ulonglong), 'Server' )),
    COMMETHOD([], HRESULT, 'GetSystemByServer',
              ( ['in'], c_ulonglong, 'Server' ),
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetCurrentSystemServerName',
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'NameSize' )),
]
################################################################
## code template for IDebugSystemObjects3 implementation
##class IDebugSystemObjects3_Impl(object):
##    def GetThreadIdByTeb(self, Offset):
##        '-no docstring-'
##        #return Id
##
##    def GetProcessIdsByIndex(self, Start, Count):
##        '-no docstring-'
##        #return Ids, SysIds
##
##    def GetCurrentProcessSystemId(self):
##        '-no docstring-'
##        #return SysId
##
##    def GetImplicitThreadDataOffset(self):
##        '-no docstring-'
##        #return Offset
##
##    def GetThreadIdsByIndex(self, Start, Count):
##        '-no docstring-'
##        #return Ids, SysIds
##
##    def SetCurrentThreadId(self, Id):
##        '-no docstring-'
##        #return 
##
##    def GetEventSystem(self):
##        '-no docstring-'
##        #return Id
##
##    def GetCurrentProcessPeb(self):
##        '-no docstring-'
##        #return Offset
##
##    def GetCurrentSystemServer(self):
##        '-no docstring-'
##        #return Server
##
##    def GetCurrentProcessExecutableName(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, ExeSize
##
##    def GetTotalNumberThreads(self):
##        '-no docstring-'
##        #return Total, LargestProcess
##
##    def GetProcessIdByPeb(self, Offset):
##        '-no docstring-'
##        #return Id
##
##    def SetImplicitProcessDataOffset(self, Offset):
##        '-no docstring-'
##        #return 
##
##    def GetCurrentProcessId(self):
##        '-no docstring-'
##        #return Id
##
##    def GetEventProcess(self):
##        '-no docstring-'
##        #return Id
##
##    def GetThreadIdBySystemId(self, SysId):
##        '-no docstring-'
##        #return Id
##
##    def GetCurrentSystemId(self):
##        '-no docstring-'
##        #return Id
##
##    def GetThreadIdByDataOffset(self, Offset):
##        '-no docstring-'
##        #return Id
##
##    def GetCurrentProcessUpTime(self):
##        '-no docstring-'
##        #return UpTime
##
##    def GetThreadIdByHandle(self, Handle):
##        '-no docstring-'
##        #return Id
##
##    def GetCurrentThreadTeb(self):
##        '-no docstring-'
##        #return Offset
##
##    def SetImplicitThreadDataOffset(self, Offset):
##        '-no docstring-'
##        #return 
##
##    def GetCurrentSystemServerName(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, NameSize
##
##    def GetImplicitProcessDataOffset(self):
##        '-no docstring-'
##        #return Offset
##
##    def GetNumberSystems(self):
##        '-no docstring-'
##        #return Number
##
##    def GetProcessIdBySystemId(self, SysId):
##        '-no docstring-'
##        #return Id
##
##    def GetEventThread(self):
##        '-no docstring-'
##        #return Id
##
##    def GetSystemByServer(self, Server):
##        '-no docstring-'
##        #return Id
##
##    def GetCurrentProcessDataOffset(self):
##        '-no docstring-'
##        #return Offset
##
##    def GetProcessIdByDataOffset(self, Offset):
##        '-no docstring-'
##        #return Id
##
##    def GetNumberProcesses(self):
##        '-no docstring-'
##        #return Number
##
##    def GetTotalNumberThreadsAndProcesses(self):
##        '-no docstring-'
##        #return TotalThreads, TotalProcesses, LargestProcessThreads, LargestSystemThreads, LargestSystemProcesses
##
##    def GetCurrentThreadId(self):
##        '-no docstring-'
##        #return Id
##
##    def GetCurrentProcessHandle(self):
##        '-no docstring-'
##        #return Handle
##
##    def SetCurrentProcessId(self, Id):
##        '-no docstring-'
##        #return 
##
##    def GetCurrentThreadHandle(self):
##        '-no docstring-'
##        #return Handle
##
##    def GetProcessIdByHandle(self, Handle):
##        '-no docstring-'
##        #return Id
##
##    def SetCurrentSystemId(self, Id):
##        '-no docstring-'
##        #return 
##
##    def GetSystemIdsByIndex(self, Start, Count):
##        '-no docstring-'
##        #return Ids
##
##    def GetNumberThreads(self):
##        '-no docstring-'
##        #return Number
##
##    def GetCurrentThreadSystemId(self):
##        '-no docstring-'
##        #return SysId
##
##    def GetCurrentThreadDataOffset(self):
##        '-no docstring-'
##        #return Offset
##
##    def GetThreadIdByProcessor(self, Processor):
##        '-no docstring-'
##        #return Id
##


# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0004'
DEBUG_GET_PROC_DEFAULT = 0
__MIDL___MIDL_itf_DbgEng_0001_0068_0004 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0091_0031'
DEBUG_FIND_SOURCE_TOKEN_LOOKUP = 8
__MIDL___MIDL_itf_DbgEng_0001_0091_0031 = c_int # enum
class IDebugRegisters(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'IDebugRegisters'
    _iid_ = GUID('{CE289126-9E84-45A7-937E-67BB18691493}')
    _idlflags_ = []
IDebugRegisters._methods_ = [
    COMMETHOD([], HRESULT, 'GetNumberRegisters',
              ( ['out'], POINTER(c_ulong), 'Number' )),
    COMMETHOD([], HRESULT, 'GetDescription',
              ( ['in'], c_ulong, 'Register' ),
              ( ['in', 'out', 'optional'], STRING, 'NameBuffer' ),
              ( ['in', 'optional'], c_ulong, 'NameBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'NameSize' ),
              ( ['out', 'optional'], POINTER(_DEBUG_REGISTER_DESCRIPTION), 'Desc' )),
    COMMETHOD([], HRESULT, 'GetIndexByName',
              ( ['in'], STRING, 'Name' ),
              ( ['out'], POINTER(c_ulong), 'Index' )),
    COMMETHOD([], HRESULT, 'GetValue',
              ( ['in'], c_ulong, 'Register' ),
              ( ['out'], POINTER(_DEBUG_VALUE), 'Value' )),
    COMMETHOD([], HRESULT, 'SetValue',
              ( ['in'], c_ulong, 'Register' ),
              ( ['in'], POINTER(_DEBUG_VALUE), 'Value' )),
    COMMETHOD([], HRESULT, 'GetValues',
              ( ['in'], c_ulong, 'Count' ),
              ( ['in', 'optional'], POINTER(c_ulong), 'Indices' ),
              ( ['in', 'optional'], c_ulong, 'Start' ),
              ( ['out', 'optional'], POINTER(_DEBUG_VALUE), 'Values' )),
    COMMETHOD([], HRESULT, 'SetValues',
              ( ['in'], c_ulong, 'Count' ),
              ( ['in', 'optional'], POINTER(c_ulong), 'Indices' ),
              ( ['in', 'optional'], c_ulong, 'Start' ),
              ( ['in', 'optional'], POINTER(_DEBUG_VALUE), 'Values' )),
    COMMETHOD([], HRESULT, 'OutputRegisters',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'GetInstructionOffset',
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'GetStackOffset',
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'GetFrameOffset',
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
]
################################################################
## code template for IDebugRegisters implementation
##class IDebugRegisters_Impl(object):
##    def GetFrameOffset(self):
##        '-no docstring-'
##        #return Offset
##
##    def SetValue(self, Register, Value):
##        '-no docstring-'
##        #return 
##
##    def GetIndexByName(self, Name):
##        '-no docstring-'
##        #return Index
##
##    def GetStackOffset(self):
##        '-no docstring-'
##        #return Offset
##
##    def GetDescription(self, Register, NameBufferSize):
##        '-no docstring-'
##        #return NameBuffer, NameSize, Desc
##
##    def GetValues(self, Count, Indices, Start):
##        '-no docstring-'
##        #return Values
##
##    def GetInstructionOffset(self):
##        '-no docstring-'
##        #return Offset
##
##    def SetValues(self, Count, Indices, Start, Values):
##        '-no docstring-'
##        #return 
##
##    def OutputRegisters(self, OutputControl, Flags):
##        '-no docstring-'
##        #return 
##
##    def GetNumberRegisters(self):
##        '-no docstring-'
##        #return Number
##
##    def GetValue(self, Register):
##        '-no docstring-'
##        #return Value
##

class _DEBUG_CREATE_PROCESS_OPTIONS(Structure):
    pass
_DEBUG_CREATE_PROCESS_OPTIONS._fields_ = [
    ('CreateFlags', c_ulong),
    ('EngCreateFlags', c_ulong),
    ('VerifierFlags', c_ulong),
    ('Reserved', c_ulong),
]
assert sizeof(_DEBUG_CREATE_PROCESS_OPTIONS) == 16, sizeof(_DEBUG_CREATE_PROCESS_OPTIONS)
assert alignment(_DEBUG_CREATE_PROCESS_OPTIONS) == 4, alignment(_DEBUG_CREATE_PROCESS_OPTIONS)

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0069_0019'
DEBUG_FORMAT_USER_SMALL_FULL_AUXILIARY_STATE = 16384
__MIDL___MIDL_itf_DbgEng_0001_0069_0019 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0012'
DEBUG_PROC_DESC_NO_COMMAND_LINE = 8
__MIDL___MIDL_itf_DbgEng_0001_0068_0012 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0019'
DEBUG_DATA_ExpNumberOfPagedPoolsAddr = 112
__MIDL___MIDL_itf_DbgEng_0001_0077_0019 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0077'
DEBUG_DATA_KernelVerifierAddr = 576
__MIDL___MIDL_itf_DbgEng_0001_0077_0077 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0017'
DEBUG_DATA_ExpSystemResourcesListAddr = 96
__MIDL___MIDL_itf_DbgEng_0001_0077_0017 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0021'
DEBUG_DATA_KeBugCheckCallbackListHeadAddr = 128
__MIDL___MIDL_itf_DbgEng_0001_0077_0021 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0018'
DEBUG_DATA_ExpPagedPoolDescriptorAddr = 104
__MIDL___MIDL_itf_DbgEng_0001_0077_0018 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0020'
DEBUG_DATA_KeTimeIncrementAddr = 120
__MIDL___MIDL_itf_DbgEng_0001_0077_0020 = c_int # enum
_DEBUG_STACK_FRAME._fields_ = [
    ('InstructionOffset', c_ulonglong),
    ('ReturnOffset', c_ulonglong),
    ('FrameOffset', c_ulonglong),
    ('StackOffset', c_ulonglong),
    ('FuncTableEntry', c_ulonglong),
    ('Params', c_ulonglong * 4),
    ('Reserved', c_ulonglong * 6),
    ('Virtual', c_int),
    ('FrameNumber', c_ulong),
]
assert sizeof(_DEBUG_STACK_FRAME) == 128, sizeof(_DEBUG_STACK_FRAME)
assert alignment(_DEBUG_STACK_FRAME) == 8, alignment(_DEBUG_STACK_FRAME)

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0022'
DEBUG_DATA_KiBugcheckDataAddr = 136
__MIDL___MIDL_itf_DbgEng_0001_0077_0022 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0023'
DEBUG_DATA_IopErrorLogListHeadAddr = 144
__MIDL___MIDL_itf_DbgEng_0001_0077_0023 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0024'
DEBUG_DATA_ObpRootDirectoryObjectAddr = 152
__MIDL___MIDL_itf_DbgEng_0001_0077_0024 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0025'
DEBUG_DATA_ObpTypeObjectTypeAddr = 160
__MIDL___MIDL_itf_DbgEng_0001_0077_0025 = c_int # enum
class _DEBUG_CACHED_SYMBOL_INFO(Structure):
    pass
_DEBUG_CACHED_SYMBOL_INFO._fields_ = [
    ('ModBase', c_ulonglong),
    ('Arg1', c_ulonglong),
    ('Arg2', c_ulonglong),
    ('Id', c_ulong),
    ('Arg3', c_ulong),
]
assert sizeof(_DEBUG_CACHED_SYMBOL_INFO) == 32, sizeof(_DEBUG_CACHED_SYMBOL_INFO)
assert alignment(_DEBUG_CACHED_SYMBOL_INFO) == 8, alignment(_DEBUG_CACHED_SYMBOL_INFO)

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0026'
DEBUG_DATA_MmSystemCacheStartAddr = 168
__MIDL___MIDL_itf_DbgEng_0001_0077_0026 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0069'
DEBUG_STACK_FRAME_NUMBERS = 64
__MIDL___MIDL_itf_DbgEng_0001_0073_0069 = c_int # enum
_DEBUG_MODULE_PARAMETERS._fields_ = [
    ('Base', c_ulonglong),
    ('Size', c_ulong),
    ('TimeDateStamp', c_ulong),
    ('CheckSum', c_ulong),
    ('Flags', c_ulong),
    ('SymbolType', c_ulong),
    ('ImageNameSize', c_ulong),
    ('ModuleNameSize', c_ulong),
    ('LoadedImageNameSize', c_ulong),
    ('SymbolFileNameSize', c_ulong),
    ('MappedImageNameSize', c_ulong),
    ('Reserved', c_ulonglong * 2),
]
assert sizeof(_DEBUG_MODULE_PARAMETERS) == 64, sizeof(_DEBUG_MODULE_PARAMETERS)
assert alignment(_DEBUG_MODULE_PARAMETERS) == 8, alignment(_DEBUG_MODULE_PARAMETERS)
class IDebugControl3(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'IDebugControl3'
    _iid_ = GUID('{7DF74A86-B03F-407F-90AB-A20DADCEAD08}')
    _idlflags_ = []
IDebugControl3._methods_ = [
    COMMETHOD([], HRESULT, 'GetInterrupt'),
    COMMETHOD([], HRESULT, 'SetInterrupt',
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'GetInterruptTimeout',
              ( ['out'], POINTER(c_ulong), 'Seconds' )),
    COMMETHOD([], HRESULT, 'SetInterruptTimeout',
              ( ['in'], c_ulong, 'Seconds' )),
    COMMETHOD([], HRESULT, 'GetLogFile',
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'FileSize' ),
              ( ['out', 'optional'], POINTER(c_int), 'Append' )),
    COMMETHOD([], HRESULT, 'OpenLogFile',
              ( ['in'], STRING, 'File' ),
              ( ['in'], c_int, 'Append' )),
    COMMETHOD([], HRESULT, 'CloseLogFile'),
    COMMETHOD([], HRESULT, 'GetLogMask',
              ( ['out'], POINTER(c_ulong), 'Mask' )),
    COMMETHOD([], HRESULT, 'SetLogMask',
              ( ['in'], c_ulong, 'Mask' )),
    COMMETHOD([], HRESULT, 'Input',
              ( ['out'], STRING, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'InputSize' )),
    COMMETHOD([], HRESULT, 'ReturnInput',
              ( ['in'], STRING, 'Buffer' )),
    COMMETHOD([], HRESULT, 'Output',
              ( ['in'], c_ulong, 'Mask' ),
              ( ['in'], STRING, 'Format' ),
              ( [], _midlSAFEARRAY(VARIANT), '__MIDL__IDebugControl30000' )),
    COMMETHOD([], HRESULT, 'OutputVaList',
              ( ['in'], c_ulong, 'Mask' ),
              ( ['in'], STRING, 'Format' ),
              ( ['in'], STRING, 'Args' )),
    COMMETHOD([], HRESULT, 'ControlledOutput',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], c_ulong, 'Mask' ),
              ( ['in'], STRING, 'Format' ),
              ( [], _midlSAFEARRAY(VARIANT), '__MIDL__IDebugControl30001' )),
    COMMETHOD([], HRESULT, 'ControlledOutputVaList',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], c_ulong, 'Mask' ),
              ( ['in'], STRING, 'Format' ),
              ( ['in'], STRING, 'Args' )),
    COMMETHOD([], HRESULT, 'OutputPrompt',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in', 'optional'], STRING, 'Format' ),
              ( ['optional'], _midlSAFEARRAY(VARIANT), '__MIDL__IDebugControl30002' )),
    COMMETHOD([], HRESULT, 'OutputPromptVaList',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in', 'optional'], STRING, 'Format' ),
              ( ['in', 'optional'], STRING, 'Args' )),
    COMMETHOD([], HRESULT, 'GetPromptText',
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'TextSize' )),
    COMMETHOD([], HRESULT, 'OutputCurrentState',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'OutputVersionInformation',
              ( ['in'], c_ulong, 'OutputControl' )),
    COMMETHOD([], HRESULT, 'GetNotifyEventHandle',
              ( ['out'], POINTER(c_ulonglong), 'Handle' )),
    COMMETHOD([], HRESULT, 'SetNotifyEventHandle',
              ( ['in'], c_ulonglong, 'Handle' )),
    COMMETHOD([], HRESULT, 'Assemble',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], STRING, 'Instr' ),
              ( ['out'], POINTER(c_ulonglong), 'EndOffset' )),
    COMMETHOD([], HRESULT, 'Disassemble',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'DisassemblySize' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'EndOffset' )),
    COMMETHOD([], HRESULT, 'GetDisassembleEffectiveOffset',
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'OutputDisassembly',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out'], POINTER(c_ulonglong), 'EndOffset' )),
    COMMETHOD([], HRESULT, 'OutputDisassemblyLines',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], c_ulong, 'PreviousLines' ),
              ( ['in'], c_ulong, 'TotalLines' ),
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'OffsetLine' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'StartOffset' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'EndOffset' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'LineOffsets' )),
    COMMETHOD([], HRESULT, 'GetNearInstruction',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_int, 'Delta' ),
              ( ['out'], POINTER(c_ulonglong), 'NearOffset' )),
    COMMETHOD([], HRESULT, 'GetStackTrace',
              ( ['in'], c_ulonglong, 'FrameOffset' ),
              ( ['in'], c_ulonglong, 'StackOffset' ),
              ( ['in'], c_ulonglong, 'InstructionOffset' ),
              ( ['in', 'out'], POINTER(_DEBUG_STACK_FRAME), 'Frames' ),
              ( ['in'], c_ulong, 'FramesSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'FramesFilled' )),
    COMMETHOD([], HRESULT, 'GetReturnOffset',
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'OutputStackTrace',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in', 'optional'], POINTER(_DEBUG_STACK_FRAME), 'Frames' ),
              ( ['in', 'optional'], c_ulong, 'FramesSize' ),
              ( ['in', 'optional'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'GetDebuggeeType',
              ( ['out'], POINTER(c_ulong), 'Class' ),
              ( ['out'], POINTER(c_ulong), 'Qualifier' )),
    COMMETHOD([], HRESULT, 'GetActualProcessorType',
              ( ['out'], POINTER(c_ulong), 'Type' )),
    COMMETHOD([], HRESULT, 'GetExecutingProcessorType',
              ( ['out'], POINTER(c_ulong), 'Type' )),
    COMMETHOD([], HRESULT, 'GetNumberPossibleExecutingProcessorTypes',
              ( ['out'], POINTER(c_ulong), 'Number' )),
    COMMETHOD([], HRESULT, 'GetPossibleExecutingProcessorTypes',
              ( ['in'], c_ulong, 'Start' ),
              ( ['in'], c_ulong, 'Count' ),
              ( ['out'], POINTER(c_ulong), 'Types' )),
    COMMETHOD([], HRESULT, 'GetNumberProcessors',
              ( ['out'], POINTER(c_ulong), 'Number' )),
    COMMETHOD([], HRESULT, 'GetSystemVersion',
              ( ['out'], POINTER(c_ulong), 'PlatformId' ),
              ( ['out'], POINTER(c_ulong), 'Major' ),
              ( ['out'], POINTER(c_ulong), 'Minor' ),
              ( ['out', 'optional'], STRING, 'ServicePackString' ),
              ( ['in', 'optional'], c_ulong, 'ServicePackStringSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ServicePackStringUsed' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ServicePackNumber' ),
              ( ['out', 'optional'], STRING, 'BuildString' ),
              ( ['in', 'optional'], c_ulong, 'BuildStringSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'BuildStringUsed' )),
    COMMETHOD([], HRESULT, 'GetPageSize',
              ( ['out'], POINTER(c_ulong), 'Size' )),
    COMMETHOD([], HRESULT, 'IsPointer64Bit'),
    COMMETHOD([], HRESULT, 'ReadBugCheckData',
              ( ['out'], POINTER(c_ulong), 'Code' ),
              ( ['out'], POINTER(c_ulonglong), 'Arg1' ),
              ( ['out'], POINTER(c_ulonglong), 'Arg2' ),
              ( ['out'], POINTER(c_ulonglong), 'Arg3' ),
              ( ['out'], POINTER(c_ulonglong), 'Arg4' )),
    COMMETHOD([], HRESULT, 'GetNumberSupportedProcessorTypes',
              ( ['out'], POINTER(c_ulong), 'Number' )),
    COMMETHOD([], HRESULT, 'GetSupportedProcessorTypes',
              ( ['in'], c_ulong, 'Start' ),
              ( ['in'], c_ulong, 'Count' ),
              ( ['out'], POINTER(c_ulong), 'Types' )),
    COMMETHOD([], HRESULT, 'GetProcessorTypeNames',
              ( ['in'], c_ulong, 'Type' ),
              ( ['out', 'optional'], STRING, 'FullNameBuffer' ),
              ( ['in', 'optional'], c_ulong, 'FullNameBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'FullNameSize' ),
              ( ['out', 'optional'], STRING, 'AbbrevNameBuffer' ),
              ( ['in', 'optional'], c_ulong, 'AbbrevNameBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'AbbrevNameSize' )),
    COMMETHOD([], HRESULT, 'GetEffectiveProcessorType',
              ( ['out'], POINTER(c_ulong), 'Type' )),
    COMMETHOD([], HRESULT, 'SetEffectiveProcessorType',
              ( ['in'], c_ulong, 'Type' )),
    COMMETHOD([], HRESULT, 'GetExecutionStatus',
              ( ['out'], POINTER(c_ulong), 'Status' )),
    COMMETHOD([], HRESULT, 'SetExecutionStatus',
              ( ['in'], c_ulong, 'Status' )),
    COMMETHOD([], HRESULT, 'GetCodeLevel',
              ( ['out'], POINTER(c_ulong), 'Level' )),
    COMMETHOD([], HRESULT, 'SetCodeLevel',
              ( ['in'], c_ulong, 'Level' )),
    COMMETHOD([], HRESULT, 'GetEngineOptions',
              ( ['out'], POINTER(c_ulong), 'Options' )),
    COMMETHOD([], HRESULT, 'AddEngineOptions',
              ( ['in'], c_ulong, 'Options' )),
    COMMETHOD([], HRESULT, 'RemoveEngineOptions',
              ( ['in'], c_ulong, 'Options' )),
    COMMETHOD([], HRESULT, 'SetEngineOptions',
              ( ['in'], c_ulong, 'Options' )),
    COMMETHOD([], HRESULT, 'GetSystemErrorControl',
              ( ['out'], POINTER(c_ulong), 'OutputLevel' ),
              ( ['out'], POINTER(c_ulong), 'BreakLevel' )),
    COMMETHOD([], HRESULT, 'SetSystemErrorControl',
              ( ['in'], c_ulong, 'OutputLevel' ),
              ( ['in'], c_ulong, 'BreakLevel' )),
    COMMETHOD([], HRESULT, 'GetTextMacro',
              ( ['in'], c_ulong, 'Slot' ),
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'MacroSize' )),
    COMMETHOD([], HRESULT, 'SetTextMacro',
              ( ['in'], c_ulong, 'Slot' ),
              ( ['in'], STRING, 'Macro' )),
    COMMETHOD([], HRESULT, 'GetRadix',
              ( ['out'], POINTER(c_ulong), 'Radix' )),
    COMMETHOD([], HRESULT, 'SetRadix',
              ( ['in'], c_ulong, 'Radix' )),
    COMMETHOD([], HRESULT, 'Evaluate',
              ( ['in'], STRING, 'Expression' ),
              ( ['in'], c_ulong, 'DesiredType' ),
              ( ['out'], POINTER(_DEBUG_VALUE), 'Value' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'RemainderIndex' )),
    COMMETHOD([], HRESULT, 'CoerceValue',
              ( ['in'], POINTER(_DEBUG_VALUE), 'In' ),
              ( ['in'], c_ulong, 'OutType' ),
              ( ['out'], POINTER(_DEBUG_VALUE), 'Out' )),
    COMMETHOD([], HRESULT, 'CoerceValues',
              ( ['in'], c_ulong, 'Count' ),
              ( ['in'], POINTER(_DEBUG_VALUE), 'In' ),
              ( ['in'], POINTER(c_ulong), 'OutTypes' ),
              ( ['out'], POINTER(_DEBUG_VALUE), 'Out' )),
    COMMETHOD([], HRESULT, 'Execute',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], STRING, 'Command' ),
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'ExecuteCommandFile',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], STRING, 'CommandFile' ),
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'GetNumberBreakpoints',
              ( ['out'], POINTER(c_ulong), 'Number' )),
    COMMETHOD([], HRESULT, 'GetBreakpointByIndex',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out'], POINTER(POINTER(IDebugBreakpoint)), 'Bp' )),
    COMMETHOD([], HRESULT, 'GetBreakpointById',
              ( ['in'], c_ulong, 'Id' ),
              ( ['out'], POINTER(POINTER(IDebugBreakpoint)), 'Bp' )),
    COMMETHOD([], HRESULT, 'GetBreakpointParameters',
              ( ['in'], c_ulong, 'Count' ),
              ( ['in', 'optional'], POINTER(c_ulong), 'Ids' ),
              ( ['in', 'optional'], c_ulong, 'Start' ),
              ( ['out', 'optional'], POINTER(_DEBUG_BREAKPOINT_PARAMETERS), 'Params' )),
    COMMETHOD([], HRESULT, 'AddBreakpoint',
              ( ['in'], c_ulong, 'Type' ),
              ( ['in'], c_ulong, 'DesiredId' ),
              ( ['out'], POINTER(POINTER(IDebugBreakpoint)), 'Bp' )),
    COMMETHOD([], HRESULT, 'RemoveBreakpoint',
              ( ['in'], POINTER(IDebugBreakpoint), 'Bp' )),
    COMMETHOD([], HRESULT, 'AddExtension',
              ( ['in'], STRING, 'Path' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out'], POINTER(c_ulonglong), 'Handle' )),
    COMMETHOD([], HRESULT, 'RemoveExtension',
              ( ['in'], c_ulonglong, 'Handle' )),
    COMMETHOD([], HRESULT, 'GetExtensionByPath',
              ( ['in'], STRING, 'Path' ),
              ( ['out'], POINTER(c_ulonglong), 'Handle' )),
    COMMETHOD([], HRESULT, 'CallExtension',
              ( ['in'], c_ulonglong, 'Handle' ),
              ( ['in'], STRING, 'Function' ),
              ( ['in', 'optional'], STRING, 'Arguments' )),
    COMMETHOD([], HRESULT, 'GetExtensionFunction',
              ( ['in'], c_ulonglong, 'Handle' ),
              ( ['in'], STRING, 'FuncName' ),
              ( ['out'], POINTER(c_void_p), 'Function' )),
    COMMETHOD([], HRESULT, 'GetWindbgExtensionApis32',
              ( ['in', 'out'], POINTER(_WINDBG_EXTENSION_APIS32), 'Api' )),
    COMMETHOD([], HRESULT, 'GetWindbgExtensionApis64',
              ( ['in', 'out'], POINTER(_WINDBG_EXTENSION_APIS64), 'Api' )),
    COMMETHOD([], HRESULT, 'GetNumberEventFilters',
              ( ['out'], POINTER(c_ulong), 'SpecificEvents' ),
              ( ['out'], POINTER(c_ulong), 'SpecificExceptions' ),
              ( ['out'], POINTER(c_ulong), 'ArbitraryExceptions' )),
    COMMETHOD([], HRESULT, 'GetEventFilterText',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'TextSize' )),
    COMMETHOD([], HRESULT, 'GetEventFilterCommand',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'CommandSize' )),
    COMMETHOD([], HRESULT, 'SetEventFilterCommand',
              ( ['in'], c_ulong, 'Index' ),
              ( ['in'], STRING, 'Command' )),
    COMMETHOD([], HRESULT, 'GetSpecificFilterParameters',
              ( ['in'], c_ulong, 'Start' ),
              ( ['in'], c_ulong, 'Count' ),
              ( ['out'], POINTER(_DEBUG_SPECIFIC_FILTER_PARAMETERS), 'Params' )),
    COMMETHOD([], HRESULT, 'SetSpecificFilterParameters',
              ( ['in'], c_ulong, 'Start' ),
              ( ['in'], c_ulong, 'Count' ),
              ( ['in'], POINTER(_DEBUG_SPECIFIC_FILTER_PARAMETERS), 'Params' )),
    COMMETHOD([], HRESULT, 'GetSpecificFilterArgument',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ArgumentSize' )),
    COMMETHOD([], HRESULT, 'SetSpecificFilterArgument',
              ( ['in'], c_ulong, 'Index' ),
              ( ['in'], STRING, 'Argument' )),
    COMMETHOD([], HRESULT, 'GetExceptionFilterParameters',
              ( ['in'], c_ulong, 'Count' ),
              ( ['in', 'optional'], POINTER(c_ulong), 'Codes' ),
              ( ['in', 'optional'], c_ulong, 'Start' ),
              ( ['out', 'optional'], POINTER(_DEBUG_EXCEPTION_FILTER_PARAMETERS), 'Params' )),
    COMMETHOD([], HRESULT, 'SetExceptionFilterParameters',
              ( ['in'], c_ulong, 'Count' ),
              ( ['in'], POINTER(_DEBUG_EXCEPTION_FILTER_PARAMETERS), 'Params' )),
    COMMETHOD([], HRESULT, 'GetExceptionFilterSecondCommand',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'CommandSize' )),
    COMMETHOD([], HRESULT, 'SetExceptionFilterSecondCommand',
              ( ['in'], c_ulong, 'Index' ),
              ( ['in'], STRING, 'Command' )),
    COMMETHOD([], HRESULT, 'WaitForEvent',
              ( ['in'], c_ulong, 'Flags' ),
              ( ['in'], c_ulong, 'Timeout' )),
    COMMETHOD([], HRESULT, 'GetLastEventInformation',
              ( ['out'], POINTER(c_ulong), 'Type' ),
              ( ['out'], POINTER(c_ulong), 'ProcessId' ),
              ( ['out'], POINTER(c_ulong), 'ThreadId' ),
              ( ['out', 'optional'], c_void_p, 'ExtraInformation' ),
              ( ['in', 'optional'], c_ulong, 'ExtraInformationSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ExtraInformationUsed' ),
              ( ['out', 'optional'], STRING, 'Description' ),
              ( ['in', 'optional'], c_ulong, 'DescriptionSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'DescriptionUsed' )),
    COMMETHOD([], HRESULT, 'GetCurrentTimeDate',
              ( ['out'], POINTER(c_ulong), 'TimeDate' )),
    COMMETHOD([], HRESULT, 'GetCurrentSystemUpTime',
              ( ['out'], POINTER(c_ulong), 'UpTime' )),
    COMMETHOD([], HRESULT, 'GetDumpFormatFlags',
              ( ['out'], POINTER(c_ulong), 'FormatFlags' )),
    COMMETHOD([], HRESULT, 'GetNumberTextReplacements',
              ( ['out'], POINTER(c_ulong), 'NumRepl' )),
    COMMETHOD([], HRESULT, 'GetTextReplacement',
              ( ['in', 'optional'], STRING, 'SrcText' ),
              ( ['in', 'optional'], c_ulong, 'Index' ),
              ( ['out', 'optional'], STRING, 'SrcBuffer' ),
              ( ['in', 'optional'], c_ulong, 'SrcBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'SrcSize' ),
              ( ['out', 'optional'], STRING, 'DstBuffer' ),
              ( ['in', 'optional'], c_ulong, 'DstBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'DstSize' )),
    COMMETHOD([], HRESULT, 'SetTextReplacement',
              ( ['in'], STRING, 'SrcText' ),
              ( ['in', 'optional'], STRING, 'DstText' )),
    COMMETHOD([], HRESULT, 'RemoveTextReplacements'),
    COMMETHOD([], HRESULT, 'OutputTextReplacements',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'GetAssemblyOptions',
              ( ['out'], POINTER(c_ulong), 'Options' )),
    COMMETHOD([], HRESULT, 'AddAssemblyOptions',
              ( ['in'], c_ulong, 'Options' )),
    COMMETHOD([], HRESULT, 'RemoveAssemblyOptions',
              ( ['in'], c_ulong, 'Options' )),
    COMMETHOD([], HRESULT, 'SetAssemblyOptions',
              ( ['in'], c_ulong, 'Options' )),
    COMMETHOD([], HRESULT, 'GetExpressionSyntax',
              ( ['out'], POINTER(c_ulong), 'Flags' )),
    COMMETHOD([], HRESULT, 'SetExpressionSyntax',
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'SetExpressionSyntaxByName',
              ( ['in'], STRING, 'AbbrevName' )),
    COMMETHOD([], HRESULT, 'GetNumberExpressionSyntaxes',
              ( ['out'], POINTER(c_ulong), 'Number' )),
    COMMETHOD([], HRESULT, 'GetExpressionSyntaxNames',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out', 'optional'], STRING, 'FullNameBuffer' ),
              ( ['in', 'optional'], c_ulong, 'FullNameBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'FullNameSize' ),
              ( ['out', 'optional'], STRING, 'AbbrevNameBuffer' ),
              ( ['in', 'optional'], c_ulong, 'AbbrevNameBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'AbbrevNameSize' )),
    COMMETHOD([], HRESULT, 'GetNumberEvents',
              ( ['out'], POINTER(c_ulong), 'Events' )),
    COMMETHOD([], HRESULT, 'GetEventIndexDescription',
              ( ['in'], c_ulong, 'Index' ),
              ( ['in'], c_ulong, 'Which' ),
              ( ['in', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'DescSize' )),
    COMMETHOD([], HRESULT, 'GetCurrentEventIndex',
              ( ['out'], POINTER(c_ulong), 'Index' )),
    COMMETHOD([], HRESULT, 'SetNextEventIndex',
              ( ['in'], c_ulong, 'Relation' ),
              ( ['in'], c_ulong, 'Value' ),
              ( ['out'], POINTER(c_ulong), 'NextIndex' )),
]
################################################################
## code template for IDebugControl3 implementation
##class IDebugControl3_Impl(object):
##    def AddBreakpoint(self, Type, DesiredId):
##        '-no docstring-'
##        #return Bp
##
##    def GetInterrupt(self):
##        '-no docstring-'
##        #return 
##
##    def CoerceValues(self, Count, In, OutTypes):
##        '-no docstring-'
##        #return Out
##
##    def RemoveExtension(self, Handle):
##        '-no docstring-'
##        #return 
##
##    def GetExecutingProcessorType(self):
##        '-no docstring-'
##        #return Type
##
##    def GetCurrentTimeDate(self):
##        '-no docstring-'
##        #return TimeDate
##
##    def AddEngineOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def GetNumberExpressionSyntaxes(self):
##        '-no docstring-'
##        #return Number
##
##    def GetDebuggeeType(self):
##        '-no docstring-'
##        #return Class, Qualifier
##
##    def Execute(self, OutputControl, Command, Flags):
##        '-no docstring-'
##        #return 
##
##    def CoerceValue(self, In, OutType):
##        '-no docstring-'
##        #return Out
##
##    def GetTextMacro(self, Slot, BufferSize):
##        '-no docstring-'
##        #return Buffer, MacroSize
##
##    def ControlledOutput(self, OutputControl, Mask, Format, __MIDL__IDebugControl30001):
##        '-no docstring-'
##        #return 
##
##    def WaitForEvent(self, Flags, Timeout):
##        '-no docstring-'
##        #return 
##
##    def GetRadix(self):
##        '-no docstring-'
##        #return Radix
##
##    def GetSpecificFilterParameters(self, Start, Count):
##        '-no docstring-'
##        #return Params
##
##    def RemoveEngineOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def SetExceptionFilterParameters(self, Count, Params):
##        '-no docstring-'
##        #return 
##
##    def SetExceptionFilterSecondCommand(self, Index, Command):
##        '-no docstring-'
##        #return 
##
##    def GetDisassembleEffectiveOffset(self):
##        '-no docstring-'
##        #return Offset
##
##    def GetNearInstruction(self, Offset, Delta):
##        '-no docstring-'
##        #return NearOffset
##
##    def GetInterruptTimeout(self):
##        '-no docstring-'
##        #return Seconds
##
##    def GetSystemVersion(self, ServicePackStringSize, BuildStringSize):
##        '-no docstring-'
##        #return PlatformId, Major, Minor, ServicePackString, ServicePackStringUsed, ServicePackNumber, BuildString, BuildStringUsed
##
##    def SetTextMacro(self, Slot, Macro):
##        '-no docstring-'
##        #return 
##
##    def GetWindbgExtensionApis64(self):
##        '-no docstring-'
##        #return Api
##
##    def GetLogFile(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, FileSize, Append
##
##    def GetNumberEvents(self):
##        '-no docstring-'
##        #return Events
##
##    def GetTextReplacement(self, SrcText, Index, SrcBufferSize, DstBufferSize):
##        '-no docstring-'
##        #return SrcBuffer, SrcSize, DstBuffer, DstSize
##
##    def OpenLogFile(self, File, Append):
##        '-no docstring-'
##        #return 
##
##    def OutputDisassembly(self, OutputControl, Offset, Flags):
##        '-no docstring-'
##        #return EndOffset
##
##    def RemoveAssemblyOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def GetNumberSupportedProcessorTypes(self):
##        '-no docstring-'
##        #return Number
##
##    def OutputVersionInformation(self, OutputControl):
##        '-no docstring-'
##        #return 
##
##    def GetActualProcessorType(self):
##        '-no docstring-'
##        #return Type
##
##    def GetBreakpointParameters(self, Count, Ids, Start):
##        '-no docstring-'
##        #return Params
##
##    def Evaluate(self, Expression, DesiredType):
##        '-no docstring-'
##        #return Value, RemainderIndex
##
##    def GetCurrentEventIndex(self):
##        '-no docstring-'
##        #return Index
##
##    def SetNextEventIndex(self, Relation, Value):
##        '-no docstring-'
##        #return NextIndex
##
##    def GetNumberProcessors(self):
##        '-no docstring-'
##        #return Number
##
##    def AddExtension(self, Path, Flags):
##        '-no docstring-'
##        #return Handle
##
##    def GetEventIndexDescription(self, Index, Which, Buffer, BufferSize):
##        '-no docstring-'
##        #return DescSize
##
##    def SetCodeLevel(self, Level):
##        '-no docstring-'
##        #return 
##
##    def SetLogMask(self, Mask):
##        '-no docstring-'
##        #return 
##
##    def CloseLogFile(self):
##        '-no docstring-'
##        #return 
##
##    def SetInterrupt(self, Flags):
##        '-no docstring-'
##        #return 
##
##    def SetNotifyEventHandle(self, Handle):
##        '-no docstring-'
##        #return 
##
##    def SetSpecificFilterArgument(self, Index, Argument):
##        '-no docstring-'
##        #return 
##
##    def GetNotifyEventHandle(self):
##        '-no docstring-'
##        #return Handle
##
##    def ReadBugCheckData(self):
##        '-no docstring-'
##        #return Code, Arg1, Arg2, Arg3, Arg4
##
##    def SetEffectiveProcessorType(self, Type):
##        '-no docstring-'
##        #return 
##
##    def GetCodeLevel(self):
##        '-no docstring-'
##        #return Level
##
##    def GetCurrentSystemUpTime(self):
##        '-no docstring-'
##        #return UpTime
##
##    def GetExceptionFilterParameters(self, Count, Codes, Start):
##        '-no docstring-'
##        #return Params
##
##    def OutputStackTrace(self, OutputControl, Frames, FramesSize, Flags):
##        '-no docstring-'
##        #return 
##
##    def SetRadix(self, Radix):
##        '-no docstring-'
##        #return 
##
##    def GetNumberTextReplacements(self):
##        '-no docstring-'
##        #return NumRepl
##
##    def GetExpressionSyntaxNames(self, Index, FullNameBufferSize, AbbrevNameBufferSize):
##        '-no docstring-'
##        #return FullNameBuffer, FullNameSize, AbbrevNameBuffer, AbbrevNameSize
##
##    def Input(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, InputSize
##
##    def GetExpressionSyntax(self):
##        '-no docstring-'
##        #return Flags
##
##    def SetExecutionStatus(self, Status):
##        '-no docstring-'
##        #return 
##
##    def ControlledOutputVaList(self, OutputControl, Mask, Format, Args):
##        '-no docstring-'
##        #return 
##
##    def GetBreakpointById(self, Id):
##        '-no docstring-'
##        #return Bp
##
##    def RemoveBreakpoint(self, Bp):
##        '-no docstring-'
##        #return 
##
##    def GetWindbgExtensionApis32(self):
##        '-no docstring-'
##        #return Api
##
##    def Assemble(self, Offset, Instr):
##        '-no docstring-'
##        #return EndOffset
##
##    def OutputVaList(self, Mask, Format, Args):
##        '-no docstring-'
##        #return 
##
##    def ReturnInput(self, Buffer):
##        '-no docstring-'
##        #return 
##
##    def ExecuteCommandFile(self, OutputControl, CommandFile, Flags):
##        '-no docstring-'
##        #return 
##
##    def OutputPrompt(self, OutputControl, Format, __MIDL__IDebugControl30002):
##        '-no docstring-'
##        #return 
##
##    def OutputCurrentState(self, OutputControl, Flags):
##        '-no docstring-'
##        #return 
##
##    def GetEngineOptions(self):
##        '-no docstring-'
##        #return Options
##
##    def CallExtension(self, Handle, Function, Arguments):
##        '-no docstring-'
##        #return 
##
##    def GetEventFilterText(self, Index, BufferSize):
##        '-no docstring-'
##        #return Buffer, TextSize
##
##    def SetEventFilterCommand(self, Index, Command):
##        '-no docstring-'
##        #return 
##
##    def GetNumberPossibleExecutingProcessorTypes(self):
##        '-no docstring-'
##        #return Number
##
##    def GetAssemblyOptions(self):
##        '-no docstring-'
##        #return Options
##
##    def SetSpecificFilterParameters(self, Start, Count, Params):
##        '-no docstring-'
##        #return 
##
##    def GetNumberEventFilters(self):
##        '-no docstring-'
##        #return SpecificEvents, SpecificExceptions, ArbitraryExceptions
##
##    def OutputDisassemblyLines(self, OutputControl, PreviousLines, TotalLines, Offset, Flags):
##        '-no docstring-'
##        #return OffsetLine, StartOffset, EndOffset, LineOffsets
##
##    def SetTextReplacement(self, SrcText, DstText):
##        '-no docstring-'
##        #return 
##
##    def GetReturnOffset(self):
##        '-no docstring-'
##        #return Offset
##
##    def GetLastEventInformation(self, ExtraInformationSize, DescriptionSize):
##        '-no docstring-'
##        #return Type, ProcessId, ThreadId, ExtraInformation, ExtraInformationUsed, Description, DescriptionUsed
##
##    def SetInterruptTimeout(self, Seconds):
##        '-no docstring-'
##        #return 
##
##    def GetStackTrace(self, FrameOffset, StackOffset, InstructionOffset, FramesSize):
##        '-no docstring-'
##        #return Frames, FramesFilled
##
##    def GetSystemErrorControl(self):
##        '-no docstring-'
##        #return OutputLevel, BreakLevel
##
##    def GetSpecificFilterArgument(self, Index, BufferSize):
##        '-no docstring-'
##        #return Buffer, ArgumentSize
##
##    def GetExceptionFilterSecondCommand(self, Index, BufferSize):
##        '-no docstring-'
##        #return Buffer, CommandSize
##
##    def GetPageSize(self):
##        '-no docstring-'
##        #return Size
##
##    def Disassemble(self, Offset, Flags, BufferSize):
##        '-no docstring-'
##        #return Buffer, DisassemblySize, EndOffset
##
##    def SetExpressionSyntax(self, Flags):
##        '-no docstring-'
##        #return 
##
##    def GetExecutionStatus(self):
##        '-no docstring-'
##        #return Status
##
##    def GetExtensionByPath(self, Path):
##        '-no docstring-'
##        #return Handle
##
##    def OutputPromptVaList(self, OutputControl, Format, Args):
##        '-no docstring-'
##        #return 
##
##    def GetNumberBreakpoints(self):
##        '-no docstring-'
##        #return Number
##
##    def GetBreakpointByIndex(self, Index):
##        '-no docstring-'
##        #return Bp
##
##    def RemoveTextReplacements(self):
##        '-no docstring-'
##        #return 
##
##    def SetExpressionSyntaxByName(self, AbbrevName):
##        '-no docstring-'
##        #return 
##
##    def GetEventFilterCommand(self, Index, BufferSize):
##        '-no docstring-'
##        #return Buffer, CommandSize
##
##    def SetEngineOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def AddAssemblyOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def SetAssemblyOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def GetDumpFormatFlags(self):
##        '-no docstring-'
##        #return FormatFlags
##
##    def GetExtensionFunction(self, Handle, FuncName):
##        '-no docstring-'
##        #return Function
##
##    def GetPossibleExecutingProcessorTypes(self, Start, Count):
##        '-no docstring-'
##        #return Types
##
##    def GetSupportedProcessorTypes(self, Start, Count):
##        '-no docstring-'
##        #return Types
##
##    def GetLogMask(self):
##        '-no docstring-'
##        #return Mask
##
##    def GetPromptText(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, TextSize
##
##    def GetEffectiveProcessorType(self):
##        '-no docstring-'
##        #return Type
##
##    def Output(self, Mask, Format, __MIDL__IDebugControl30000):
##        '-no docstring-'
##        #return 
##
##    def IsPointer64Bit(self):
##        '-no docstring-'
##        #return 
##
##    def OutputTextReplacements(self, OutputControl, Flags):
##        '-no docstring-'
##        #return 
##
##    def SetSystemErrorControl(self, OutputLevel, BreakLevel):
##        '-no docstring-'
##        #return 
##
##    def GetProcessorTypeNames(self, Type, FullNameBufferSize, AbbrevNameBufferSize):
##        '-no docstring-'
##        #return FullNameBuffer, FullNameSize, AbbrevNameBuffer, AbbrevNameSize
##


# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0028'
DEBUG_DATA_MmSystemCacheWsAddr = 184
__MIDL___MIDL_itf_DbgEng_0001_0077_0028 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0071'
DEBUG_STACK_FRAME_ADDRESSES_RA_ONLY = 256
__MIDL___MIDL_itf_DbgEng_0001_0073_0071 = c_int # enum
class IDebugSymbols2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'IDebugSymbols2'
    _iid_ = GUID('{3A707211-AFDD-4495-AD4F-56FECDF8163F}')
    _idlflags_ = []
IDebugSymbols2._methods_ = [
    COMMETHOD([], HRESULT, 'GetSymbolOptions',
              ( ['out'], POINTER(c_ulong), 'Options' )),
    COMMETHOD([], HRESULT, 'AddSymbolOptions',
              ( ['in'], c_ulong, 'Options' )),
    COMMETHOD([], HRESULT, 'RemoveSymbolOptions',
              ( ['in'], c_ulong, 'Options' )),
    COMMETHOD([], HRESULT, 'SetSymbolOptions',
              ( ['in'], c_ulong, 'Options' )),
    COMMETHOD([], HRESULT, 'GetNameByOffset',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in', 'out', 'optional'], STRING, 'NameBuffer' ),
              ( ['in', 'optional'], c_ulong, 'NameBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'NameSize' ),
              ( ['in', 'out', 'optional'], POINTER(c_ulonglong), 'Displacement' )),
    COMMETHOD([], HRESULT, 'GetOffsetByName',
              ( ['in'], STRING, 'Symbol' ),
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'GetNearNameByOffset',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_int, 'Delta' ),
              ( ['in', 'out', 'optional'], STRING, 'NameBuffer' ),
              ( ['in', 'optional'], c_ulong, 'NameBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'NameSize' ),
              ( ['in', 'out', 'optional'], POINTER(c_ulonglong), 'Displacement' )),
    COMMETHOD([], HRESULT, 'GetLineByOffset',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'Line' ),
              ( ['out', 'optional'], STRING, 'FileBuffer' ),
              ( ['in', 'optional'], c_ulong, 'FileBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'FileSize' ),
              ( ['in', 'out', 'optional'], POINTER(c_ulonglong), 'Displacement' )),
    COMMETHOD([], HRESULT, 'GetOffsetByLine',
              ( ['in'], c_ulong, 'Line' ),
              ( ['in'], STRING, 'File' ),
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'GetNumberModules',
              ( ['out'], POINTER(c_ulong), 'Loaded' ),
              ( ['out'], POINTER(c_ulong), 'Unloaded' )),
    COMMETHOD([], HRESULT, 'GetModuleByIndex',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out'], POINTER(c_ulonglong), 'Base' )),
    COMMETHOD([], HRESULT, 'GetModuleByModuleName',
              ( ['in'], STRING, 'Name' ),
              ( ['in'], c_ulong, 'StartIndex' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'Index' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'Base' )),
    COMMETHOD([], HRESULT, 'GetModuleByOffset',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulong, 'StartIndex' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'Index' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'Base' )),
    COMMETHOD([], HRESULT, 'GetModuleNames',
              ( ['in'], c_ulong, 'Index' ),
              ( ['in'], c_ulonglong, 'Base' ),
              ( ['out', 'optional'], STRING, 'ImageNameBuffer' ),
              ( ['in', 'optional'], c_ulong, 'ImageNameBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ImageNameSize' ),
              ( ['out', 'optional'], STRING, 'ModuleNameBuffer' ),
              ( ['in', 'optional'], c_ulong, 'ModuleNameBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ModuleNameSize' ),
              ( ['out', 'optional'], STRING, 'LoadedImageNameBuffer' ),
              ( ['in', 'optional'], c_ulong, 'LoadedImageNameBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'LoadedImageNameSize' )),
    COMMETHOD([], HRESULT, 'GetModuleParameters',
              ( ['in'], c_ulong, 'Count' ),
              ( ['in', 'optional'], POINTER(c_ulonglong), 'Bases' ),
              ( ['in', 'optional'], c_ulong, 'Start' ),
              ( ['out', 'optional'], POINTER(_DEBUG_MODULE_PARAMETERS), 'Params' )),
    COMMETHOD([], HRESULT, 'GetSymbolModule',
              ( ['in'], STRING, 'Symbol' ),
              ( ['out'], POINTER(c_ulonglong), 'Base' )),
    COMMETHOD([], HRESULT, 'GetTypeName',
              ( ['in'], c_ulonglong, 'Module' ),
              ( ['in'], c_ulong, 'TypeId' ),
              ( ['in', 'out', 'optional'], STRING, 'NameBuffer' ),
              ( ['in', 'optional'], c_ulong, 'NameBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'NameSize' )),
    COMMETHOD([], HRESULT, 'GetTypeId',
              ( ['in'], c_ulonglong, 'Module' ),
              ( ['in'], STRING, 'Name' ),
              ( ['out'], POINTER(c_ulong), 'TypeId' )),
    COMMETHOD([], HRESULT, 'GetTypeSize',
              ( ['in'], c_ulonglong, 'Module' ),
              ( ['in'], c_ulong, 'TypeId' ),
              ( ['out'], POINTER(c_ulong), 'Size' )),
    COMMETHOD([], HRESULT, 'GetFieldOffset',
              ( ['in'], c_ulonglong, 'Module' ),
              ( ['in'], c_ulong, 'TypeId' ),
              ( ['in'], STRING, 'Field' ),
              ( ['out'], POINTER(c_ulong), 'Offset' )),
    COMMETHOD([], HRESULT, 'GetSymbolTypeId',
              ( ['in'], STRING, 'Symbol' ),
              ( ['out'], POINTER(c_ulong), 'TypeId' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'Module' )),
    COMMETHOD([], HRESULT, 'GetOffsetTypeId',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['out'], POINTER(c_ulong), 'TypeId' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'Module' )),
    COMMETHOD([], HRESULT, 'ReadTypedDataVirtual',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulonglong, 'Module' ),
              ( ['in'], c_ulong, 'TypeId' ),
              ( ['in', 'out'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['in', 'out', 'optional'], POINTER(c_ulong), 'BytesRead' )),
    COMMETHOD([], HRESULT, 'WriteTypedDataVirtual',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulonglong, 'Module' ),
              ( ['in'], c_ulong, 'TypeId' ),
              ( ['in'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'BytesWritten' )),
    COMMETHOD([], HRESULT, 'OutputTypedDataVirtual',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulonglong, 'Module' ),
              ( ['in'], c_ulong, 'TypeId' ),
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'ReadTypedDataPhysical',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulonglong, 'Module' ),
              ( ['in'], c_ulong, 'TypeId' ),
              ( ['in', 'out'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['in', 'out', 'optional'], POINTER(c_ulong), 'BytesRead' )),
    COMMETHOD([], HRESULT, 'WriteTypedDataPhysical',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulonglong, 'Module' ),
              ( ['in'], c_ulong, 'TypeId' ),
              ( ['in'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'BytesWritten' )),
    COMMETHOD([], HRESULT, 'OutputTypedDataPhysical',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulonglong, 'Module' ),
              ( ['in'], c_ulong, 'TypeId' ),
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'GetScope',
              ( ['out', 'optional'], POINTER(c_ulonglong), 'InstructionOffset' ),
              ( ['out', 'optional'], POINTER(_DEBUG_STACK_FRAME), 'ScopeFrame' ),
              ( ['out', 'optional'], c_void_p, 'ScopeContext' ),
              ( ['in', 'optional'], c_ulong, 'ScopeContextSize' )),
    COMMETHOD([], HRESULT, 'SetScope',
              ( ['in'], c_ulonglong, 'InstructionOffset' ),
              ( ['in', 'optional'], POINTER(_DEBUG_STACK_FRAME), 'ScopeFrame' ),
              ( ['in', 'optional'], c_void_p, 'ScopeContext' ),
              ( ['in', 'optional'], c_ulong, 'ScopeContextSize' )),
    COMMETHOD([], HRESULT, 'ResetScope'),
    COMMETHOD([], HRESULT, 'GetScopeSymbolGroup',
              ( ['in'], c_ulong, 'Flags' ),
              ( ['in', 'optional'], POINTER(IDebugSymbolGroup), 'Update' ),
              ( ['out', 'optional'], POINTER(POINTER(IDebugSymbolGroup)), 'Symbols' )),
    COMMETHOD([], HRESULT, 'CreateSymbolGroup',
              ( ['out'], POINTER(POINTER(IDebugSymbolGroup)), 'Group' )),
    COMMETHOD([], HRESULT, 'StartSymbolMatch',
              ( ['in'], STRING, 'Pattern' ),
              ( ['out'], POINTER(c_ulonglong), 'Handle' )),
    COMMETHOD([], HRESULT, 'GetNextSymbolMatch',
              ( ['in'], c_ulonglong, 'Handle' ),
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'MatchSize' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'EndSymbolMatch',
              ( ['in'], c_ulonglong, 'Handle' )),
    COMMETHOD([], HRESULT, 'Reload',
              ( ['in'], STRING, 'Module' )),
    COMMETHOD([], HRESULT, 'GetSymbolPath',
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'PathSize' )),
    COMMETHOD([], HRESULT, 'SetSymbolPath',
              ( ['in'], STRING, 'Path' )),
    COMMETHOD([], HRESULT, 'AppendSymbolPath',
              ( ['in'], STRING, 'Addition' )),
    COMMETHOD([], HRESULT, 'GetImagePath',
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'PathSize' )),
    COMMETHOD([], HRESULT, 'SetImagePath',
              ( ['in'], STRING, 'Path' )),
    COMMETHOD([], HRESULT, 'AppendImagePath',
              ( ['in'], STRING, 'Addition' )),
    COMMETHOD([], HRESULT, 'GetSourcePath',
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'PathSize' )),
    COMMETHOD([], HRESULT, 'GetSourcePathElement',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ElementSize' )),
    COMMETHOD([], HRESULT, 'SetSourcePath',
              ( ['in'], STRING, 'Path' )),
    COMMETHOD([], HRESULT, 'AppendSourcePath',
              ( ['in'], STRING, 'Addition' )),
    COMMETHOD([], HRESULT, 'FindSourceFile',
              ( ['in'], c_ulong, 'StartElement' ),
              ( ['in'], STRING, 'File' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'FoundElement' ),
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'FoundSize' )),
    COMMETHOD([], HRESULT, 'GetSourceFileLineOffsets',
              ( ['in'], STRING, 'File' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferLines' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'FileLines' )),
    COMMETHOD([], HRESULT, 'GetModuleVersionInformation',
              ( ['in'], c_ulong, 'Index' ),
              ( ['in'], c_ulonglong, 'Base' ),
              ( ['in'], STRING, 'Item' ),
              ( ['in', 'out', 'optional'], c_void_p, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'VerInfoSize' )),
    COMMETHOD([], HRESULT, 'GetModuleNameString',
              ( ['in'], c_ulong, 'Which' ),
              ( ['in'], c_ulong, 'Index' ),
              ( ['in'], c_ulonglong, 'Base' ),
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'NameSize' )),
    COMMETHOD([], HRESULT, 'GetConstantName',
              ( ['in'], c_ulonglong, 'Module' ),
              ( ['in'], c_ulong, 'TypeId' ),
              ( ['in'], c_ulonglong, 'Value' ),
              ( ['in', 'out', 'optional'], STRING, 'NameBuffer' ),
              ( ['in', 'optional'], c_ulong, 'NameBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'NameSize' )),
    COMMETHOD([], HRESULT, 'GetFieldName',
              ( ['in'], c_ulonglong, 'Module' ),
              ( ['in'], c_ulong, 'TypeId' ),
              ( ['in'], c_ulong, 'FieldIndex' ),
              ( ['in', 'out', 'optional'], STRING, 'NameBuffer' ),
              ( ['in', 'optional'], c_ulong, 'NameBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'NameSize' )),
    COMMETHOD([], HRESULT, 'GetTypeOptions',
              ( ['out'], POINTER(c_ulong), 'Options' )),
    COMMETHOD([], HRESULT, 'AddTypeOptions',
              ( ['in'], c_ulong, 'Options' )),
    COMMETHOD([], HRESULT, 'RemoveTypeOptions',
              ( ['in'], c_ulong, 'Options' )),
    COMMETHOD([], HRESULT, 'SetTypeOptions',
              ( ['in'], c_ulong, 'Options' )),
]
################################################################
## code template for IDebugSymbols2 implementation
##class IDebugSymbols2_Impl(object):
##    def GetTypeOptions(self):
##        '-no docstring-'
##        #return Options
##
##    def GetSymbolOptions(self):
##        '-no docstring-'
##        #return Options
##
##    def FindSourceFile(self, StartElement, File, Flags, BufferSize):
##        '-no docstring-'
##        #return FoundElement, Buffer, FoundSize
##
##    def GetOffsetTypeId(self, Offset):
##        '-no docstring-'
##        #return TypeId, Module
##
##    def GetTypeId(self, Module, Name):
##        '-no docstring-'
##        #return TypeId
##
##    def GetSourcePath(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, PathSize
##
##    def GetOffsetByName(self, Symbol):
##        '-no docstring-'
##        #return Offset
##
##    def WriteTypedDataVirtual(self, Offset, Module, TypeId, Buffer, BufferSize):
##        '-no docstring-'
##        #return BytesWritten
##
##    def SetSourcePath(self, Path):
##        '-no docstring-'
##        #return 
##
##    def RemoveSymbolOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def ReadTypedDataPhysical(self, Offset, Module, TypeId, BufferSize):
##        '-no docstring-'
##        #return Buffer, BytesRead
##
##    def GetSymbolPath(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, PathSize
##
##    def AppendSymbolPath(self, Addition):
##        '-no docstring-'
##        #return 
##
##    def GetModuleByOffset(self, Offset, StartIndex):
##        '-no docstring-'
##        #return Index, Base
##
##    def GetNextSymbolMatch(self, Handle, BufferSize):
##        '-no docstring-'
##        #return Buffer, MatchSize, Offset
##
##    def GetTypeName(self, Module, TypeId, NameBufferSize):
##        '-no docstring-'
##        #return NameBuffer, NameSize
##
##    def GetSymbolTypeId(self, Symbol):
##        '-no docstring-'
##        #return TypeId, Module
##
##    def GetLineByOffset(self, Offset, FileBufferSize):
##        '-no docstring-'
##        #return Line, FileBuffer, FileSize, Displacement
##
##    def AppendSourcePath(self, Addition):
##        '-no docstring-'
##        #return 
##
##    def GetImagePath(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, PathSize
##
##    def GetSourceFileLineOffsets(self, File, BufferLines):
##        '-no docstring-'
##        #return Buffer, FileLines
##
##    def GetConstantName(self, Module, TypeId, Value, NameBufferSize):
##        '-no docstring-'
##        #return NameBuffer, NameSize
##
##    def SetTypeOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def WriteTypedDataPhysical(self, Offset, Module, TypeId, Buffer, BufferSize):
##        '-no docstring-'
##        #return BytesWritten
##
##    def StartSymbolMatch(self, Pattern):
##        '-no docstring-'
##        #return Handle
##
##    def SetScope(self, InstructionOffset, ScopeFrame, ScopeContext, ScopeContextSize):
##        '-no docstring-'
##        #return 
##
##    def GetScopeSymbolGroup(self, Flags, Update):
##        '-no docstring-'
##        #return Symbols
##
##    def RemoveTypeOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def AddSymbolOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def GetNearNameByOffset(self, Offset, Delta, NameBufferSize):
##        '-no docstring-'
##        #return NameBuffer, NameSize, Displacement
##
##    def GetFieldOffset(self, Module, TypeId, Field):
##        '-no docstring-'
##        #return Offset
##
##    def GetScope(self, ScopeContextSize):
##        '-no docstring-'
##        #return InstructionOffset, ScopeFrame, ScopeContext
##
##    def GetFieldName(self, Module, TypeId, FieldIndex, NameBufferSize):
##        '-no docstring-'
##        #return NameBuffer, NameSize
##
##    def AddTypeOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def SetImagePath(self, Path):
##        '-no docstring-'
##        #return 
##
##    def AppendImagePath(self, Addition):
##        '-no docstring-'
##        #return 
##
##    def GetModuleNameString(self, Which, Index, Base, BufferSize):
##        '-no docstring-'
##        #return Buffer, NameSize
##
##    def Reload(self, Module):
##        '-no docstring-'
##        #return 
##
##    def GetModuleNames(self, Index, Base, ImageNameBufferSize, ModuleNameBufferSize, LoadedImageNameBufferSize):
##        '-no docstring-'
##        #return ImageNameBuffer, ImageNameSize, ModuleNameBuffer, ModuleNameSize, LoadedImageNameBuffer, LoadedImageNameSize
##
##    def GetTypeSize(self, Module, TypeId):
##        '-no docstring-'
##        #return Size
##
##    def EndSymbolMatch(self, Handle):
##        '-no docstring-'
##        #return 
##
##    def OutputTypedDataVirtual(self, OutputControl, Offset, Module, TypeId, Flags):
##        '-no docstring-'
##        #return 
##
##    def GetModuleByIndex(self, Index):
##        '-no docstring-'
##        #return Base
##
##    def GetOffsetByLine(self, Line, File):
##        '-no docstring-'
##        #return Offset
##
##    def CreateSymbolGroup(self):
##        '-no docstring-'
##        #return Group
##
##    def ReadTypedDataVirtual(self, Offset, Module, TypeId, BufferSize):
##        '-no docstring-'
##        #return Buffer, BytesRead
##
##    def ResetScope(self):
##        '-no docstring-'
##        #return 
##
##    def GetNumberModules(self):
##        '-no docstring-'
##        #return Loaded, Unloaded
##
##    def GetNameByOffset(self, Offset, NameBufferSize):
##        '-no docstring-'
##        #return NameBuffer, NameSize, Displacement
##
##    def GetSourcePathElement(self, Index, BufferSize):
##        '-no docstring-'
##        #return Buffer, ElementSize
##
##    def GetModuleParameters(self, Count, Bases, Start):
##        '-no docstring-'
##        #return Params
##
##    def SetSymbolPath(self, Path):
##        '-no docstring-'
##        #return 
##
##    def GetSymbolModule(self, Symbol):
##        '-no docstring-'
##        #return Base
##
##    def GetModuleByModuleName(self, Name, StartIndex):
##        '-no docstring-'
##        #return Index, Base
##
##    def SetSymbolOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def GetModuleVersionInformation(self, Index, Base, Item, BufferSize):
##        '-no docstring-'
##        #return Buffer, VerInfoSize
##
##    def OutputTypedDataPhysical(self, OutputControl, Offset, Module, TypeId, Flags):
##        '-no docstring-'
##        #return 
##


# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0093'
DEBUG_DATA_OffsetKThreadState = 674
__MIDL___MIDL_itf_DbgEng_0001_0077_0093 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0030'
DEBUG_DATA_MmSystemPtesStartAddr = 200
__MIDL___MIDL_itf_DbgEng_0001_0077_0030 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0073'
DEBUG_STACK_PARAMETERS_NEWLINE = 1024
__MIDL___MIDL_itf_DbgEng_0001_0073_0073 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0031'
DEBUG_DATA_MmSystemPtesEndAddr = 208
__MIDL___MIDL_itf_DbgEng_0001_0077_0031 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0064_0010'
DEBUG_REQUEST_TARGET_EXCEPTION_RECORD = 3
__MIDL___MIDL_itf_DbgEng_0001_0064_0010 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0032'
DEBUG_DATA_MmSubsectionBaseAddr = 216
__MIDL___MIDL_itf_DbgEng_0001_0077_0032 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0080'
DEBUG_DUMP_DEFAULT = 1025
__MIDL___MIDL_itf_DbgEng_0001_0073_0080 = c_int # enum
IDebugClient._methods_ = [
    COMMETHOD([], HRESULT, 'AttachKernel',
              ( ['in'], c_ulong, 'Flags' ),
              ( ['in', 'optional'], STRING, 'ConnectOptions' )),
    COMMETHOD([], HRESULT, 'GetKernelConnectionOptions',
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'OptionsSize' )),
    COMMETHOD([], HRESULT, 'SetKernelConnectionOptions',
              ( ['in'], STRING, 'Options' )),
    COMMETHOD([], HRESULT, 'StartProcessServer',
              ( ['in'], c_ulong, 'Flags' ),
              ( ['in'], STRING, 'Options' ),
              ( ['in', 'optional'], c_void_p, 'Reserved' )),
    COMMETHOD([], HRESULT, 'ConnectProcessServer',
              ( ['in'], STRING, 'RemoteOptions' ),
              ( ['out'], POINTER(c_ulonglong), 'Server' )),
    COMMETHOD([], HRESULT, 'DisconnectProcessServer',
              ( ['in'], c_ulonglong, 'Server' )),
    COMMETHOD([], HRESULT, 'GetRunningProcessSystemIds',
              ( ['in'], c_ulonglong, 'Server' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'Ids' ),
              ( ['in', 'optional'], c_ulong, 'Count' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ActualCount' )),
    COMMETHOD([], HRESULT, 'GetRunningProcessSystemIdByExecutableName',
              ( ['in'], c_ulonglong, 'Server' ),
              ( ['in'], STRING, 'ExeName' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetRunningProcessDescription',
              ( ['in'], c_ulonglong, 'Server' ),
              ( ['in'], c_ulong, 'SystemId' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out', 'optional'], STRING, 'ExeName' ),
              ( ['in', 'optional'], c_ulong, 'ExeNameSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ActualExeNameSize' ),
              ( ['out', 'optional'], STRING, 'Description' ),
              ( ['in', 'optional'], c_ulong, 'DescriptionSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ActualDescriptionSize' )),
    COMMETHOD([], HRESULT, 'AttachProcess',
              ( ['in'], c_ulonglong, 'Server' ),
              ( ['in'], c_ulong, 'ProcessId' ),
              ( ['in'], c_ulong, 'AttachFlags' )),
    COMMETHOD([], HRESULT, 'CreateProcess',
              ( ['in'], c_ulonglong, 'Server' ),
              ( ['in'], STRING, 'CommandLine' ),
              ( ['in'], c_ulong, 'CreateFlags' )),
    COMMETHOD([], HRESULT, 'CreateProcessAndAttach',
              ( ['in'], c_ulonglong, 'Server' ),
              ( ['in', 'optional'], STRING, 'CommandLine' ),
              ( ['in', 'optional'], c_ulong, 'CreateFlags' ),
              ( ['in', 'optional'], c_ulong, 'ProcessId' ),
              ( ['in', 'optional'], c_ulong, 'AttachFlags' )),
    COMMETHOD([], HRESULT, 'GetProcessOptions',
              ( ['out'], POINTER(c_ulong), 'Options' )),
    COMMETHOD([], HRESULT, 'AddProcessOptions',
              ( ['in'], c_ulong, 'Options' )),
    COMMETHOD([], HRESULT, 'RemoveProcessOptions',
              ( ['in'], c_ulong, 'Options' )),
    COMMETHOD([], HRESULT, 'SetProcessOptions',
              ( ['in'], c_ulong, 'Options' )),
    COMMETHOD([], HRESULT, 'OpenDumpFile',
              ( ['in'], STRING, 'DumpFile' )),
    COMMETHOD([], HRESULT, 'WriteDumpFile',
              ( ['in'], STRING, 'DumpFile' ),
              ( ['in'], c_ulong, 'Qualifier' )),
    COMMETHOD([], HRESULT, 'ConnectSession',
              ( ['in'], c_ulong, 'Flags' ),
              ( ['in'], c_ulong, 'HistoryLimit' )),
    COMMETHOD([], HRESULT, 'StartServer',
              ( ['in'], STRING, 'Options' )),
    COMMETHOD([], HRESULT, 'OutputServers',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], STRING, 'Machine' ),
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'TerminateProcesses'),
    COMMETHOD([], HRESULT, 'DetachProcesses'),
    COMMETHOD([], HRESULT, 'EndSession',
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'GetExitCode',
              ( ['out'], POINTER(c_ulong), 'Code' )),
    COMMETHOD([], HRESULT, 'DispatchCallbacks',
              ( ['in'], c_ulong, 'Timeout' )),
    COMMETHOD([], HRESULT, 'ExitDispatch',
              ( ['in'], POINTER(IDebugClient), 'Client' )),
    COMMETHOD([], HRESULT, 'CreateClient',
              ( ['out'], POINTER(POINTER(IDebugClient)), 'Client' )),
    COMMETHOD([], HRESULT, 'GetInputCallbacks',
              ( ['out'], POINTER(POINTER(IDebugInputCallbacks)), 'Callbacks' )),
    COMMETHOD([], HRESULT, 'SetInputCallbacks',
              ( ['in', 'optional'], POINTER(IDebugInputCallbacks), 'Callbacks' )),
    COMMETHOD([], HRESULT, 'GetOutputCallbacks',
              ( ['out'], POINTER(POINTER(IDebugOutputCallbacks)), 'Callbacks' )),
    COMMETHOD([], HRESULT, 'SetOutputCallbacks',
              ( ['in', 'optional'], POINTER(IDebugOutputCallbacks), 'Callbacks' )),
    COMMETHOD([], HRESULT, 'GetOutputMask',
              ( ['out'], POINTER(c_ulong), 'Mask' )),
    COMMETHOD([], HRESULT, 'SetOutputMask',
              ( ['in'], c_ulong, 'Mask' )),
    COMMETHOD([], HRESULT, 'GetOtherOutputMask',
              ( ['in'], POINTER(IDebugClient), 'Client' ),
              ( ['out'], POINTER(c_ulong), 'Mask' )),
    COMMETHOD([], HRESULT, 'SetOtherOutputMask',
              ( ['in'], POINTER(IDebugClient), 'Client' ),
              ( ['in'], c_ulong, 'Mask' )),
    COMMETHOD([], HRESULT, 'GetOutputWidth',
              ( ['out'], POINTER(c_ulong), 'Columns' )),
    COMMETHOD([], HRESULT, 'SetOutputWidth',
              ( ['in'], c_ulong, 'Columns' )),
    COMMETHOD([], HRESULT, 'GetOutputLinePrefix',
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'PrefixSize' )),
    COMMETHOD([], HRESULT, 'SetOutputLinePrefix',
              ( ['in', 'optional'], STRING, 'Prefix' )),
    COMMETHOD([], HRESULT, 'GetIdentity',
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'IdentitySize' )),
    COMMETHOD([], HRESULT, 'OutputIdentity',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['in'], STRING, 'Format' )),
    COMMETHOD([], HRESULT, 'GetEventCallbacks',
              ( ['out'], POINTER(POINTER(IDebugEventCallbacks)), 'Callbacks' )),
    COMMETHOD([], HRESULT, 'SetEventCallbacks',
              ( ['in', 'optional'], POINTER(IDebugEventCallbacks), 'Callbacks' )),
    COMMETHOD([], HRESULT, 'FlushCallbacks'),
]
################################################################
## code template for IDebugClient implementation
##class IDebugClient_Impl(object):
##    def StartProcessServer(self, Flags, Options, Reserved):
##        '-no docstring-'
##        #return 
##
##    def SetEventCallbacks(self, Callbacks):
##        '-no docstring-'
##        #return 
##
##    def GetOutputMask(self):
##        '-no docstring-'
##        #return Mask
##
##    def OpenDumpFile(self, DumpFile):
##        '-no docstring-'
##        #return 
##
##    def SetOutputMask(self, Mask):
##        '-no docstring-'
##        #return 
##
##    def TerminateProcesses(self):
##        '-no docstring-'
##        #return 
##
##    def CreateClient(self):
##        '-no docstring-'
##        #return Client
##
##    def GetRunningProcessSystemIdByExecutableName(self, Server, ExeName, Flags):
##        '-no docstring-'
##        #return Id
##
##    def ConnectSession(self, Flags, HistoryLimit):
##        '-no docstring-'
##        #return 
##
##    def GetExitCode(self):
##        '-no docstring-'
##        #return Code
##
##    def SetOutputLinePrefix(self, Prefix):
##        '-no docstring-'
##        #return 
##
##    def AddProcessOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def AttachKernel(self, Flags, ConnectOptions):
##        '-no docstring-'
##        #return 
##
##    def GetKernelConnectionOptions(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, OptionsSize
##
##    def DispatchCallbacks(self, Timeout):
##        '-no docstring-'
##        #return 
##
##    def WriteDumpFile(self, DumpFile, Qualifier):
##        '-no docstring-'
##        #return 
##
##    def ExitDispatch(self, Client):
##        '-no docstring-'
##        #return 
##
##    def SetOutputWidth(self, Columns):
##        '-no docstring-'
##        #return 
##
##    def CreateProcessAndAttach(self, Server, CommandLine, CreateFlags, ProcessId, AttachFlags):
##        '-no docstring-'
##        #return 
##
##    def RemoveProcessOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def OutputServers(self, OutputControl, Machine, Flags):
##        '-no docstring-'
##        #return 
##
##    def GetOutputLinePrefix(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, PrefixSize
##
##    def EndSession(self, Flags):
##        '-no docstring-'
##        #return 
##
##    def GetRunningProcessSystemIds(self, Server, Count):
##        '-no docstring-'
##        #return Ids, ActualCount
##
##    def CreateProcess(self, Server, CommandLine, CreateFlags):
##        '-no docstring-'
##        #return 
##
##    def SetKernelConnectionOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def DisconnectProcessServer(self, Server):
##        '-no docstring-'
##        #return 
##
##    def GetOutputCallbacks(self):
##        '-no docstring-'
##        #return Callbacks
##
##    def SetOtherOutputMask(self, Client, Mask):
##        '-no docstring-'
##        #return 
##
##    def SetOutputCallbacks(self, Callbacks):
##        '-no docstring-'
##        #return 
##
##    def OutputIdentity(self, OutputControl, Flags, Format):
##        '-no docstring-'
##        #return 
##
##    def GetRunningProcessDescription(self, Server, SystemId, Flags, ExeNameSize, DescriptionSize):
##        '-no docstring-'
##        #return ExeName, ActualExeNameSize, Description, ActualDescriptionSize
##
##    def GetIdentity(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, IdentitySize
##
##    def StartServer(self, Options):
##        '-no docstring-'
##        #return 
##
##    def AttachProcess(self, Server, ProcessId, AttachFlags):
##        '-no docstring-'
##        #return 
##
##    def FlushCallbacks(self):
##        '-no docstring-'
##        #return 
##
##    def GetEventCallbacks(self):
##        '-no docstring-'
##        #return Callbacks
##
##    def DetachProcesses(self):
##        '-no docstring-'
##        #return 
##
##    def GetOtherOutputMask(self, Client):
##        '-no docstring-'
##        #return Mask
##
##    def GetOutputWidth(self):
##        '-no docstring-'
##        #return Columns
##
##    def ConnectProcessServer(self, RemoteOptions):
##        '-no docstring-'
##        #return Server
##
##    def SetInputCallbacks(self, Callbacks):
##        '-no docstring-'
##        #return 
##
##    def SetProcessOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def GetProcessOptions(self):
##        '-no docstring-'
##        #return Options
##
##    def GetInputCallbacks(self):
##        '-no docstring-'
##        #return Callbacks
##


# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0033'
DEBUG_DATA_MmNumberOfPagingFilesAddr = 224
__MIDL___MIDL_itf_DbgEng_0001_0077_0033 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0082'
DEBUG_DUMP_IMAGE_FILE = 1027
__MIDL___MIDL_itf_DbgEng_0001_0073_0082 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0034'
DEBUG_DATA_MmLowestPhysicalPageAddr = 232
__MIDL___MIDL_itf_DbgEng_0001_0077_0034 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0077'
DEBUG_CLASS_USER_WINDOWS = 2
__MIDL___MIDL_itf_DbgEng_0001_0073_0077 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0035'
DEBUG_DATA_MmHighestPhysicalPageAddr = 240
__MIDL___MIDL_itf_DbgEng_0001_0077_0035 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0094'
DEBUG_DATA_OffsetKThreadBStore = 676
__MIDL___MIDL_itf_DbgEng_0001_0077_0094 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0036'
DEBUG_DATA_MmNumberOfPhysicalPagesAddr = 248
__MIDL___MIDL_itf_DbgEng_0001_0077_0036 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0079'
DEBUG_DUMP_SMALL = 1024
__MIDL___MIDL_itf_DbgEng_0001_0073_0079 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0037'
DEBUG_DATA_MmMaximumNonPagedPoolInBytesAddr = 256
__MIDL___MIDL_itf_DbgEng_0001_0077_0037 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0008'
DEBUG_PROC_DESC_DEFAULT = 0
__MIDL___MIDL_itf_DbgEng_0001_0068_0008 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0038'
DEBUG_DATA_MmNonPagedSystemStartAddr = 264
__MIDL___MIDL_itf_DbgEng_0001_0077_0038 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0076'
DEBUG_CLASS_KERNEL = 1
__MIDL___MIDL_itf_DbgEng_0001_0073_0076 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0081'
DEBUG_DUMP_FULL = 1026
__MIDL___MIDL_itf_DbgEng_0001_0073_0081 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0040'
DEBUG_DATA_MmNonPagedPoolEndAddr = 280
__MIDL___MIDL_itf_DbgEng_0001_0077_0040 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0041'
DEBUG_DATA_MmPagedPoolStartAddr = 288
__MIDL___MIDL_itf_DbgEng_0001_0077_0041 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0095'
DEBUG_DATA_OffsetKThreadBStoreLimit = 678
__MIDL___MIDL_itf_DbgEng_0001_0077_0095 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0042'
DEBUG_DATA_MmPagedPoolEndAddr = 296
__MIDL___MIDL_itf_DbgEng_0001_0077_0042 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0043'
DEBUG_DATA_MmPagedPoolInformationAddr = 304
__MIDL___MIDL_itf_DbgEng_0001_0077_0043 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0011'
DEBUG_PROC_DESC_NO_MTS_PACKAGES = 4
__MIDL___MIDL_itf_DbgEng_0001_0068_0011 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0044'
DEBUG_DATA_MmPageSize = 312
__MIDL___MIDL_itf_DbgEng_0001_0077_0044 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0045'
DEBUG_DATA_MmSizeOfPagedPoolInBytesAddr = 320
__MIDL___MIDL_itf_DbgEng_0001_0077_0045 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0046'
DEBUG_DATA_MmTotalCommitLimitAddr = 328
__MIDL___MIDL_itf_DbgEng_0001_0077_0046 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0091_0017'
DEBUG_SCOPE_GROUP_LOCALS = 2
__MIDL___MIDL_itf_DbgEng_0001_0091_0017 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0088'
DEBUG_USER_WINDOWS_PROCESS = 0
__MIDL___MIDL_itf_DbgEng_0001_0073_0088 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0047'
DEBUG_DATA_MmTotalCommittedPagesAddr = 336
__MIDL___MIDL_itf_DbgEng_0001_0077_0047 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0089'
DEBUG_USER_WINDOWS_PROCESS_SERVER = 1
__MIDL___MIDL_itf_DbgEng_0001_0073_0089 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0048'
DEBUG_DATA_MmSharedCommitAddr = 344
__MIDL___MIDL_itf_DbgEng_0001_0077_0048 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0090'
DEBUG_USER_WINDOWS_IDNA = 2
__MIDL___MIDL_itf_DbgEng_0001_0073_0090 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0049'
DEBUG_DATA_MmDriverCommitAddr = 352
__MIDL___MIDL_itf_DbgEng_0001_0077_0049 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0091'
DEBUG_EXTENSION_AT_ENGINE = 0
__MIDL___MIDL_itf_DbgEng_0001_0073_0091 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0050'
DEBUG_DATA_MmProcessCommitAddr = 360
__MIDL___MIDL_itf_DbgEng_0001_0077_0050 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0092'
DEBUG_EXECUTE_DEFAULT = 0
__MIDL___MIDL_itf_DbgEng_0001_0073_0092 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0051'
DEBUG_DATA_MmPagedPoolCommitAddr = 368
__MIDL___MIDL_itf_DbgEng_0001_0077_0051 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0093'
DEBUG_EXECUTE_ECHO = 1
__MIDL___MIDL_itf_DbgEng_0001_0073_0093 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0052'
DEBUG_DATA_MmExtendedCommitAddr = 376
__MIDL___MIDL_itf_DbgEng_0001_0077_0052 = c_int # enum
class _DEBUG_THREAD_BASIC_INFORMATION(Structure):
    pass
_DEBUG_THREAD_BASIC_INFORMATION._fields_ = [
    ('Valid', c_ulong),
    ('ExitStatus', c_ulong),
    ('PriorityClass', c_ulong),
    ('Priority', c_ulong),
    ('CreateTime', c_ulonglong),
    ('ExitTime', c_ulonglong),
    ('KernelTime', c_ulonglong),
    ('UserTime', c_ulonglong),
    ('StartOffset', c_ulonglong),
    ('Affinity', c_ulonglong),
]
assert sizeof(_DEBUG_THREAD_BASIC_INFORMATION) == 64, sizeof(_DEBUG_THREAD_BASIC_INFORMATION)
assert alignment(_DEBUG_THREAD_BASIC_INFORMATION) == 8, alignment(_DEBUG_THREAD_BASIC_INFORMATION)

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0053'
DEBUG_DATA_MmZeroedPageListHeadAddr = 384
__MIDL___MIDL_itf_DbgEng_0001_0077_0053 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0013'
DEBUG_STATUS_REVERSE_STEP_BRANCH = 12
__MIDL___MIDL_itf_DbgEng_0001_0073_0013 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0054'
DEBUG_DATA_MmFreePageListHeadAddr = 392
__MIDL___MIDL_itf_DbgEng_0001_0077_0054 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0096'
DEBUG_FILTER_CREATE_THREAD = 0
__MIDL___MIDL_itf_DbgEng_0001_0073_0096 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0096'
DEBUG_DATA_SizeEProcess = 680
__MIDL___MIDL_itf_DbgEng_0001_0077_0096 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0097'
DEBUG_FILTER_EXIT_THREAD = 1
__MIDL___MIDL_itf_DbgEng_0001_0073_0097 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0056'
DEBUG_DATA_MmModifiedPageListHeadAddr = 408
__MIDL___MIDL_itf_DbgEng_0001_0077_0056 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0098'
DEBUG_FILTER_CREATE_PROCESS = 2
__MIDL___MIDL_itf_DbgEng_0001_0073_0098 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0057'
DEBUG_DATA_MmModifiedNoWritePageListHeadAddr = 416
__MIDL___MIDL_itf_DbgEng_0001_0077_0057 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0099'
DEBUG_FILTER_EXIT_PROCESS = 3
__MIDL___MIDL_itf_DbgEng_0001_0073_0099 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0058'
DEBUG_DATA_MmAvailablePagesAddr = 424
__MIDL___MIDL_itf_DbgEng_0001_0077_0058 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0080_0006'
DEBUG_VSEARCH_WRITABLE_ONLY = 1
__MIDL___MIDL_itf_DbgEng_0001_0080_0006 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0100'
DEBUG_FILTER_LOAD_MODULE = 4
__MIDL___MIDL_itf_DbgEng_0001_0073_0100 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0091_0012'
DEBUG_SYMTYPE_EXPORT = 4
__MIDL___MIDL_itf_DbgEng_0001_0091_0012 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0059'
DEBUG_DATA_MmResidentAvailablePagesAddr = 432
__MIDL___MIDL_itf_DbgEng_0001_0077_0059 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0098'
DEBUG_DATA_OffsetEprocessParentCID = 684
__MIDL___MIDL_itf_DbgEng_0001_0077_0098 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0060'
DEBUG_DATA_PoolTrackTableAddr = 440
__MIDL___MIDL_itf_DbgEng_0001_0077_0060 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0102'
DEBUG_FILTER_SYSTEM_ERROR = 6
__MIDL___MIDL_itf_DbgEng_0001_0073_0102 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0061'
DEBUG_DATA_NonPagedPoolDescriptorAddr = 448
__MIDL___MIDL_itf_DbgEng_0001_0077_0061 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0103'
DEBUG_FILTER_INITIAL_BREAKPOINT = 7
__MIDL___MIDL_itf_DbgEng_0001_0073_0103 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0062'
DEBUG_DATA_MmHighestUserAddressAddr = 456
__MIDL___MIDL_itf_DbgEng_0001_0077_0062 = c_int # enum
class IDebugClient4(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'IDebugClient4'
    _iid_ = GUID('{CA83C3DE-5089-4CF8-93C8-D892387F2A5E}')
    _idlflags_ = []
IDebugClient4._methods_ = [
    COMMETHOD([], HRESULT, 'AttachKernel',
              ( ['in'], c_ulong, 'Flags' ),
              ( ['in', 'optional'], STRING, 'ConnectOptions' )),
    COMMETHOD([], HRESULT, 'GetKernelConnectionOptions',
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'OptionsSize' )),
    COMMETHOD([], HRESULT, 'SetKernelConnectionOptions',
              ( ['in'], STRING, 'Options' )),
    COMMETHOD([], HRESULT, 'StartProcessServer',
              ( ['in'], c_ulong, 'Flags' ),
              ( ['in'], STRING, 'Options' ),
              ( ['in', 'optional'], c_void_p, 'Reserved' )),
    COMMETHOD([], HRESULT, 'ConnectProcessServer',
              ( ['in'], STRING, 'RemoteOptions' ),
              ( ['out'], POINTER(c_ulonglong), 'Server' )),
    COMMETHOD([], HRESULT, 'DisconnectProcessServer',
              ( ['in'], c_ulonglong, 'Server' )),
    COMMETHOD([], HRESULT, 'GetRunningProcessSystemIds',
              ( ['in'], c_ulonglong, 'Server' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'Ids' ),
              ( ['in', 'optional'], c_ulong, 'Count' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ActualCount' )),
    COMMETHOD([], HRESULT, 'GetRunningProcessSystemIdByExecutableName',
              ( ['in'], c_ulonglong, 'Server' ),
              ( ['in'], STRING, 'ExeName' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetRunningProcessDescription',
              ( ['in'], c_ulonglong, 'Server' ),
              ( ['in'], c_ulong, 'SystemId' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out', 'optional'], STRING, 'ExeName' ),
              ( ['in', 'optional'], c_ulong, 'ExeNameSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ActualExeNameSize' ),
              ( ['out', 'optional'], STRING, 'Description' ),
              ( ['in', 'optional'], c_ulong, 'DescriptionSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ActualDescriptionSize' )),
    COMMETHOD([], HRESULT, 'AttachProcess',
              ( ['in'], c_ulonglong, 'Server' ),
              ( ['in'], c_ulong, 'ProcessId' ),
              ( ['in'], c_ulong, 'AttachFlags' )),
    COMMETHOD([], HRESULT, 'CreateProcess',
              ( ['in'], c_ulonglong, 'Server' ),
              ( ['in'], STRING, 'CommandLine' ),
              ( ['in'], c_ulong, 'CreateFlags' )),
    COMMETHOD([], HRESULT, 'CreateProcessAndAttach',
              ( ['in'], c_ulonglong, 'Server' ),
              ( ['in', 'optional'], STRING, 'CommandLine' ),
              ( ['in', 'optional'], c_ulong, 'CreateFlags' ),
              ( ['in', 'optional'], c_ulong, 'ProcessId' ),
              ( ['in', 'optional'], c_ulong, 'AttachFlags' )),
    COMMETHOD([], HRESULT, 'GetProcessOptions',
              ( ['out'], POINTER(c_ulong), 'Options' )),
    COMMETHOD([], HRESULT, 'AddProcessOptions',
              ( ['in'], c_ulong, 'Options' )),
    COMMETHOD([], HRESULT, 'RemoveProcessOptions',
              ( ['in'], c_ulong, 'Options' )),
    COMMETHOD([], HRESULT, 'SetProcessOptions',
              ( ['in'], c_ulong, 'Options' )),
    COMMETHOD([], HRESULT, 'OpenDumpFile',
              ( ['in'], STRING, 'DumpFile' )),
    COMMETHOD([], HRESULT, 'WriteDumpFile',
              ( ['in'], STRING, 'DumpFile' ),
              ( ['in'], c_ulong, 'Qualifier' )),
    COMMETHOD([], HRESULT, 'ConnectSession',
              ( ['in'], c_ulong, 'Flags' ),
              ( ['in'], c_ulong, 'HistoryLimit' )),
    COMMETHOD([], HRESULT, 'StartServer',
              ( ['in'], STRING, 'Options' )),
    COMMETHOD([], HRESULT, 'OutputServers',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], STRING, 'Machine' ),
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'TerminateProcesses'),
    COMMETHOD([], HRESULT, 'DetachProcesses'),
    COMMETHOD([], HRESULT, 'EndSession',
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'GetExitCode',
              ( ['out'], POINTER(c_ulong), 'Code' )),
    COMMETHOD([], HRESULT, 'DispatchCallbacks',
              ( ['in'], c_ulong, 'Timeout' )),
    COMMETHOD([], HRESULT, 'ExitDispatch',
              ( ['in'], POINTER(IDebugClient), 'Client' )),
    COMMETHOD([], HRESULT, 'CreateClient',
              ( ['out'], POINTER(POINTER(IDebugClient)), 'Client' )),
    COMMETHOD([], HRESULT, 'GetInputCallbacks',
              ( ['out'], POINTER(POINTER(IDebugInputCallbacks)), 'Callbacks' )),
    COMMETHOD([], HRESULT, 'SetInputCallbacks',
              ( ['in', 'optional'], POINTER(IDebugInputCallbacks), 'Callbacks' )),
    COMMETHOD([], HRESULT, 'GetOutputCallbacks',
              ( ['out'], POINTER(POINTER(IDebugOutputCallbacks)), 'Callbacks' )),
    COMMETHOD([], HRESULT, 'SetOutputCallbacks',
              ( ['in', 'optional'], POINTER(IDebugOutputCallbacks), 'Callbacks' )),
    COMMETHOD([], HRESULT, 'GetOutputMask',
              ( ['out'], POINTER(c_ulong), 'Mask' )),
    COMMETHOD([], HRESULT, 'SetOutputMask',
              ( ['in'], c_ulong, 'Mask' )),
    COMMETHOD([], HRESULT, 'GetOtherOutputMask',
              ( ['in'], POINTER(IDebugClient), 'Client' ),
              ( ['out'], POINTER(c_ulong), 'Mask' )),
    COMMETHOD([], HRESULT, 'SetOtherOutputMask',
              ( ['in'], POINTER(IDebugClient), 'Client' ),
              ( ['in'], c_ulong, 'Mask' )),
    COMMETHOD([], HRESULT, 'GetOutputWidth',
              ( ['out'], POINTER(c_ulong), 'Columns' )),
    COMMETHOD([], HRESULT, 'SetOutputWidth',
              ( ['in'], c_ulong, 'Columns' )),
    COMMETHOD([], HRESULT, 'GetOutputLinePrefix',
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'PrefixSize' )),
    COMMETHOD([], HRESULT, 'SetOutputLinePrefix',
              ( ['in', 'optional'], STRING, 'Prefix' )),
    COMMETHOD([], HRESULT, 'GetIdentity',
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'IdentitySize' )),
    COMMETHOD([], HRESULT, 'OutputIdentity',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['in'], STRING, 'Format' )),
    COMMETHOD([], HRESULT, 'GetEventCallbacks',
              ( ['out'], POINTER(POINTER(IDebugEventCallbacks)), 'Callbacks' )),
    COMMETHOD([], HRESULT, 'SetEventCallbacks',
              ( ['in', 'optional'], POINTER(IDebugEventCallbacks), 'Callbacks' )),
    COMMETHOD([], HRESULT, 'FlushCallbacks'),
    COMMETHOD([], HRESULT, 'WriteDumpFile2',
              ( ['in'], STRING, 'DumpFile' ),
              ( ['in'], c_ulong, 'Qualifier' ),
              ( ['in'], c_ulong, 'FormatFlags' ),
              ( ['in', 'optional'], STRING, 'Comment' )),
    COMMETHOD([], HRESULT, 'AddDumpInformationFile',
              ( ['in'], STRING, 'InfoFile' ),
              ( ['in'], c_ulong, 'Type' )),
    COMMETHOD([], HRESULT, 'EndProcessServer',
              ( ['in'], c_ulonglong, 'Server' )),
    COMMETHOD([], HRESULT, 'WaitForProcessServerEnd',
              ( ['in'], c_ulong, 'Timeout' )),
    COMMETHOD([], HRESULT, 'IsKernelDebuggerEnabled'),
    COMMETHOD([], HRESULT, 'TerminateCurrentProcess'),
    COMMETHOD([], HRESULT, 'DetachCurrentProcess'),
    COMMETHOD([], HRESULT, 'AbandonCurrentProcess'),
    COMMETHOD([], HRESULT, 'GetRunningProcessSystemIdByExecutableNameWide',
              ( ['in'], c_ulonglong, 'Server' ),
              ( ['in'], POINTER(c_ushort), 'ExeName' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetRunningProcessDescriptionWide',
              ( ['in'], c_ulonglong, 'Server' ),
              ( ['in'], c_ulong, 'SystemId' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out', 'optional'], POINTER(c_ushort), 'ExeName' ),
              ( ['in', 'optional'], c_ulong, 'ExeNameSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ActualExeNameSize' ),
              ( ['out', 'optional'], POINTER(c_ushort), 'Description' ),
              ( ['in', 'optional'], c_ulong, 'DescriptionSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ActualDescriptionSize' )),
    COMMETHOD([], HRESULT, 'CreateProcessWide',
              ( ['in'], c_ulonglong, 'Server' ),
              ( ['in'], POINTER(c_ushort), 'CommandLine' ),
              ( ['in'], c_ulong, 'CreateFlags' )),
    COMMETHOD([], HRESULT, 'CreateProcessAndAttachWide',
              ( ['in'], c_ulonglong, 'Server' ),
              ( ['in', 'optional'], POINTER(c_ushort), 'CommandLine' ),
              ( ['in', 'optional'], c_ulong, 'CreateFlags' ),
              ( ['in', 'optional'], c_ulong, 'ProcessId' ),
              ( ['in', 'optional'], c_ulong, 'AttachFlags' )),
    COMMETHOD([], HRESULT, 'OpenDumpFileWide',
              ( ['in', 'optional'], POINTER(c_ushort), 'FileName' ),
              ( ['in', 'optional'], c_ulonglong, 'FileHandle' )),
    COMMETHOD([], HRESULT, 'WriteDumpFileWide',
              ( ['in', 'optional'], POINTER(c_ushort), 'FileName' ),
              ( ['in', 'optional'], c_ulonglong, 'FileHandle' ),
              ( ['in', 'optional'], c_ulong, 'Qualifier' ),
              ( ['in', 'optional'], c_ulong, 'FormatFlags' ),
              ( ['in', 'optional'], POINTER(c_ushort), 'Comment' )),
    COMMETHOD([], HRESULT, 'AddDumpInformationFileWide',
              ( ['in', 'optional'], POINTER(c_ushort), 'FileName' ),
              ( ['in', 'optional'], c_ulonglong, 'FileHandle' ),
              ( ['in', 'optional'], c_ulong, 'Type' )),
    COMMETHOD([], HRESULT, 'GetNumberDumpFiles',
              ( ['out'], POINTER(c_ulong), 'Number' )),
    COMMETHOD([], HRESULT, 'GetDumpFile',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'NameSize' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'Handle' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'Type' )),
    COMMETHOD([], HRESULT, 'GetDumpFileWide',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out', 'optional'], POINTER(c_ushort), 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'NameSize' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'Handle' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'Type' )),
]
################################################################
## code template for IDebugClient4 implementation
##class IDebugClient4_Impl(object):
##    def StartProcessServer(self, Flags, Options, Reserved):
##        '-no docstring-'
##        #return 
##
##    def SetEventCallbacks(self, Callbacks):
##        '-no docstring-'
##        #return 
##
##    def GetOutputMask(self):
##        '-no docstring-'
##        #return Mask
##
##    def OpenDumpFile(self, DumpFile):
##        '-no docstring-'
##        #return 
##
##    def SetOutputMask(self, Mask):
##        '-no docstring-'
##        #return 
##
##    def TerminateProcesses(self):
##        '-no docstring-'
##        #return 
##
##    def CreateClient(self):
##        '-no docstring-'
##        #return Client
##
##    def GetRunningProcessSystemIdByExecutableName(self, Server, ExeName, Flags):
##        '-no docstring-'
##        #return Id
##
##    def ConnectSession(self, Flags, HistoryLimit):
##        '-no docstring-'
##        #return 
##
##    def GetExitCode(self):
##        '-no docstring-'
##        #return Code
##
##    def SetOutputLinePrefix(self, Prefix):
##        '-no docstring-'
##        #return 
##
##    def AddProcessOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def AttachKernel(self, Flags, ConnectOptions):
##        '-no docstring-'
##        #return 
##
##    def GetKernelConnectionOptions(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, OptionsSize
##
##    def DispatchCallbacks(self, Timeout):
##        '-no docstring-'
##        #return 
##
##    def WriteDumpFile(self, DumpFile, Qualifier):
##        '-no docstring-'
##        #return 
##
##    def ExitDispatch(self, Client):
##        '-no docstring-'
##        #return 
##
##    def DetachCurrentProcess(self):
##        '-no docstring-'
##        #return 
##
##    def SetOutputWidth(self, Columns):
##        '-no docstring-'
##        #return 
##
##    def CreateProcessAndAttach(self, Server, CommandLine, CreateFlags, ProcessId, AttachFlags):
##        '-no docstring-'
##        #return 
##
##    def GetNumberDumpFiles(self):
##        '-no docstring-'
##        #return Number
##
##    def RemoveProcessOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def OutputServers(self, OutputControl, Machine, Flags):
##        '-no docstring-'
##        #return 
##
##    def GetOutputLinePrefix(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, PrefixSize
##
##    def IsKernelDebuggerEnabled(self):
##        '-no docstring-'
##        #return 
##
##    def EndSession(self, Flags):
##        '-no docstring-'
##        #return 
##
##    def TerminateCurrentProcess(self):
##        '-no docstring-'
##        #return 
##
##    def EndProcessServer(self, Server):
##        '-no docstring-'
##        #return 
##
##    def GetRunningProcessSystemIds(self, Server, Count):
##        '-no docstring-'
##        #return Ids, ActualCount
##
##    def CreateProcess(self, Server, CommandLine, CreateFlags):
##        '-no docstring-'
##        #return 
##
##    def SetKernelConnectionOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def DisconnectProcessServer(self, Server):
##        '-no docstring-'
##        #return 
##
##    def GetOutputCallbacks(self):
##        '-no docstring-'
##        #return Callbacks
##
##    def SetOtherOutputMask(self, Client, Mask):
##        '-no docstring-'
##        #return 
##
##    def SetOutputCallbacks(self, Callbacks):
##        '-no docstring-'
##        #return 
##
##    def OutputIdentity(self, OutputControl, Flags, Format):
##        '-no docstring-'
##        #return 
##
##    def GetRunningProcessDescription(self, Server, SystemId, Flags, ExeNameSize, DescriptionSize):
##        '-no docstring-'
##        #return ExeName, ActualExeNameSize, Description, ActualDescriptionSize
##
##    def WriteDumpFile2(self, DumpFile, Qualifier, FormatFlags, Comment):
##        '-no docstring-'
##        #return 
##
##    def GetIdentity(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, IdentitySize
##
##    def WaitForProcessServerEnd(self, Timeout):
##        '-no docstring-'
##        #return 
##
##    def OpenDumpFileWide(self, FileName, FileHandle):
##        '-no docstring-'
##        #return 
##
##    def CreateProcessWide(self, Server, CommandLine, CreateFlags):
##        '-no docstring-'
##        #return 
##
##    def StartServer(self, Options):
##        '-no docstring-'
##        #return 
##
##    def AttachProcess(self, Server, ProcessId, AttachFlags):
##        '-no docstring-'
##        #return 
##
##    def AddDumpInformationFileWide(self, FileName, FileHandle, Type):
##        '-no docstring-'
##        #return 
##
##    def FlushCallbacks(self):
##        '-no docstring-'
##        #return 
##
##    def GetDumpFile(self, Index, BufferSize):
##        '-no docstring-'
##        #return Buffer, NameSize, Handle, Type
##
##    def GetEventCallbacks(self):
##        '-no docstring-'
##        #return Callbacks
##
##    def DetachProcesses(self):
##        '-no docstring-'
##        #return 
##
##    def AbandonCurrentProcess(self):
##        '-no docstring-'
##        #return 
##
##    def GetOtherOutputMask(self, Client):
##        '-no docstring-'
##        #return Mask
##
##    def GetOutputWidth(self):
##        '-no docstring-'
##        #return Columns
##
##    def GetRunningProcessSystemIdByExecutableNameWide(self, Server, ExeName, Flags):
##        '-no docstring-'
##        #return Id
##
##    def ConnectProcessServer(self, RemoteOptions):
##        '-no docstring-'
##        #return Server
##
##    def SetInputCallbacks(self, Callbacks):
##        '-no docstring-'
##        #return 
##
##    def SetProcessOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def GetRunningProcessDescriptionWide(self, Server, SystemId, Flags, ExeNameSize, DescriptionSize):
##        '-no docstring-'
##        #return ExeName, ActualExeNameSize, Description, ActualDescriptionSize
##
##    def WriteDumpFileWide(self, FileName, FileHandle, Qualifier, FormatFlags, Comment):
##        '-no docstring-'
##        #return 
##
##    def GetProcessOptions(self):
##        '-no docstring-'
##        #return Options
##
##    def GetDumpFileWide(self, Index, BufferSize):
##        '-no docstring-'
##        #return Buffer, NameSize, Handle, Type
##
##    def CreateProcessAndAttachWide(self, Server, CommandLine, CreateFlags, ProcessId, AttachFlags):
##        '-no docstring-'
##        #return 
##
##    def AddDumpInformationFile(self, InfoFile, Type):
##        '-no docstring-'
##        #return 
##
##    def GetInputCallbacks(self):
##        '-no docstring-'
##        #return Callbacks
##


# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0063'
DEBUG_DATA_MmSystemRangeStartAddr = 464
__MIDL___MIDL_itf_DbgEng_0001_0077_0063 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0105'
DEBUG_FILTER_DEBUGGEE_OUTPUT = 9
__MIDL___MIDL_itf_DbgEng_0001_0073_0105 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0064'
DEBUG_DATA_MmUserProbeAddressAddr = 472
__MIDL___MIDL_itf_DbgEng_0001_0077_0064 = c_int # enum
class IDebugSymbols3(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'IDebugSymbols3'
    _iid_ = GUID('{F02FBECC-50AC-4F36-9AD9-C975E8F32FF8}')
    _idlflags_ = []
class _DEBUG_OFFSET_REGION(Structure):
    pass
IDebugSymbols3._methods_ = [
    COMMETHOD([], HRESULT, 'GetSymbolOptions',
              ( ['out'], POINTER(c_ulong), 'Options' )),
    COMMETHOD([], HRESULT, 'AddSymbolOptions',
              ( ['in'], c_ulong, 'Options' )),
    COMMETHOD([], HRESULT, 'RemoveSymbolOptions',
              ( ['in'], c_ulong, 'Options' )),
    COMMETHOD([], HRESULT, 'SetSymbolOptions',
              ( ['in'], c_ulong, 'Options' )),
    COMMETHOD([], HRESULT, 'GetNameByOffset',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in', 'out', 'optional'], STRING, 'NameBuffer' ),
              ( ['in', 'optional'], c_ulong, 'NameBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'NameSize' ),
              ( ['in', 'out', 'optional'], POINTER(c_ulonglong), 'Displacement' )),
    COMMETHOD([], HRESULT, 'GetOffsetByName',
              ( ['in'], STRING, 'Symbol' ),
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'GetNearNameByOffset',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_int, 'Delta' ),
              ( ['in', 'out', 'optional'], STRING, 'NameBuffer' ),
              ( ['in', 'optional'], c_ulong, 'NameBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'NameSize' ),
              ( ['in', 'out', 'optional'], POINTER(c_ulonglong), 'Displacement' )),
    COMMETHOD([], HRESULT, 'GetLineByOffset',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'Line' ),
              ( ['out', 'optional'], STRING, 'FileBuffer' ),
              ( ['in', 'optional'], c_ulong, 'FileBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'FileSize' ),
              ( ['in', 'out', 'optional'], POINTER(c_ulonglong), 'Displacement' )),
    COMMETHOD([], HRESULT, 'GetOffsetByLine',
              ( ['in'], c_ulong, 'Line' ),
              ( ['in'], STRING, 'File' ),
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'GetNumberModules',
              ( ['out'], POINTER(c_ulong), 'Loaded' ),
              ( ['out'], POINTER(c_ulong), 'Unloaded' )),
    COMMETHOD([], HRESULT, 'GetModuleByIndex',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out'], POINTER(c_ulonglong), 'Base' )),
    COMMETHOD([], HRESULT, 'GetModuleByModuleName',
              ( ['in'], STRING, 'Name' ),
              ( ['in'], c_ulong, 'StartIndex' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'Index' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'Base' )),
    COMMETHOD([], HRESULT, 'GetModuleByOffset',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulong, 'StartIndex' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'Index' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'Base' )),
    COMMETHOD([], HRESULT, 'GetModuleNames',
              ( ['in'], c_ulong, 'Index' ),
              ( ['in'], c_ulonglong, 'Base' ),
              ( ['out', 'optional'], STRING, 'ImageNameBuffer' ),
              ( ['in', 'optional'], c_ulong, 'ImageNameBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ImageNameSize' ),
              ( ['out', 'optional'], STRING, 'ModuleNameBuffer' ),
              ( ['in', 'optional'], c_ulong, 'ModuleNameBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ModuleNameSize' ),
              ( ['out', 'optional'], STRING, 'LoadedImageNameBuffer' ),
              ( ['in', 'optional'], c_ulong, 'LoadedImageNameBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'LoadedImageNameSize' )),
    COMMETHOD([], HRESULT, 'GetModuleParameters',
              ( ['in'], c_ulong, 'Count' ),
              ( ['in', 'optional'], POINTER(c_ulonglong), 'Bases' ),
              ( ['in', 'optional'], c_ulong, 'Start' ),
              ( ['out', 'optional'], POINTER(_DEBUG_MODULE_PARAMETERS), 'Params' )),
    COMMETHOD([], HRESULT, 'GetSymbolModule',
              ( ['in'], STRING, 'Symbol' ),
              ( ['out'], POINTER(c_ulonglong), 'Base' )),
    COMMETHOD([], HRESULT, 'GetTypeName',
              ( ['in'], c_ulonglong, 'Module' ),
              ( ['in'], c_ulong, 'TypeId' ),
              ( ['in', 'out', 'optional'], STRING, 'NameBuffer' ),
              ( ['in', 'optional'], c_ulong, 'NameBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'NameSize' )),
    COMMETHOD([], HRESULT, 'GetTypeId',
              ( ['in'], c_ulonglong, 'Module' ),
              ( ['in'], STRING, 'Name' ),
              ( ['out'], POINTER(c_ulong), 'TypeId' )),
    COMMETHOD([], HRESULT, 'GetTypeSize',
              ( ['in'], c_ulonglong, 'Module' ),
              ( ['in'], c_ulong, 'TypeId' ),
              ( ['out'], POINTER(c_ulong), 'Size' )),
    COMMETHOD([], HRESULT, 'GetFieldOffset',
              ( ['in'], c_ulonglong, 'Module' ),
              ( ['in'], c_ulong, 'TypeId' ),
              ( ['in'], STRING, 'Field' ),
              ( ['out'], POINTER(c_ulong), 'Offset' )),
    COMMETHOD([], HRESULT, 'GetSymbolTypeId',
              ( ['in'], STRING, 'Symbol' ),
              ( ['out'], POINTER(c_ulong), 'TypeId' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'Module' )),
    COMMETHOD([], HRESULT, 'GetOffsetTypeId',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['out'], POINTER(c_ulong), 'TypeId' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'Module' )),
    COMMETHOD([], HRESULT, 'ReadTypedDataVirtual',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulonglong, 'Module' ),
              ( ['in'], c_ulong, 'TypeId' ),
              ( ['in', 'out'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['in', 'out', 'optional'], POINTER(c_ulong), 'BytesRead' )),
    COMMETHOD([], HRESULT, 'WriteTypedDataVirtual',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulonglong, 'Module' ),
              ( ['in'], c_ulong, 'TypeId' ),
              ( ['in'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'BytesWritten' )),
    COMMETHOD([], HRESULT, 'OutputTypedDataVirtual',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulonglong, 'Module' ),
              ( ['in'], c_ulong, 'TypeId' ),
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'ReadTypedDataPhysical',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulonglong, 'Module' ),
              ( ['in'], c_ulong, 'TypeId' ),
              ( ['in', 'out'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['in', 'out', 'optional'], POINTER(c_ulong), 'BytesRead' )),
    COMMETHOD([], HRESULT, 'WriteTypedDataPhysical',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulonglong, 'Module' ),
              ( ['in'], c_ulong, 'TypeId' ),
              ( ['in'], c_void_p, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'BytesWritten' )),
    COMMETHOD([], HRESULT, 'OutputTypedDataPhysical',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulonglong, 'Module' ),
              ( ['in'], c_ulong, 'TypeId' ),
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'GetScope',
              ( ['out', 'optional'], POINTER(c_ulonglong), 'InstructionOffset' ),
              ( ['out', 'optional'], POINTER(_DEBUG_STACK_FRAME), 'ScopeFrame' ),
              ( ['out', 'optional'], c_void_p, 'ScopeContext' ),
              ( ['in', 'optional'], c_ulong, 'ScopeContextSize' )),
    COMMETHOD([], HRESULT, 'SetScope',
              ( ['in'], c_ulonglong, 'InstructionOffset' ),
              ( ['in', 'optional'], POINTER(_DEBUG_STACK_FRAME), 'ScopeFrame' ),
              ( ['in', 'optional'], c_void_p, 'ScopeContext' ),
              ( ['in', 'optional'], c_ulong, 'ScopeContextSize' )),
    COMMETHOD([], HRESULT, 'ResetScope'),
    COMMETHOD([], HRESULT, 'GetScopeSymbolGroup',
              ( ['in'], c_ulong, 'Flags' ),
              ( ['in', 'optional'], POINTER(IDebugSymbolGroup), 'Update' ),
              ( ['out', 'optional'], POINTER(POINTER(IDebugSymbolGroup)), 'Symbols' )),
    COMMETHOD([], HRESULT, 'CreateSymbolGroup',
              ( ['out'], POINTER(POINTER(IDebugSymbolGroup)), 'Group' )),
    COMMETHOD([], HRESULT, 'StartSymbolMatch',
              ( ['in'], STRING, 'Pattern' ),
              ( ['out'], POINTER(c_ulonglong), 'Handle' )),
    COMMETHOD([], HRESULT, 'GetNextSymbolMatch',
              ( ['in'], c_ulonglong, 'Handle' ),
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'MatchSize' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'EndSymbolMatch',
              ( ['in'], c_ulonglong, 'Handle' )),
    COMMETHOD([], HRESULT, 'Reload',
              ( ['in'], STRING, 'Module' )),
    COMMETHOD([], HRESULT, 'GetSymbolPath',
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'PathSize' )),
    COMMETHOD([], HRESULT, 'SetSymbolPath',
              ( ['in'], STRING, 'Path' )),
    COMMETHOD([], HRESULT, 'AppendSymbolPath',
              ( ['in'], STRING, 'Addition' )),
    COMMETHOD([], HRESULT, 'GetImagePath',
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'PathSize' )),
    COMMETHOD([], HRESULT, 'SetImagePath',
              ( ['in'], STRING, 'Path' )),
    COMMETHOD([], HRESULT, 'AppendImagePath',
              ( ['in'], STRING, 'Addition' )),
    COMMETHOD([], HRESULT, 'GetSourcePath',
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'PathSize' )),
    COMMETHOD([], HRESULT, 'GetSourcePathElement',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ElementSize' )),
    COMMETHOD([], HRESULT, 'SetSourcePath',
              ( ['in'], STRING, 'Path' )),
    COMMETHOD([], HRESULT, 'AppendSourcePath',
              ( ['in'], STRING, 'Addition' )),
    COMMETHOD([], HRESULT, 'FindSourceFile',
              ( ['in'], c_ulong, 'StartElement' ),
              ( ['in'], STRING, 'File' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'FoundElement' ),
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'FoundSize' )),
    COMMETHOD([], HRESULT, 'GetSourceFileLineOffsets',
              ( ['in'], STRING, 'File' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferLines' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'FileLines' )),
    COMMETHOD([], HRESULT, 'GetModuleVersionInformation',
              ( ['in'], c_ulong, 'Index' ),
              ( ['in'], c_ulonglong, 'Base' ),
              ( ['in'], STRING, 'Item' ),
              ( ['in', 'out', 'optional'], c_void_p, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'VerInfoSize' )),
    COMMETHOD([], HRESULT, 'GetModuleNameString',
              ( ['in'], c_ulong, 'Which' ),
              ( ['in'], c_ulong, 'Index' ),
              ( ['in'], c_ulonglong, 'Base' ),
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'NameSize' )),
    COMMETHOD([], HRESULT, 'GetConstantName',
              ( ['in'], c_ulonglong, 'Module' ),
              ( ['in'], c_ulong, 'TypeId' ),
              ( ['in'], c_ulonglong, 'Value' ),
              ( ['in', 'out', 'optional'], STRING, 'NameBuffer' ),
              ( ['in', 'optional'], c_ulong, 'NameBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'NameSize' )),
    COMMETHOD([], HRESULT, 'GetFieldName',
              ( ['in'], c_ulonglong, 'Module' ),
              ( ['in'], c_ulong, 'TypeId' ),
              ( ['in'], c_ulong, 'FieldIndex' ),
              ( ['in', 'out', 'optional'], STRING, 'NameBuffer' ),
              ( ['in', 'optional'], c_ulong, 'NameBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'NameSize' )),
    COMMETHOD([], HRESULT, 'GetTypeOptions',
              ( ['out'], POINTER(c_ulong), 'Options' )),
    COMMETHOD([], HRESULT, 'AddTypeOptions',
              ( ['in'], c_ulong, 'Options' )),
    COMMETHOD([], HRESULT, 'RemoveTypeOptions',
              ( ['in'], c_ulong, 'Options' )),
    COMMETHOD([], HRESULT, 'SetTypeOptions',
              ( ['in'], c_ulong, 'Options' )),
    COMMETHOD([], HRESULT, 'GetNameByOffsetWide',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['out', 'optional'], POINTER(c_ushort), 'NameBuffer' ),
              ( ['in', 'optional'], c_ulong, 'NameBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'NameSize' ),
              ( ['in', 'out', 'optional'], POINTER(c_ulonglong), 'Displacement' )),
    COMMETHOD([], HRESULT, 'GetOffsetByNameWide',
              ( ['in'], POINTER(c_ushort), 'Symbol' ),
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'GetNearNameByOffsetWide',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_int, 'Delta' ),
              ( ['out', 'optional'], POINTER(c_ushort), 'NameBuffer' ),
              ( ['in', 'optional'], c_ulong, 'NameBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'NameSize' ),
              ( ['in', 'out', 'optional'], POINTER(c_ulonglong), 'Displacement' )),
    COMMETHOD([], HRESULT, 'GetLineByOffsetWide',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'Line' ),
              ( ['out', 'optional'], POINTER(c_ushort), 'FileBuffer' ),
              ( ['in', 'optional'], c_ulong, 'FileBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'FileSize' ),
              ( ['in', 'out', 'optional'], POINTER(c_ulonglong), 'Displacement' )),
    COMMETHOD([], HRESULT, 'GetOffsetByLineWide',
              ( ['in'], c_ulong, 'Line' ),
              ( ['in'], POINTER(c_ushort), 'File' ),
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'GetModuleByModuleNameWide',
              ( ['in'], POINTER(c_ushort), 'Name' ),
              ( ['in'], c_ulong, 'StartIndex' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'Index' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'Base' )),
    COMMETHOD([], HRESULT, 'GetSymbolModuleWide',
              ( ['in'], POINTER(c_ushort), 'Symbol' ),
              ( ['out'], POINTER(c_ulonglong), 'Base' )),
    COMMETHOD([], HRESULT, 'GetTypeNameWide',
              ( ['in'], c_ulonglong, 'Module' ),
              ( ['in'], c_ulong, 'TypeId' ),
              ( ['out', 'optional'], POINTER(c_ushort), 'NameBuffer' ),
              ( ['in', 'optional'], c_ulong, 'NameBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'NameSize' )),
    COMMETHOD([], HRESULT, 'GetTypeIdWide',
              ( ['in'], c_ulonglong, 'Module' ),
              ( ['in'], POINTER(c_ushort), 'Name' ),
              ( ['out'], POINTER(c_ulong), 'TypeId' )),
    COMMETHOD([], HRESULT, 'GetFieldOffsetWide',
              ( ['in'], c_ulonglong, 'Module' ),
              ( ['in'], c_ulong, 'TypeId' ),
              ( ['in'], POINTER(c_ushort), 'Field' ),
              ( ['out'], POINTER(c_ulong), 'Offset' )),
    COMMETHOD([], HRESULT, 'GetSymbolTypeIdWide',
              ( ['in'], POINTER(c_ushort), 'Symbol' ),
              ( ['out'], POINTER(c_ulong), 'TypeId' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'Module' )),
    COMMETHOD([], HRESULT, 'GetScopeSymbolGroup2',
              ( ['in'], c_ulong, 'Flags' ),
              ( ['in', 'optional'], POINTER(IDebugSymbolGroup2), 'Update' ),
              ( ['out', 'optional'], POINTER(POINTER(IDebugSymbolGroup2)), 'Symbols' )),
    COMMETHOD([], HRESULT, 'CreateSymbolGroup2',
              ( ['out'], POINTER(POINTER(IDebugSymbolGroup2)), 'Group' )),
    COMMETHOD([], HRESULT, 'StartSymbolMatchWide',
              ( ['in'], POINTER(c_ushort), 'Pattern' ),
              ( ['out'], POINTER(c_ulonglong), 'Handle' )),
    COMMETHOD([], HRESULT, 'GetNextSymbolMatchWide',
              ( ['in'], c_ulonglong, 'Handle' ),
              ( ['out', 'optional'], POINTER(c_ushort), 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'MatchSize' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'ReloadWide',
              ( ['in'], POINTER(c_ushort), 'Module' )),
    COMMETHOD([], HRESULT, 'GetSymbolPathWide',
              ( ['out', 'optional'], POINTER(c_ushort), 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'PathSize' )),
    COMMETHOD([], HRESULT, 'SetSymbolPathWide',
              ( ['in'], POINTER(c_ushort), 'Path' )),
    COMMETHOD([], HRESULT, 'AppendSymbolPathWide',
              ( ['in'], POINTER(c_ushort), 'Addition' )),
    COMMETHOD([], HRESULT, 'GetImagePathWide',
              ( ['out', 'optional'], POINTER(c_ushort), 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'PathSize' )),
    COMMETHOD([], HRESULT, 'SetImagePathWide',
              ( ['in'], POINTER(c_ushort), 'Path' )),
    COMMETHOD([], HRESULT, 'AppendImagePathWide',
              ( ['in'], POINTER(c_ushort), 'Addition' )),
    COMMETHOD([], HRESULT, 'GetSourcePathWide',
              ( ['out', 'optional'], POINTER(c_ushort), 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'PathSize' )),
    COMMETHOD([], HRESULT, 'GetSourcePathElementWide',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out', 'optional'], POINTER(c_ushort), 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ElementSize' )),
    COMMETHOD([], HRESULT, 'SetSourcePathWide',
              ( ['in'], POINTER(c_ushort), 'Path' )),
    COMMETHOD([], HRESULT, 'AppendSourcePathWide',
              ( ['in'], POINTER(c_ushort), 'Addition' )),
    COMMETHOD([], HRESULT, 'FindSourceFileWide',
              ( ['in'], c_ulong, 'StartElement' ),
              ( ['in'], POINTER(c_ushort), 'File' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'FoundElement' ),
              ( ['out', 'optional'], POINTER(c_ushort), 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'FoundSize' )),
    COMMETHOD([], HRESULT, 'GetSourceFileLineOffsetsWide',
              ( ['in'], POINTER(c_ushort), 'File' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferLines' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'FileLines' )),
    COMMETHOD([], HRESULT, 'GetModuleVersionInformationWide',
              ( ['in'], c_ulong, 'Index' ),
              ( ['in'], c_ulonglong, 'Base' ),
              ( ['in'], POINTER(c_ushort), 'Item' ),
              ( ['in', 'out', 'optional'], c_void_p, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'VerInfoSize' )),
    COMMETHOD([], HRESULT, 'GetModuleNameStringWide',
              ( ['in'], c_ulong, 'Which' ),
              ( ['in'], c_ulong, 'Index' ),
              ( ['in'], c_ulonglong, 'Base' ),
              ( ['out', 'optional'], POINTER(c_ushort), 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'NameSize' )),
    COMMETHOD([], HRESULT, 'GetConstantNameWide',
              ( ['in'], c_ulonglong, 'Module' ),
              ( ['in'], c_ulong, 'TypeId' ),
              ( ['in'], c_ulonglong, 'Value' ),
              ( ['out', 'optional'], POINTER(c_ushort), 'NameBuffer' ),
              ( ['in', 'optional'], c_ulong, 'NameBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'NameSize' )),
    COMMETHOD([], HRESULT, 'GetFieldNameWide',
              ( ['in'], c_ulonglong, 'Module' ),
              ( ['in'], c_ulong, 'TypeId' ),
              ( ['in'], c_ulong, 'FieldIndex' ),
              ( ['out', 'optional'], POINTER(c_ushort), 'NameBuffer' ),
              ( ['in', 'optional'], c_ulong, 'NameBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'NameSize' )),
    COMMETHOD([], HRESULT, 'IsManagedModule',
              ( ['in'], c_ulong, 'Index' ),
              ( ['in'], c_ulonglong, 'Base' )),
    COMMETHOD([], HRESULT, 'GetModuleByModuleName2',
              ( ['in'], STRING, 'Name' ),
              ( ['in'], c_ulong, 'StartIndex' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'Index' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'Base' )),
    COMMETHOD([], HRESULT, 'GetModuleByModuleName2Wide',
              ( ['in'], POINTER(c_ushort), 'Name' ),
              ( ['in'], c_ulong, 'StartIndex' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'Index' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'Base' )),
    COMMETHOD([], HRESULT, 'GetModuleByOffset2',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulong, 'StartIndex' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'Index' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'Base' )),
    COMMETHOD([], HRESULT, 'AddSyntheticModule',
              ( ['in'], c_ulonglong, 'Base' ),
              ( ['in'], c_ulong, 'Size' ),
              ( ['in'], STRING, 'ImagePath' ),
              ( ['in'], STRING, 'ModuleName' ),
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'AddSyntheticModuleWide',
              ( ['in'], c_ulonglong, 'Base' ),
              ( ['in'], c_ulong, 'Size' ),
              ( ['in'], POINTER(c_ushort), 'ImagePath' ),
              ( ['in'], POINTER(c_ushort), 'ModuleName' ),
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'RemoveSyntheticModule',
              ( ['in'], c_ulonglong, 'Base' )),
    COMMETHOD([], HRESULT, 'GetCurrentScopeFrameIndex',
              ( ['out'], POINTER(c_ulong), 'Index' )),
    COMMETHOD([], HRESULT, 'SetScopeFrameByIndex',
              ( ['in'], c_ulong, 'Index' )),
    COMMETHOD([], HRESULT, 'SetScopeFromJitDebugInfo',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], c_ulonglong, 'InfoOffset' )),
    COMMETHOD([], HRESULT, 'SetScopeFromStoredEvent'),
    COMMETHOD([], HRESULT, 'OutputSymbolByOffset',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['in'], c_ulonglong, 'Offset' )),
    COMMETHOD([], HRESULT, 'GetFunctionEntryByOffset',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['in', 'out', 'optional'], c_void_p, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'BufferNeeded' )),
    COMMETHOD([], HRESULT, 'GetFieldTypeAndOffset',
              ( ['in'], c_ulonglong, 'Module' ),
              ( ['in'], c_ulong, 'ContainerTypeId' ),
              ( ['in'], STRING, 'Field' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'FieldTypeId' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'Offset' )),
    COMMETHOD([], HRESULT, 'GetFieldTypeAndOffsetWide',
              ( ['in'], c_ulonglong, 'Module' ),
              ( ['in'], c_ulong, 'ContainerTypeId' ),
              ( ['in'], POINTER(c_ushort), 'Field' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'FieldTypeId' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'Offset' )),
    COMMETHOD([], HRESULT, 'AddSyntheticSymbol',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulong, 'Size' ),
              ( ['in'], STRING, 'Name' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out', 'optional'], POINTER(_DEBUG_MODULE_AND_ID), 'Id' )),
    COMMETHOD([], HRESULT, 'AddSyntheticSymbolWide',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulong, 'Size' ),
              ( ['in'], POINTER(c_ushort), 'Name' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out', 'optional'], POINTER(_DEBUG_MODULE_AND_ID), 'Id' )),
    COMMETHOD([], HRESULT, 'RemoveSyntheticSymbol',
              ( ['in'], POINTER(_DEBUG_MODULE_AND_ID), 'Id' )),
    COMMETHOD([], HRESULT, 'GetSymbolEntriesByOffset',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out', 'optional'], POINTER(_DEBUG_MODULE_AND_ID), 'Ids' ),
              ( ['in', 'out', 'optional'], POINTER(c_ulonglong), 'Displacements' ),
              ( ['in', 'optional'], c_ulong, 'IdsCount' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'Entries' )),
    COMMETHOD([], HRESULT, 'GetSymbolEntriesByName',
              ( ['in'], STRING, 'Symbol' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out', 'optional'], POINTER(_DEBUG_MODULE_AND_ID), 'Ids' ),
              ( ['in', 'optional'], c_ulong, 'IdsCount' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'Entries' )),
    COMMETHOD([], HRESULT, 'GetSymbolEntriesByNameWide',
              ( ['in'], POINTER(c_ushort), 'Symbol' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out', 'optional'], POINTER(_DEBUG_MODULE_AND_ID), 'Ids' ),
              ( ['in', 'optional'], c_ulong, 'IdsCount' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'Entries' )),
    COMMETHOD([], HRESULT, 'GetSymbolEntryByToken',
              ( ['in'], c_ulonglong, 'ModuleBase' ),
              ( ['in'], c_ulong, 'Token' ),
              ( ['out'], POINTER(_DEBUG_MODULE_AND_ID), 'Id' )),
    COMMETHOD([], HRESULT, 'GetSymbolEntryInformation',
              ( ['in'], POINTER(_DEBUG_MODULE_AND_ID), 'Id' ),
              ( ['out'], POINTER(_DEBUG_SYMBOL_ENTRY), 'Info' )),
    COMMETHOD([], HRESULT, 'GetSymbolEntryString',
              ( ['in'], POINTER(_DEBUG_MODULE_AND_ID), 'Id' ),
              ( ['in'], c_ulong, 'Which' ),
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'StringSize' )),
    COMMETHOD([], HRESULT, 'GetSymbolEntryStringWide',
              ( ['in'], POINTER(_DEBUG_MODULE_AND_ID), 'Id' ),
              ( ['in'], c_ulong, 'Which' ),
              ( ['out', 'optional'], POINTER(c_ushort), 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'StringSize' )),
    COMMETHOD([], HRESULT, 'GetSymbolEntryOffsetRegions',
              ( ['in'], POINTER(_DEBUG_MODULE_AND_ID), 'Id' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out', 'optional'], POINTER(_DEBUG_OFFSET_REGION), 'Regions' ),
              ( ['in', 'optional'], c_ulong, 'RegionsCount' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'RegionsAvail' )),
    COMMETHOD([], HRESULT, 'GetSymbolEntryBySymbolEntry',
              ( ['in'], POINTER(_DEBUG_MODULE_AND_ID), 'FromId' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out'], POINTER(_DEBUG_MODULE_AND_ID), 'ToId' )),
    COMMETHOD([], HRESULT, 'GetSourceEntriesByOffset',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out', 'optional'], POINTER(_DEBUG_SYMBOL_SOURCE_ENTRY), 'Entries' ),
              ( ['in', 'optional'], c_ulong, 'EntriesCount' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'EntriesAvail' )),
    COMMETHOD([], HRESULT, 'GetSourceEntriesByLine',
              ( ['in'], c_ulong, 'Line' ),
              ( ['in'], STRING, 'File' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out', 'optional'], POINTER(_DEBUG_SYMBOL_SOURCE_ENTRY), 'Entries' ),
              ( ['in', 'optional'], c_ulong, 'EntriesCount' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'EntriesAvail' )),
    COMMETHOD([], HRESULT, 'GetSourceEntriesByLineWide',
              ( ['in'], c_ulong, 'Line' ),
              ( ['in'], POINTER(c_ushort), 'File' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out', 'optional'], POINTER(_DEBUG_SYMBOL_SOURCE_ENTRY), 'Entries' ),
              ( ['in', 'optional'], c_ulong, 'EntriesCount' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'EntriesAvail' )),
    COMMETHOD([], HRESULT, 'GetSourceEntryString',
              ( ['in'], POINTER(_DEBUG_SYMBOL_SOURCE_ENTRY), 'Entry' ),
              ( ['in'], c_ulong, 'Which' ),
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'StringSize' )),
    COMMETHOD([], HRESULT, 'GetSourceEntryStringWide',
              ( ['in'], POINTER(_DEBUG_SYMBOL_SOURCE_ENTRY), 'Entry' ),
              ( ['in'], c_ulong, 'Which' ),
              ( ['out', 'optional'], POINTER(c_ushort), 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'StringSize' )),
    COMMETHOD([], HRESULT, 'GetSourceEntryOffsetRegions',
              ( ['in'], POINTER(_DEBUG_SYMBOL_SOURCE_ENTRY), 'Entry' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out', 'optional'], POINTER(_DEBUG_OFFSET_REGION), 'Regions' ),
              ( ['in', 'optional'], c_ulong, 'RegionsCount' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'RegionsAvail' )),
    COMMETHOD([], HRESULT, 'GetSourceEntryBySourceEntry',
              ( ['in'], POINTER(_DEBUG_SYMBOL_SOURCE_ENTRY), 'FromEntry' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out'], POINTER(_DEBUG_SYMBOL_SOURCE_ENTRY), 'ToEntry' )),
]
################################################################
## code template for IDebugSymbols3 implementation
##class IDebugSymbols3_Impl(object):
##    def GetOffsetByNameWide(self, Symbol):
##        '-no docstring-'
##        #return Offset
##
##    def GetSymbolOptions(self):
##        '-no docstring-'
##        #return Options
##
##    def GetSymbolEntriesByNameWide(self, Symbol, Flags, IdsCount):
##        '-no docstring-'
##        #return Ids, Entries
##
##    def GetOffsetTypeId(self, Offset):
##        '-no docstring-'
##        #return TypeId, Module
##
##    def GetTypeId(self, Module, Name):
##        '-no docstring-'
##        #return TypeId
##
##    def GetSourcePath(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, PathSize
##
##    def GetModuleNameString(self, Which, Index, Base, BufferSize):
##        '-no docstring-'
##        #return Buffer, NameSize
##
##    def SetSourcePath(self, Path):
##        '-no docstring-'
##        #return 
##
##    def AddSyntheticSymbolWide(self, Offset, Size, Name, Flags):
##        '-no docstring-'
##        #return Id
##
##    def FindSourceFile(self, StartElement, File, Flags, BufferSize):
##        '-no docstring-'
##        #return FoundElement, Buffer, FoundSize
##
##    def GetSymbolEntryOffsetRegions(self, Id, Flags, RegionsCount):
##        '-no docstring-'
##        #return Regions, RegionsAvail
##
##    def GetModuleNameStringWide(self, Which, Index, Base, BufferSize):
##        '-no docstring-'
##        #return Buffer, NameSize
##
##    def GetLineByOffset(self, Offset, FileBufferSize):
##        '-no docstring-'
##        #return Line, FileBuffer, FileSize, Displacement
##
##    def GetSourceEntryStringWide(self, Entry, Which, BufferSize):
##        '-no docstring-'
##        #return Buffer, StringSize
##
##    def GetScope(self, ScopeContextSize):
##        '-no docstring-'
##        #return InstructionOffset, ScopeFrame, ScopeContext
##
##    def GetConstantName(self, Module, TypeId, Value, NameBufferSize):
##        '-no docstring-'
##        #return NameBuffer, NameSize
##
##    def GetSourceFileLineOffsets(self, File, BufferLines):
##        '-no docstring-'
##        #return Buffer, FileLines
##
##    def SetScopeFrameByIndex(self, Index):
##        '-no docstring-'
##        #return 
##
##    def StartSymbolMatch(self, Pattern):
##        '-no docstring-'
##        #return Handle
##
##    def GetScopeSymbolGroup(self, Flags, Update):
##        '-no docstring-'
##        #return Symbols
##
##    def GetConstantNameWide(self, Module, TypeId, Value, NameBufferSize):
##        '-no docstring-'
##        #return NameBuffer, NameSize
##
##    def GetNearNameByOffsetWide(self, Offset, Delta, NameBufferSize):
##        '-no docstring-'
##        #return NameBuffer, NameSize, Displacement
##
##    def SetImagePath(self, Path):
##        '-no docstring-'
##        #return 
##
##    def GetModuleNames(self, Index, Base, ImageNameBufferSize, ModuleNameBufferSize, LoadedImageNameBufferSize):
##        '-no docstring-'
##        #return ImageNameBuffer, ImageNameSize, ModuleNameBuffer, ModuleNameSize, LoadedImageNameBuffer, LoadedImageNameSize
##
##    def RemoveSyntheticSymbol(self, Id):
##        '-no docstring-'
##        #return 
##
##    def AppendSourcePathWide(self, Addition):
##        '-no docstring-'
##        #return 
##
##    def OutputTypedDataVirtual(self, OutputControl, Offset, Module, TypeId, Flags):
##        '-no docstring-'
##        #return 
##
##    def AddSyntheticSymbol(self, Offset, Size, Name, Flags):
##        '-no docstring-'
##        #return Id
##
##    def GetLineByOffsetWide(self, Offset, FileBufferSize):
##        '-no docstring-'
##        #return Line, FileBuffer, FileSize, Displacement
##
##    def ResetScope(self):
##        '-no docstring-'
##        #return 
##
##    def GetSymbolEntryInformation(self, Id):
##        '-no docstring-'
##        #return Info
##
##    def GetNameByOffset(self, Offset, NameBufferSize):
##        '-no docstring-'
##        #return NameBuffer, NameSize, Displacement
##
##    def AppendSourcePath(self, Addition):
##        '-no docstring-'
##        #return 
##
##    def GetModuleParameters(self, Count, Bases, Start):
##        '-no docstring-'
##        #return Params
##
##    def GetTypeNameWide(self, Module, TypeId, NameBufferSize):
##        '-no docstring-'
##        #return NameBuffer, NameSize
##
##    def GetSymbolEntryBySymbolEntry(self, FromId, Flags):
##        '-no docstring-'
##        #return ToId
##
##    def OutputTypedDataPhysical(self, OutputControl, Offset, Module, TypeId, Flags):
##        '-no docstring-'
##        #return 
##
##    def GetSourceEntriesByLine(self, Line, File, Flags, EntriesCount):
##        '-no docstring-'
##        #return Entries, EntriesAvail
##
##    def GetFieldTypeAndOffsetWide(self, Module, ContainerTypeId, Field):
##        '-no docstring-'
##        #return FieldTypeId, Offset
##
##    def GetFunctionEntryByOffset(self, Offset, Flags, BufferSize):
##        '-no docstring-'
##        #return Buffer, BufferNeeded
##
##    def AppendImagePathWide(self, Addition):
##        '-no docstring-'
##        #return 
##
##    def GetNextSymbolMatchWide(self, Handle, BufferSize):
##        '-no docstring-'
##        #return Buffer, MatchSize, Offset
##
##    def GetImagePath(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, PathSize
##
##    def AddTypeOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def GetOffsetByName(self, Symbol):
##        '-no docstring-'
##        #return Offset
##
##    def WriteTypedDataVirtual(self, Offset, Module, TypeId, Buffer, BufferSize):
##        '-no docstring-'
##        #return BytesWritten
##
##    def GetFieldOffsetWide(self, Module, TypeId, Field):
##        '-no docstring-'
##        #return Offset
##
##    def AddSyntheticModuleWide(self, Base, Size, ImagePath, ModuleName, Flags):
##        '-no docstring-'
##        #return 
##
##    def GetSymbolPath(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, PathSize
##
##    def GetSourceEntriesByLineWide(self, Line, File, Flags, EntriesCount):
##        '-no docstring-'
##        #return Entries, EntriesAvail
##
##    def GetModuleVersionInformation(self, Index, Base, Item, BufferSize):
##        '-no docstring-'
##        #return Buffer, VerInfoSize
##
##    def SetTypeOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def GetNameByOffsetWide(self, Offset, NameBufferSize):
##        '-no docstring-'
##        #return NameBuffer, NameSize, Displacement
##
##    def SetScope(self, InstructionOffset, ScopeFrame, ScopeContext, ScopeContextSize):
##        '-no docstring-'
##        #return 
##
##    def ReadTypedDataVirtual(self, Offset, Module, TypeId, BufferSize):
##        '-no docstring-'
##        #return Buffer, BytesRead
##
##    def GetNearNameByOffset(self, Offset, Delta, NameBufferSize):
##        '-no docstring-'
##        #return NameBuffer, NameSize, Displacement
##
##    def RemoveSyntheticModule(self, Base):
##        '-no docstring-'
##        #return 
##
##    def GetSymbolTypeIdWide(self, Symbol):
##        '-no docstring-'
##        #return TypeId, Module
##
##    def SetSourcePathWide(self, Path):
##        '-no docstring-'
##        #return 
##
##    def GetFieldName(self, Module, TypeId, FieldIndex, NameBufferSize):
##        '-no docstring-'
##        #return NameBuffer, NameSize
##
##    def FindSourceFileWide(self, StartElement, File, Flags, BufferSize):
##        '-no docstring-'
##        #return FoundElement, Buffer, FoundSize
##
##    def EndSymbolMatch(self, Handle):
##        '-no docstring-'
##        #return 
##
##    def SetScopeFromStoredEvent(self):
##        '-no docstring-'
##        #return 
##
##    def StartSymbolMatchWide(self, Pattern):
##        '-no docstring-'
##        #return Handle
##
##    def GetSymbolEntryString(self, Id, Which, BufferSize):
##        '-no docstring-'
##        #return Buffer, StringSize
##
##    def GetSymbolModule(self, Symbol):
##        '-no docstring-'
##        #return Base
##
##    def GetModuleVersionInformationWide(self, Index, Base, Item, BufferSize):
##        '-no docstring-'
##        #return Buffer, VerInfoSize
##
##    def GetSourcePathWide(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, PathSize
##
##    def GetSymbolEntryByToken(self, ModuleBase, Token):
##        '-no docstring-'
##        #return Id
##
##    def GetTypeOptions(self):
##        '-no docstring-'
##        #return Options
##
##    def AddSyntheticModule(self, Base, Size, ImagePath, ModuleName, Flags):
##        '-no docstring-'
##        #return 
##
##    def GetSourceFileLineOffsetsWide(self, File, BufferLines):
##        '-no docstring-'
##        #return Buffer, FileLines
##
##    def AppendSymbolPath(self, Addition):
##        '-no docstring-'
##        #return 
##
##    def GetTypeName(self, Module, TypeId, NameBufferSize):
##        '-no docstring-'
##        #return NameBuffer, NameSize
##
##    def GetSymbolTypeId(self, Symbol):
##        '-no docstring-'
##        #return TypeId, Module
##
##    def GetSourceEntryOffsetRegions(self, Entry, Flags, RegionsCount):
##        '-no docstring-'
##        #return Regions, RegionsAvail
##
##    def WriteTypedDataPhysical(self, Offset, Module, TypeId, Buffer, BufferSize):
##        '-no docstring-'
##        #return BytesWritten
##
##    def CreateSymbolGroup2(self):
##        '-no docstring-'
##        #return Group
##
##    def GetSourcePathElementWide(self, Index, BufferSize):
##        '-no docstring-'
##        #return Buffer, ElementSize
##
##    def AddSymbolOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def GetModuleByOffset2(self, Offset, StartIndex, Flags):
##        '-no docstring-'
##        #return Index, Base
##
##    def GetFieldTypeAndOffset(self, Module, ContainerTypeId, Field):
##        '-no docstring-'
##        #return FieldTypeId, Offset
##
##    def CreateSymbolGroup(self):
##        '-no docstring-'
##        #return Group
##
##    def SetSymbolPathWide(self, Path):
##        '-no docstring-'
##        #return 
##
##    def GetSourceEntriesByOffset(self, Offset, Flags, EntriesCount):
##        '-no docstring-'
##        #return Entries, EntriesAvail
##
##    def GetSourceEntryBySourceEntry(self, FromEntry, Flags):
##        '-no docstring-'
##        #return ToEntry
##
##    def GetTypeSize(self, Module, TypeId):
##        '-no docstring-'
##        #return Size
##
##    def GetModuleByIndex(self, Index):
##        '-no docstring-'
##        #return Base
##
##    def GetSymbolEntryStringWide(self, Id, Which, BufferSize):
##        '-no docstring-'
##        #return Buffer, StringSize
##
##    def GetOffsetByLine(self, Line, File):
##        '-no docstring-'
##        #return Offset
##
##    def GetFieldNameWide(self, Module, TypeId, FieldIndex, NameBufferSize):
##        '-no docstring-'
##        #return NameBuffer, NameSize
##
##    def GetNumberModules(self):
##        '-no docstring-'
##        #return Loaded, Unloaded
##
##    def SetSymbolPath(self, Path):
##        '-no docstring-'
##        #return 
##
##    def GetModuleByModuleName(self, Name, StartIndex):
##        '-no docstring-'
##        #return Index, Base
##
##    def GetSymbolModuleWide(self, Symbol):
##        '-no docstring-'
##        #return Base
##
##    def GetImagePathWide(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, PathSize
##
##    def ReadTypedDataPhysical(self, Offset, Module, TypeId, BufferSize):
##        '-no docstring-'
##        #return Buffer, BytesRead
##
##    def ReloadWide(self, Module):
##        '-no docstring-'
##        #return 
##
##    def GetScopeSymbolGroup2(self, Flags, Update):
##        '-no docstring-'
##        #return Symbols
##
##    def RemoveSymbolOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def GetModuleByModuleName2(self, Name, StartIndex, Flags):
##        '-no docstring-'
##        #return Index, Base
##
##    def GetModuleByOffset(self, Offset, StartIndex):
##        '-no docstring-'
##        #return Index, Base
##
##    def GetNextSymbolMatch(self, Handle, BufferSize):
##        '-no docstring-'
##        #return Buffer, MatchSize, Offset
##
##    def GetModuleByModuleNameWide(self, Name, StartIndex):
##        '-no docstring-'
##        #return Index, Base
##
##    def GetTypeIdWide(self, Module, Name):
##        '-no docstring-'
##        #return TypeId
##
##    def SetImagePathWide(self, Path):
##        '-no docstring-'
##        #return 
##
##    def GetSymbolEntriesByOffset(self, Offset, Flags, IdsCount):
##        '-no docstring-'
##        #return Ids, Displacements, Entries
##
##    def GetOffsetByLineWide(self, Line, File):
##        '-no docstring-'
##        #return Offset
##
##    def IsManagedModule(self, Index, Base):
##        '-no docstring-'
##        #return 
##
##    def GetCurrentScopeFrameIndex(self):
##        '-no docstring-'
##        #return Index
##
##    def RemoveTypeOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def SetSymbolOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def GetFieldOffset(self, Module, TypeId, Field):
##        '-no docstring-'
##        #return Offset
##
##    def AppendImagePath(self, Addition):
##        '-no docstring-'
##        #return 
##
##    def Reload(self, Module):
##        '-no docstring-'
##        #return 
##
##    def GetModuleByModuleName2Wide(self, Name, StartIndex, Flags):
##        '-no docstring-'
##        #return Index, Base
##
##    def GetSourcePathElement(self, Index, BufferSize):
##        '-no docstring-'
##        #return Buffer, ElementSize
##
##    def SetScopeFromJitDebugInfo(self, OutputControl, InfoOffset):
##        '-no docstring-'
##        #return 
##
##    def GetSymbolPathWide(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, PathSize
##
##    def GetSourceEntryString(self, Entry, Which, BufferSize):
##        '-no docstring-'
##        #return Buffer, StringSize
##
##    def AppendSymbolPathWide(self, Addition):
##        '-no docstring-'
##        #return 
##
##    def GetSymbolEntriesByName(self, Symbol, Flags, IdsCount):
##        '-no docstring-'
##        #return Ids, Entries
##
##    def OutputSymbolByOffset(self, OutputControl, Flags, Offset):
##        '-no docstring-'
##        #return 
##


# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0106'
DEBUG_FILTER_BREAK = 0
__MIDL___MIDL_itf_DbgEng_0001_0073_0106 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0065'
DEBUG_DATA_KdPrintCircularBufferAddr = 480
__MIDL___MIDL_itf_DbgEng_0001_0077_0065 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0099'
DEBUG_DATA_OffsetEprocessDirectoryTableBase = 686
__MIDL___MIDL_itf_DbgEng_0001_0077_0099 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0066'
DEBUG_DATA_KdPrintCircularBufferEndAddr = 488
__MIDL___MIDL_itf_DbgEng_0001_0077_0066 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0108'
DEBUG_FILTER_OUTPUT = 2
__MIDL___MIDL_itf_DbgEng_0001_0073_0108 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0067'
DEBUG_DATA_KdPrintWritePointerAddr = 496
__MIDL___MIDL_itf_DbgEng_0001_0077_0067 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0109'
DEBUG_FILTER_IGNORE = 3
__MIDL___MIDL_itf_DbgEng_0001_0073_0109 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0048'
DEBUG_OUTPUT_SYMBOLS = 512
__MIDL___MIDL_itf_DbgEng_0001_0068_0048 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0068'
DEBUG_DATA_KdPrintRolloverCountAddr = 504
__MIDL___MIDL_itf_DbgEng_0001_0077_0068 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0107'
DEBUG_FILTER_SECOND_CHANCE_BREAK = 1
__MIDL___MIDL_itf_DbgEng_0001_0073_0107 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0066_0005'
DEBUG_BREAKPOINT_DEFERRED = 2
__MIDL___MIDL_itf_DbgEng_0001_0066_0005 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0069'
DEBUG_DATA_MmLoadedUserImageListAddr = 512
__MIDL___MIDL_itf_DbgEng_0001_0077_0069 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0111'
DEBUG_FILTER_GO_HANDLED = 0
__MIDL___MIDL_itf_DbgEng_0001_0073_0111 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0070'
DEBUG_DATA_NtBuildLabAddr = 520
__MIDL___MIDL_itf_DbgEng_0001_0077_0070 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0112'
DEBUG_FILTER_GO_NOT_HANDLED = 1
__MIDL___MIDL_itf_DbgEng_0001_0073_0112 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0071'
DEBUG_DATA_KiNormalSystemCall = 528
__MIDL___MIDL_itf_DbgEng_0001_0077_0071 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0100'
DEBUG_DATA_SizePrcb = 688
__MIDL___MIDL_itf_DbgEng_0001_0077_0100 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0072'
DEBUG_DATA_KiProcessorBlockAddr = 536
__MIDL___MIDL_itf_DbgEng_0001_0077_0072 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0073'
DEBUG_DATA_MmUnloadedDriversAddr = 544
__MIDL___MIDL_itf_DbgEng_0001_0077_0073 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0074'
DEBUG_DATA_MmLastUnloadedDriverAddr = 552
__MIDL___MIDL_itf_DbgEng_0001_0077_0074 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0075'
DEBUG_DATA_MmTriageActionTakenAddr = 560
__MIDL___MIDL_itf_DbgEng_0001_0077_0075 = c_int # enum
IDebugOutputCallbacks._methods_ = [
    COMMETHOD([], HRESULT, 'Output',
              ( ['in'], c_ulong, 'Mask' ),
              ( ['in'], STRING, 'Text' )),
]
################################################################
## code template for IDebugOutputCallbacks implementation
##class IDebugOutputCallbacks_Impl(object):
##    def Output(self, Mask, Text):
##        '-no docstring-'
##        #return 
##


# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0076'
DEBUG_DATA_MmSpecialPoolTagAddr = 568
__MIDL___MIDL_itf_DbgEng_0001_0077_0076 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0101'
DEBUG_DATA_OffsetPrcbDpcRoutine = 690
__MIDL___MIDL_itf_DbgEng_0001_0077_0101 = c_int # enum
class _DEBUG_LAST_EVENT_INFO_EXIT_THREAD(Structure):
    pass
_DEBUG_LAST_EVENT_INFO_EXIT_THREAD._fields_ = [
    ('ExitCode', c_ulong),
]
assert sizeof(_DEBUG_LAST_EVENT_INFO_EXIT_THREAD) == 4, sizeof(_DEBUG_LAST_EVENT_INFO_EXIT_THREAD)
assert alignment(_DEBUG_LAST_EVENT_INFO_EXIT_THREAD) == 4, alignment(_DEBUG_LAST_EVENT_INFO_EXIT_THREAD)
class _DEBUG_PROCESSOR_IDENTIFICATION_ALPHA(Structure):
    pass
_DEBUG_PROCESSOR_IDENTIFICATION_ALPHA._fields_ = [
    ('Type', c_ulong),
    ('Revision', c_ulong),
]
assert sizeof(_DEBUG_PROCESSOR_IDENTIFICATION_ALPHA) == 8, sizeof(_DEBUG_PROCESSOR_IDENTIFICATION_ALPHA)
assert alignment(_DEBUG_PROCESSOR_IDENTIFICATION_ALPHA) == 4, alignment(_DEBUG_PROCESSOR_IDENTIFICATION_ALPHA)

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0016'
DEBUG_DATA_PspCidTableAddr = 88
__MIDL___MIDL_itf_DbgEng_0001_0077_0016 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0078'
DEBUG_DATA_MmVerifierDataAddr = 584
__MIDL___MIDL_itf_DbgEng_0001_0077_0078 = c_int # enum
class _DEBUG_PROCESSOR_IDENTIFICATION_X86(Structure):
    pass
_DEBUG_PROCESSOR_IDENTIFICATION_X86._fields_ = [
    ('Family', c_ulong),
    ('Model', c_ulong),
    ('Stepping', c_ulong),
    ('VendorString', c_char * 16),
]
assert sizeof(_DEBUG_PROCESSOR_IDENTIFICATION_X86) == 28, sizeof(_DEBUG_PROCESSOR_IDENTIFICATION_X86)
assert alignment(_DEBUG_PROCESSOR_IDENTIFICATION_X86) == 4, alignment(_DEBUG_PROCESSOR_IDENTIFICATION_X86)

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0082'
DEBUG_DATA_CmNtCSDVersionAddr = 616
__MIDL___MIDL_itf_DbgEng_0001_0077_0082 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0080'
DEBUG_DATA_MmPeakCommitmentAddr = 600
__MIDL___MIDL_itf_DbgEng_0001_0077_0080 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0001'
DEBUG_STATUS_NO_CHANGE = 0
__MIDL___MIDL_itf_DbgEng_0001_0073_0001 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0081'
DEBUG_DATA_MmTotalCommitLimitMaximumAddr = 608
__MIDL___MIDL_itf_DbgEng_0001_0077_0081 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0069_0021'
DEBUG_DUMP_FILE_PAGE_FILE_DUMP = 0
__MIDL___MIDL_itf_DbgEng_0001_0069_0021 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0083'
DEBUG_DATA_MmPhysicalMemoryBlockAddr = 624
__MIDL___MIDL_itf_DbgEng_0001_0077_0083 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0071_0002'
DEBUG_DUMP_FILE_ORIGINAL_CAB_INDEX = -2
__MIDL___MIDL_itf_DbgEng_0001_0071_0002 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0085'
DEBUG_DATA_MmSessionSize = 640
__MIDL___MIDL_itf_DbgEng_0001_0077_0085 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0002'
DEBUG_STATUS_GO = 1
__MIDL___MIDL_itf_DbgEng_0001_0073_0002 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0086'
DEBUG_DATA_MmSystemParentTablePage = 648
__MIDL___MIDL_itf_DbgEng_0001_0077_0086 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0008'
DEBUG_STATUS_NO_DEBUGGEE = 7
__MIDL___MIDL_itf_DbgEng_0001_0073_0008 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0087'
DEBUG_DATA_MmVirtualTranslationBase = 656
__MIDL___MIDL_itf_DbgEng_0001_0077_0087 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0055'
DEBUG_ENGOPT_KD_QUIET_MODE = 8192
__MIDL___MIDL_itf_DbgEng_0001_0073_0055 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0088'
DEBUG_DATA_OffsetKThreadNextProcessor = 664
__MIDL___MIDL_itf_DbgEng_0001_0077_0088 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0005'
DEBUG_STATUS_STEP_OVER = 4
__MIDL___MIDL_itf_DbgEng_0001_0073_0005 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0089'
DEBUG_DATA_OffsetKThreadTeb = 666
__MIDL___MIDL_itf_DbgEng_0001_0077_0089 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0078_0001'
DEBUG_HANDLE_DATA_TYPE_BASIC = 0
__MIDL___MIDL_itf_DbgEng_0001_0078_0001 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0006'
DEBUG_STATUS_STEP_INTO = 5
__MIDL___MIDL_itf_DbgEng_0001_0073_0006 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0090'
DEBUG_DATA_OffsetKThreadKernelStack = 668
__MIDL___MIDL_itf_DbgEng_0001_0077_0090 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0007'
DEBUG_STATUS_BREAK = 6
__MIDL___MIDL_itf_DbgEng_0001_0073_0007 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0091'
DEBUG_DATA_OffsetKThreadInitialStack = 670
__MIDL___MIDL_itf_DbgEng_0001_0077_0091 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0092'
DEBUG_DATA_OffsetKThreadApcProcess = 672
__MIDL___MIDL_itf_DbgEng_0001_0077_0092 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0004'
DEBUG_STATUS_GO_NOT_HANDLED = 3
__MIDL___MIDL_itf_DbgEng_0001_0073_0004 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0009'
DEBUG_STATUS_STEP_BRANCH = 8
__MIDL___MIDL_itf_DbgEng_0001_0073_0009 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0010'
DEBUG_STATUS_IGNORE_EVENT = 9
__MIDL___MIDL_itf_DbgEng_0001_0073_0010 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0011'
DEBUG_STATUS_RESTART_REQUESTED = 10
__MIDL___MIDL_itf_DbgEng_0001_0073_0011 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0070'
DEBUG_STACK_PARAMETERS = 128
__MIDL___MIDL_itf_DbgEng_0001_0073_0070 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0012'
DEBUG_STATUS_REVERSE_GO = 11
__MIDL___MIDL_itf_DbgEng_0001_0073_0012 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0097'
DEBUG_DATA_OffsetEprocessPeb = 682
__MIDL___MIDL_itf_DbgEng_0001_0077_0097 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0014'
DEBUG_STATUS_REVERSE_STEP_OVER = 13
__MIDL___MIDL_itf_DbgEng_0001_0073_0014 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0015'
DEBUG_STATUS_REVERSE_STEP_INTO = 14
__MIDL___MIDL_itf_DbgEng_0001_0073_0015 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0016'
DEBUG_STATUS_MASK = 15
__MIDL___MIDL_itf_DbgEng_0001_0073_0016 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0017'
DEBUG_OUTCTL_THIS_CLIENT = 0
__MIDL___MIDL_itf_DbgEng_0001_0073_0017 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0018'
DEBUG_OUTCTL_ALL_CLIENTS = 1
__MIDL___MIDL_itf_DbgEng_0001_0073_0018 = c_int # enum
IDebugEventCallbacksWide._methods_ = [
    COMMETHOD([], HRESULT, 'GetInterestMask',
              ( ['out'], POINTER(c_ulong), 'Mask' )),
    COMMETHOD([], HRESULT, 'Breakpoint',
              ( ['in'], POINTER(IDebugBreakpoint2), 'Bp' )),
    COMMETHOD([], HRESULT, 'Exception',
              ( ['in'], POINTER(_EXCEPTION_RECORD64), 'Exception' ),
              ( ['in'], c_ulong, 'FirstChance' )),
    COMMETHOD([], HRESULT, 'CreateThread',
              ( ['in'], c_ulonglong, 'Handle' ),
              ( ['in'], c_ulonglong, 'DataOffset' ),
              ( ['in'], c_ulonglong, 'StartOffset' )),
    COMMETHOD([], HRESULT, 'ExitThread',
              ( ['in'], c_ulong, 'ExitCode' )),
    COMMETHOD([], HRESULT, 'CreateProcess',
              ( ['in'], c_ulonglong, 'ImageFileHandle' ),
              ( ['in'], c_ulonglong, 'Handle' ),
              ( ['in'], c_ulonglong, 'BaseOffset' ),
              ( ['in'], c_ulong, 'ModuleSize' ),
              ( ['in', 'optional'], POINTER(c_ushort), 'ModuleName' ),
              ( ['in', 'optional'], POINTER(c_ushort), 'ImageName' ),
              ( ['in', 'optional'], c_ulong, 'CheckSum' ),
              ( ['in', 'optional'], c_ulong, 'TimeDateStamp' ),
              ( ['in', 'optional'], c_ulonglong, 'InitialThreadHandle' ),
              ( ['in', 'optional'], c_ulonglong, 'ThreadDataOffset' ),
              ( ['in', 'optional'], c_ulonglong, 'StartOffset' )),
    COMMETHOD([], HRESULT, 'ExitProcess',
              ( ['in'], c_ulong, 'ExitCode' )),
    COMMETHOD([], HRESULT, 'LoadModule',
              ( ['in'], c_ulonglong, 'ImageFileHandle' ),
              ( ['in'], c_ulonglong, 'BaseOffset' ),
              ( ['in'], c_ulong, 'ModuleSize' ),
              ( ['in', 'optional'], POINTER(c_ushort), 'ModuleName' ),
              ( ['in', 'optional'], POINTER(c_ushort), 'ImageName' ),
              ( ['in', 'optional'], c_ulong, 'CheckSum' ),
              ( ['in', 'optional'], c_ulong, 'TimeDateStamp' )),
    COMMETHOD([], HRESULT, 'UnloadModule',
              ( ['in', 'optional'], POINTER(c_ushort), 'ImageBaseName' ),
              ( ['in', 'optional'], c_ulonglong, 'BaseOffset' )),
    COMMETHOD([], HRESULT, 'SystemError',
              ( ['in'], c_ulong, 'Error' ),
              ( ['in'], c_ulong, 'Level' )),
    COMMETHOD([], HRESULT, 'SessionStatus',
              ( ['in'], c_ulong, 'Status' )),
    COMMETHOD([], HRESULT, 'ChangeDebuggeeState',
              ( ['in'], c_ulong, 'Flags' ),
              ( ['in'], c_ulonglong, 'Argument' )),
    COMMETHOD([], HRESULT, 'ChangeEngineState',
              ( ['in'], c_ulong, 'Flags' ),
              ( ['in'], c_ulonglong, 'Argument' )),
    COMMETHOD([], HRESULT, 'ChangeSymbolState',
              ( ['in'], c_ulong, 'Flags' ),
              ( ['in'], c_ulonglong, 'Argument' )),
]
################################################################
## code template for IDebugEventCallbacksWide implementation
##class IDebugEventCallbacksWide_Impl(object):
##    def Exception(self, Exception, FirstChance):
##        '-no docstring-'
##        #return 
##
##    def CreateThread(self, Handle, DataOffset, StartOffset):
##        '-no docstring-'
##        #return 
##
##    def ChangeSymbolState(self, Flags, Argument):
##        '-no docstring-'
##        #return 
##
##    def CreateProcess(self, ImageFileHandle, Handle, BaseOffset, ModuleSize, ModuleName, ImageName, CheckSum, TimeDateStamp, InitialThreadHandle, ThreadDataOffset, StartOffset):
##        '-no docstring-'
##        #return 
##
##    def ExitProcess(self, ExitCode):
##        '-no docstring-'
##        #return 
##
##    def GetInterestMask(self):
##        '-no docstring-'
##        #return Mask
##
##    def LoadModule(self, ImageFileHandle, BaseOffset, ModuleSize, ModuleName, ImageName, CheckSum, TimeDateStamp):
##        '-no docstring-'
##        #return 
##
##    def Breakpoint(self, Bp):
##        '-no docstring-'
##        #return 
##
##    def ChangeEngineState(self, Flags, Argument):
##        '-no docstring-'
##        #return 
##
##    def UnloadModule(self, ImageBaseName, BaseOffset):
##        '-no docstring-'
##        #return 
##
##    def ExitThread(self, ExitCode):
##        '-no docstring-'
##        #return 
##
##    def SystemError(self, Error, Level):
##        '-no docstring-'
##        #return 
##
##    def ChangeDebuggeeState(self, Flags, Argument):
##        '-no docstring-'
##        #return 
##
##    def SessionStatus(self, Status):
##        '-no docstring-'
##        #return 
##


# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0104'
DEBUG_DATA_OffsetPrcbCpuType = 696
__MIDL___MIDL_itf_DbgEng_0001_0077_0104 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0107'
DEBUG_DATA_OffsetPrcbNumber = 702
__MIDL___MIDL_itf_DbgEng_0001_0077_0107 = c_int # enum
_DEBUG_OFFSET_REGION._fields_ = [
    ('Base', c_ulonglong),
    ('Size', c_ulonglong),
]
assert sizeof(_DEBUG_OFFSET_REGION) == 16, sizeof(_DEBUG_OFFSET_REGION)
assert alignment(_DEBUG_OFFSET_REGION) == 8, alignment(_DEBUG_OFFSET_REGION)

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0105'
DEBUG_DATA_OffsetPrcbVendorString = 698
__MIDL___MIDL_itf_DbgEng_0001_0077_0105 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0068'
DEBUG_STACK_NONVOLATILE_REGISTERS = 32
__MIDL___MIDL_itf_DbgEng_0001_0073_0068 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0106'
DEBUG_DATA_OffsetPrcbProcessorState = 700
__MIDL___MIDL_itf_DbgEng_0001_0077_0106 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0064_0011'
DEBUG_REQUEST_GET_ADDITIONAL_CREATE_OPTIONS = 4
__MIDL___MIDL_itf_DbgEng_0001_0064_0011 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0108'
DEBUG_DATA_SizeEThread = 704
__MIDL___MIDL_itf_DbgEng_0001_0077_0108 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0109'
DEBUG_DATA_KdPrintCircularBufferPtrAddr = 712
__MIDL___MIDL_itf_DbgEng_0001_0077_0109 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0110'
DEBUG_DATA_KdPrintBufferSizeAddr = 720
__MIDL___MIDL_itf_DbgEng_0001_0077_0110 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0098_0012'
DEBUG_KNOWN_STRUCT_SUPPRESS_TYPE_NAME = 3
__MIDL___MIDL_itf_DbgEng_0001_0098_0012 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0089_0003'
DEBUG_OUTPUT_SYMBOLS_NO_OFFSETS = 2
__MIDL___MIDL_itf_DbgEng_0001_0089_0003 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0000_0000_0007'
CREATE_NEW_CONSOLE = 16
__MIDL___MIDL_itf_DbgEng_0000_0000_0007 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0112'
DEBUG_DATA_SharedUserData = 100008
__MIDL___MIDL_itf_DbgEng_0001_0077_0112 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0104'
DEBUG_FILTER_INITIAL_MODULE_LOAD = 8
__MIDL___MIDL_itf_DbgEng_0001_0073_0104 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0113'
DEBUG_DATA_ProductType = 100016
__MIDL___MIDL_itf_DbgEng_0001_0077_0113 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0114'
DEBUG_DATA_SuiteMask = 100024
__MIDL___MIDL_itf_DbgEng_0001_0077_0114 = c_int # enum
IDebugOutputCallbacksWide._methods_ = [
    COMMETHOD([], HRESULT, 'Output',
              ( ['in'], c_ulong, 'Mask' ),
              ( ['in'], POINTER(c_ushort), 'Text' )),
]
################################################################
## code template for IDebugOutputCallbacksWide implementation
##class IDebugOutputCallbacksWide_Impl(object):
##    def Output(self, Mask, Text):
##        '-no docstring-'
##        #return 
##


# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0115'
DEBUG_DATA_DumpWriterStatus = 100032
__MIDL___MIDL_itf_DbgEng_0001_0077_0115 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0116'
DEBUG_DATA_DumpFormatVersion = 100040
__MIDL___MIDL_itf_DbgEng_0001_0077_0116 = c_int # enum
_WINDBG_EXTENSION_APIS32._fields_ = [
    ('NotSupported', c_ulong),
]
assert sizeof(_WINDBG_EXTENSION_APIS32) == 4, sizeof(_WINDBG_EXTENSION_APIS32)
assert alignment(_WINDBG_EXTENSION_APIS32) == 4, alignment(_WINDBG_EXTENSION_APIS32)

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0117'
DEBUG_DATA_DumpWriterVersion = 100048
__MIDL___MIDL_itf_DbgEng_0001_0077_0117 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0118'
DEBUG_DATA_DumpPowerState = 100056
__MIDL___MIDL_itf_DbgEng_0001_0077_0118 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0035'
DEBUG_CURRENT_SOURCE_LINE = 8
__MIDL___MIDL_itf_DbgEng_0001_0073_0035 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0078_0003'
DEBUG_HANDLE_DATA_TYPE_OBJECT_NAME = 2
__MIDL___MIDL_itf_DbgEng_0001_0078_0003 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0036'
DEBUG_DISASM_EFFECTIVE_ADDRESS = 1
__MIDL___MIDL_itf_DbgEng_0001_0073_0036 = c_int # enum
class _DEBUG_PROCESSOR_IDENTIFICATION_IA64(Structure):
    pass
_DEBUG_PROCESSOR_IDENTIFICATION_IA64._fields_ = [
    ('Model', c_ulong),
    ('Revision', c_ulong),
    ('Family', c_ulong),
    ('ArchRev', c_ulong),
    ('VendorString', c_char * 16),
]
assert sizeof(_DEBUG_PROCESSOR_IDENTIFICATION_IA64) == 32, sizeof(_DEBUG_PROCESSOR_IDENTIFICATION_IA64)
assert alignment(_DEBUG_PROCESSOR_IDENTIFICATION_IA64) == 4, alignment(_DEBUG_PROCESSOR_IDENTIFICATION_IA64)

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0038'
DEBUG_DISASM_SOURCE_LINE_NUMBER = 4
__MIDL___MIDL_itf_DbgEng_0001_0073_0038 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0039'
DEBUG_DISASM_SOURCE_FILE_NAME = 8
__MIDL___MIDL_itf_DbgEng_0001_0073_0039 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0040'
DEBUG_LEVEL_SOURCE = 0
__MIDL___MIDL_itf_DbgEng_0001_0073_0040 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0041'
DEBUG_LEVEL_ASSEMBLY = 1
__MIDL___MIDL_itf_DbgEng_0001_0073_0041 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0042'
DEBUG_ENGOPT_IGNORE_DBGHELP_VERSION = 1
__MIDL___MIDL_itf_DbgEng_0001_0073_0042 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0043'
DEBUG_ENGOPT_IGNORE_EXTENSION_VERSIONS = 2
__MIDL___MIDL_itf_DbgEng_0001_0073_0043 = c_int # enum
class IDebugControl(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'IDebugControl'
    _iid_ = GUID('{5182E668-105E-416E-AD92-24EF800424BA}')
    _idlflags_ = []
IDebugControl._methods_ = [
    COMMETHOD([], HRESULT, 'GetInterrupt'),
    COMMETHOD([], HRESULT, 'SetInterrupt',
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'GetInterruptTimeout',
              ( ['out'], POINTER(c_ulong), 'Seconds' )),
    COMMETHOD([], HRESULT, 'SetInterruptTimeout',
              ( ['in'], c_ulong, 'Seconds' )),
    COMMETHOD([], HRESULT, 'GetLogFile',
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'FileSize' ),
              ( ['out', 'optional'], POINTER(c_int), 'Append' )),
    COMMETHOD([], HRESULT, 'OpenLogFile',
              ( ['in'], STRING, 'File' ),
              ( ['in'], c_int, 'Append' )),
    COMMETHOD([], HRESULT, 'CloseLogFile'),
    COMMETHOD([], HRESULT, 'GetLogMask',
              ( ['out'], POINTER(c_ulong), 'Mask' )),
    COMMETHOD([], HRESULT, 'SetLogMask',
              ( ['in'], c_ulong, 'Mask' )),
    COMMETHOD([], HRESULT, 'Input',
              ( ['out'], STRING, 'Buffer' ),
              ( ['in'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'InputSize' )),
    COMMETHOD([], HRESULT, 'ReturnInput',
              ( ['in'], STRING, 'Buffer' )),
    COMMETHOD([], HRESULT, 'Output',
              ( ['in'], c_ulong, 'Mask' ),
              ( ['in'], STRING, 'Format' ),
              ( [], _midlSAFEARRAY(VARIANT), '__MIDL__IDebugControl0000' )),
    COMMETHOD([], HRESULT, 'OutputVaList',
              ( ['in'], c_ulong, 'Mask' ),
              ( ['in'], STRING, 'Format' ),
              ( ['in'], STRING, 'Args' )),
    COMMETHOD([], HRESULT, 'ControlledOutput',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], c_ulong, 'Mask' ),
              ( ['in'], STRING, 'Format' ),
              ( [], _midlSAFEARRAY(VARIANT), '__MIDL__IDebugControl0001' )),
    COMMETHOD([], HRESULT, 'ControlledOutputVaList',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], c_ulong, 'Mask' ),
              ( ['in'], STRING, 'Format' ),
              ( ['in'], STRING, 'Args' )),
    COMMETHOD([], HRESULT, 'OutputPrompt',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in', 'optional'], STRING, 'Format' ),
              ( ['optional'], _midlSAFEARRAY(VARIANT), '__MIDL__IDebugControl0002' )),
    COMMETHOD([], HRESULT, 'OutputPromptVaList',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in', 'optional'], STRING, 'Format' ),
              ( ['in', 'optional'], STRING, 'Args' )),
    COMMETHOD([], HRESULT, 'GetPromptText',
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'TextSize' )),
    COMMETHOD([], HRESULT, 'OutputCurrentState',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'OutputVersionInformation',
              ( ['in'], c_ulong, 'OutputControl' )),
    COMMETHOD([], HRESULT, 'GetNotifyEventHandle',
              ( ['out'], POINTER(c_ulonglong), 'Handle' )),
    COMMETHOD([], HRESULT, 'SetNotifyEventHandle',
              ( ['in'], c_ulonglong, 'Handle' )),
    COMMETHOD([], HRESULT, 'Assemble',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], STRING, 'Instr' ),
              ( ['out'], POINTER(c_ulonglong), 'EndOffset' )),
    COMMETHOD([], HRESULT, 'Disassemble',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'DisassemblySize' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'EndOffset' )),
    COMMETHOD([], HRESULT, 'GetDisassembleEffectiveOffset',
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'OutputDisassembly',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out'], POINTER(c_ulonglong), 'EndOffset' )),
    COMMETHOD([], HRESULT, 'OutputDisassemblyLines',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], c_ulong, 'PreviousLines' ),
              ( ['in'], c_ulong, 'TotalLines' ),
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'OffsetLine' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'StartOffset' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'EndOffset' ),
              ( ['out', 'optional'], POINTER(c_ulonglong), 'LineOffsets' )),
    COMMETHOD([], HRESULT, 'GetNearInstruction',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['in'], c_int, 'Delta' ),
              ( ['out'], POINTER(c_ulonglong), 'NearOffset' )),
    COMMETHOD([], HRESULT, 'GetStackTrace',
              ( ['in'], c_ulonglong, 'FrameOffset' ),
              ( ['in'], c_ulonglong, 'StackOffset' ),
              ( ['in'], c_ulonglong, 'InstructionOffset' ),
              ( ['in', 'out'], POINTER(_DEBUG_STACK_FRAME), 'Frames' ),
              ( ['in'], c_ulong, 'FramesSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'FramesFilled' )),
    COMMETHOD([], HRESULT, 'GetReturnOffset',
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'OutputStackTrace',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in', 'optional'], POINTER(_DEBUG_STACK_FRAME), 'Frames' ),
              ( ['in', 'optional'], c_ulong, 'FramesSize' ),
              ( ['in', 'optional'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'GetDebuggeeType',
              ( ['out'], POINTER(c_ulong), 'Class' ),
              ( ['out'], POINTER(c_ulong), 'Qualifier' )),
    COMMETHOD([], HRESULT, 'GetActualProcessorType',
              ( ['out'], POINTER(c_ulong), 'Type' )),
    COMMETHOD([], HRESULT, 'GetExecutingProcessorType',
              ( ['out'], POINTER(c_ulong), 'Type' )),
    COMMETHOD([], HRESULT, 'GetNumberPossibleExecutingProcessorTypes',
              ( ['out'], POINTER(c_ulong), 'Number' )),
    COMMETHOD([], HRESULT, 'GetPossibleExecutingProcessorTypes',
              ( ['in'], c_ulong, 'Start' ),
              ( ['in'], c_ulong, 'Count' ),
              ( ['out'], POINTER(c_ulong), 'Types' )),
    COMMETHOD([], HRESULT, 'GetNumberProcessors',
              ( ['out'], POINTER(c_ulong), 'Number' )),
    COMMETHOD([], HRESULT, 'GetSystemVersion',
              ( ['out'], POINTER(c_ulong), 'PlatformId' ),
              ( ['out'], POINTER(c_ulong), 'Major' ),
              ( ['out'], POINTER(c_ulong), 'Minor' ),
              ( ['out', 'optional'], STRING, 'ServicePackString' ),
              ( ['in', 'optional'], c_ulong, 'ServicePackStringSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ServicePackStringUsed' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ServicePackNumber' ),
              ( ['out', 'optional'], STRING, 'BuildString' ),
              ( ['in', 'optional'], c_ulong, 'BuildStringSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'BuildStringUsed' )),
    COMMETHOD([], HRESULT, 'GetPageSize',
              ( ['out'], POINTER(c_ulong), 'Size' )),
    COMMETHOD([], HRESULT, 'IsPointer64Bit'),
    COMMETHOD([], HRESULT, 'ReadBugCheckData',
              ( ['out'], POINTER(c_ulong), 'Code' ),
              ( ['out'], POINTER(c_ulonglong), 'Arg1' ),
              ( ['out'], POINTER(c_ulonglong), 'Arg2' ),
              ( ['out'], POINTER(c_ulonglong), 'Arg3' ),
              ( ['out'], POINTER(c_ulonglong), 'Arg4' )),
    COMMETHOD([], HRESULT, 'GetNumberSupportedProcessorTypes',
              ( ['out'], POINTER(c_ulong), 'Number' )),
    COMMETHOD([], HRESULT, 'GetSupportedProcessorTypes',
              ( ['in'], c_ulong, 'Start' ),
              ( ['in'], c_ulong, 'Count' ),
              ( ['out'], POINTER(c_ulong), 'Types' )),
    COMMETHOD([], HRESULT, 'GetProcessorTypeNames',
              ( ['in'], c_ulong, 'Type' ),
              ( ['out', 'optional'], STRING, 'FullNameBuffer' ),
              ( ['in', 'optional'], c_ulong, 'FullNameBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'FullNameSize' ),
              ( ['out', 'optional'], STRING, 'AbbrevNameBuffer' ),
              ( ['in', 'optional'], c_ulong, 'AbbrevNameBufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'AbbrevNameSize' )),
    COMMETHOD([], HRESULT, 'GetEffectiveProcessorType',
              ( ['out'], POINTER(c_ulong), 'Type' )),
    COMMETHOD([], HRESULT, 'SetEffectiveProcessorType',
              ( ['in'], c_ulong, 'Type' )),
    COMMETHOD([], HRESULT, 'GetExecutionStatus',
              ( ['out'], POINTER(c_ulong), 'Status' )),
    COMMETHOD([], HRESULT, 'SetExecutionStatus',
              ( ['in'], c_ulong, 'Status' )),
    COMMETHOD([], HRESULT, 'GetCodeLevel',
              ( ['out'], POINTER(c_ulong), 'Level' )),
    COMMETHOD([], HRESULT, 'SetCodeLevel',
              ( ['in'], c_ulong, 'Level' )),
    COMMETHOD([], HRESULT, 'GetEngineOptions',
              ( ['out'], POINTER(c_ulong), 'Options' )),
    COMMETHOD([], HRESULT, 'AddEngineOptions',
              ( ['in'], c_ulong, 'Options' )),
    COMMETHOD([], HRESULT, 'RemoveEngineOptions',
              ( ['in'], c_ulong, 'Options' )),
    COMMETHOD([], HRESULT, 'SetEngineOptions',
              ( ['in'], c_ulong, 'Options' )),
    COMMETHOD([], HRESULT, 'GetSystemErrorControl',
              ( ['out'], POINTER(c_ulong), 'OutputLevel' ),
              ( ['out'], POINTER(c_ulong), 'BreakLevel' )),
    COMMETHOD([], HRESULT, 'SetSystemErrorControl',
              ( ['in'], c_ulong, 'OutputLevel' ),
              ( ['in'], c_ulong, 'BreakLevel' )),
    COMMETHOD([], HRESULT, 'GetTextMacro',
              ( ['in'], c_ulong, 'Slot' ),
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'MacroSize' )),
    COMMETHOD([], HRESULT, 'SetTextMacro',
              ( ['in'], c_ulong, 'Slot' ),
              ( ['in'], STRING, 'Macro' )),
    COMMETHOD([], HRESULT, 'GetRadix',
              ( ['out'], POINTER(c_ulong), 'Radix' )),
    COMMETHOD([], HRESULT, 'SetRadix',
              ( ['in'], c_ulong, 'Radix' )),
    COMMETHOD([], HRESULT, 'Evaluate',
              ( ['in'], STRING, 'Expression' ),
              ( ['in'], c_ulong, 'DesiredType' ),
              ( ['out'], POINTER(_DEBUG_VALUE), 'Value' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'RemainderIndex' )),
    COMMETHOD([], HRESULT, 'CoerceValue',
              ( ['in'], POINTER(_DEBUG_VALUE), 'In' ),
              ( ['in'], c_ulong, 'OutType' ),
              ( ['out'], POINTER(_DEBUG_VALUE), 'Out' )),
    COMMETHOD([], HRESULT, 'CoerceValues',
              ( ['in'], c_ulong, 'Count' ),
              ( ['in'], POINTER(_DEBUG_VALUE), 'In' ),
              ( ['in'], POINTER(c_ulong), 'OutTypes' ),
              ( ['out'], POINTER(_DEBUG_VALUE), 'Out' )),
    COMMETHOD([], HRESULT, 'Execute',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], STRING, 'Command' ),
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'ExecuteCommandFile',
              ( ['in'], c_ulong, 'OutputControl' ),
              ( ['in'], STRING, 'CommandFile' ),
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'GetNumberBreakpoints',
              ( ['out'], POINTER(c_ulong), 'Number' )),
    COMMETHOD([], HRESULT, 'GetBreakpointByIndex',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out'], POINTER(POINTER(IDebugBreakpoint)), 'Bp' )),
    COMMETHOD([], HRESULT, 'GetBreakpointById',
              ( ['in'], c_ulong, 'Id' ),
              ( ['out'], POINTER(POINTER(IDebugBreakpoint)), 'Bp' )),
    COMMETHOD([], HRESULT, 'GetBreakpointParameters',
              ( ['in'], c_ulong, 'Count' ),
              ( ['in', 'optional'], POINTER(c_ulong), 'Ids' ),
              ( ['in', 'optional'], c_ulong, 'Start' ),
              ( ['out', 'optional'], POINTER(_DEBUG_BREAKPOINT_PARAMETERS), 'Params' )),
    COMMETHOD([], HRESULT, 'AddBreakpoint',
              ( ['in'], c_ulong, 'Type' ),
              ( ['in'], c_ulong, 'DesiredId' ),
              ( ['out'], POINTER(POINTER(IDebugBreakpoint)), 'Bp' )),
    COMMETHOD([], HRESULT, 'RemoveBreakpoint',
              ( ['in'], POINTER(IDebugBreakpoint), 'Bp' )),
    COMMETHOD([], HRESULT, 'AddExtension',
              ( ['in'], STRING, 'Path' ),
              ( ['in'], c_ulong, 'Flags' ),
              ( ['out'], POINTER(c_ulonglong), 'Handle' )),
    COMMETHOD([], HRESULT, 'RemoveExtension',
              ( ['in'], c_ulonglong, 'Handle' )),
    COMMETHOD([], HRESULT, 'GetExtensionByPath',
              ( ['in'], STRING, 'Path' ),
              ( ['out'], POINTER(c_ulonglong), 'Handle' )),
    COMMETHOD([], HRESULT, 'CallExtension',
              ( ['in'], c_ulonglong, 'Handle' ),
              ( ['in'], STRING, 'Function' ),
              ( ['in', 'optional'], STRING, 'Arguments' )),
    COMMETHOD([], HRESULT, 'GetExtensionFunction',
              ( ['in'], c_ulonglong, 'Handle' ),
              ( ['in'], STRING, 'FuncName' ),
              ( ['out'], POINTER(c_void_p), 'Function' )),
    COMMETHOD([], HRESULT, 'GetWindbgExtensionApis32',
              ( ['in', 'out'], POINTER(_WINDBG_EXTENSION_APIS32), 'Api' )),
    COMMETHOD([], HRESULT, 'GetWindbgExtensionApis64',
              ( ['in', 'out'], POINTER(_WINDBG_EXTENSION_APIS64), 'Api' )),
    COMMETHOD([], HRESULT, 'GetNumberEventFilters',
              ( ['out'], POINTER(c_ulong), 'SpecificEvents' ),
              ( ['out'], POINTER(c_ulong), 'SpecificExceptions' ),
              ( ['out'], POINTER(c_ulong), 'ArbitraryExceptions' )),
    COMMETHOD([], HRESULT, 'GetEventFilterText',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'TextSize' )),
    COMMETHOD([], HRESULT, 'GetEventFilterCommand',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'CommandSize' )),
    COMMETHOD([], HRESULT, 'SetEventFilterCommand',
              ( ['in'], c_ulong, 'Index' ),
              ( ['in'], STRING, 'Command' )),
    COMMETHOD([], HRESULT, 'GetSpecificFilterParameters',
              ( ['in'], c_ulong, 'Start' ),
              ( ['in'], c_ulong, 'Count' ),
              ( ['out'], POINTER(_DEBUG_SPECIFIC_FILTER_PARAMETERS), 'Params' )),
    COMMETHOD([], HRESULT, 'SetSpecificFilterParameters',
              ( ['in'], c_ulong, 'Start' ),
              ( ['in'], c_ulong, 'Count' ),
              ( ['in'], POINTER(_DEBUG_SPECIFIC_FILTER_PARAMETERS), 'Params' )),
    COMMETHOD([], HRESULT, 'GetSpecificFilterArgument',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ArgumentSize' )),
    COMMETHOD([], HRESULT, 'SetSpecificFilterArgument',
              ( ['in'], c_ulong, 'Index' ),
              ( ['in'], STRING, 'Argument' )),
    COMMETHOD([], HRESULT, 'GetExceptionFilterParameters',
              ( ['in'], c_ulong, 'Count' ),
              ( ['in', 'optional'], POINTER(c_ulong), 'Codes' ),
              ( ['in', 'optional'], c_ulong, 'Start' ),
              ( ['out', 'optional'], POINTER(_DEBUG_EXCEPTION_FILTER_PARAMETERS), 'Params' )),
    COMMETHOD([], HRESULT, 'SetExceptionFilterParameters',
              ( ['in'], c_ulong, 'Count' ),
              ( ['in'], POINTER(_DEBUG_EXCEPTION_FILTER_PARAMETERS), 'Params' )),
    COMMETHOD([], HRESULT, 'GetExceptionFilterSecondCommand',
              ( ['in'], c_ulong, 'Index' ),
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'CommandSize' )),
    COMMETHOD([], HRESULT, 'SetExceptionFilterSecondCommand',
              ( ['in'], c_ulong, 'Index' ),
              ( ['in'], STRING, 'Command' )),
    COMMETHOD([], HRESULT, 'WaitForEvent',
              ( ['in'], c_ulong, 'Flags' ),
              ( ['in'], c_ulong, 'Timeout' )),
    COMMETHOD([], HRESULT, 'GetLastEventInformation',
              ( ['out'], POINTER(c_ulong), 'Type' ),
              ( ['out'], POINTER(c_ulong), 'ProcessId' ),
              ( ['out'], POINTER(c_ulong), 'ThreadId' ),
              ( ['out', 'optional'], c_void_p, 'ExtraInformation' ),
              ( ['in', 'optional'], c_ulong, 'ExtraInformationSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ExtraInformationUsed' ),
              ( ['out', 'optional'], STRING, 'Description' ),
              ( ['in', 'optional'], c_ulong, 'DescriptionSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'DescriptionUsed' )),
]
################################################################
## code template for IDebugControl implementation
##class IDebugControl_Impl(object):
##    def AddBreakpoint(self, Type, DesiredId):
##        '-no docstring-'
##        #return Bp
##
##    def GetInterrupt(self):
##        '-no docstring-'
##        #return 
##
##    def CoerceValues(self, Count, In, OutTypes):
##        '-no docstring-'
##        #return Out
##
##    def RemoveExtension(self, Handle):
##        '-no docstring-'
##        #return 
##
##    def GetExecutingProcessorType(self):
##        '-no docstring-'
##        #return Type
##
##    def AddEngineOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def GetDebuggeeType(self):
##        '-no docstring-'
##        #return Class, Qualifier
##
##    def Execute(self, OutputControl, Command, Flags):
##        '-no docstring-'
##        #return 
##
##    def CoerceValue(self, In, OutType):
##        '-no docstring-'
##        #return Out
##
##    def GetTextMacro(self, Slot, BufferSize):
##        '-no docstring-'
##        #return Buffer, MacroSize
##
##    def ControlledOutput(self, OutputControl, Mask, Format, __MIDL__IDebugControl0001):
##        '-no docstring-'
##        #return 
##
##    def WaitForEvent(self, Flags, Timeout):
##        '-no docstring-'
##        #return 
##
##    def GetRadix(self):
##        '-no docstring-'
##        #return Radix
##
##    def GetSpecificFilterParameters(self, Start, Count):
##        '-no docstring-'
##        #return Params
##
##    def RemoveEngineOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def SetExceptionFilterParameters(self, Count, Params):
##        '-no docstring-'
##        #return 
##
##    def SetExceptionFilterSecondCommand(self, Index, Command):
##        '-no docstring-'
##        #return 
##
##    def GetDisassembleEffectiveOffset(self):
##        '-no docstring-'
##        #return Offset
##
##    def GetNearInstruction(self, Offset, Delta):
##        '-no docstring-'
##        #return NearOffset
##
##    def GetInterruptTimeout(self):
##        '-no docstring-'
##        #return Seconds
##
##    def GetSystemVersion(self, ServicePackStringSize, BuildStringSize):
##        '-no docstring-'
##        #return PlatformId, Major, Minor, ServicePackString, ServicePackStringUsed, ServicePackNumber, BuildString, BuildStringUsed
##
##    def SetTextMacro(self, Slot, Macro):
##        '-no docstring-'
##        #return 
##
##    def GetWindbgExtensionApis64(self):
##        '-no docstring-'
##        #return Api
##
##    def GetLogFile(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, FileSize, Append
##
##    def OpenLogFile(self, File, Append):
##        '-no docstring-'
##        #return 
##
##    def OutputDisassembly(self, OutputControl, Offset, Flags):
##        '-no docstring-'
##        #return EndOffset
##
##    def GetNumberSupportedProcessorTypes(self):
##        '-no docstring-'
##        #return Number
##
##    def OutputVersionInformation(self, OutputControl):
##        '-no docstring-'
##        #return 
##
##    def GetActualProcessorType(self):
##        '-no docstring-'
##        #return Type
##
##    def GetBreakpointParameters(self, Count, Ids, Start):
##        '-no docstring-'
##        #return Params
##
##    def Evaluate(self, Expression, DesiredType):
##        '-no docstring-'
##        #return Value, RemainderIndex
##
##    def GetNumberProcessors(self):
##        '-no docstring-'
##        #return Number
##
##    def AddExtension(self, Path, Flags):
##        '-no docstring-'
##        #return Handle
##
##    def SetCodeLevel(self, Level):
##        '-no docstring-'
##        #return 
##
##    def SetLogMask(self, Mask):
##        '-no docstring-'
##        #return 
##
##    def CloseLogFile(self):
##        '-no docstring-'
##        #return 
##
##    def SetInterrupt(self, Flags):
##        '-no docstring-'
##        #return 
##
##    def SetNotifyEventHandle(self, Handle):
##        '-no docstring-'
##        #return 
##
##    def SetSpecificFilterArgument(self, Index, Argument):
##        '-no docstring-'
##        #return 
##
##    def GetNotifyEventHandle(self):
##        '-no docstring-'
##        #return Handle
##
##    def ReadBugCheckData(self):
##        '-no docstring-'
##        #return Code, Arg1, Arg2, Arg3, Arg4
##
##    def SetEffectiveProcessorType(self, Type):
##        '-no docstring-'
##        #return 
##
##    def GetCodeLevel(self):
##        '-no docstring-'
##        #return Level
##
##    def GetExceptionFilterParameters(self, Count, Codes, Start):
##        '-no docstring-'
##        #return Params
##
##    def OutputStackTrace(self, OutputControl, Frames, FramesSize, Flags):
##        '-no docstring-'
##        #return 
##
##    def SetRadix(self, Radix):
##        '-no docstring-'
##        #return 
##
##    def Input(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, InputSize
##
##    def SetExecutionStatus(self, Status):
##        '-no docstring-'
##        #return 
##
##    def ControlledOutputVaList(self, OutputControl, Mask, Format, Args):
##        '-no docstring-'
##        #return 
##
##    def GetBreakpointById(self, Id):
##        '-no docstring-'
##        #return Bp
##
##    def RemoveBreakpoint(self, Bp):
##        '-no docstring-'
##        #return 
##
##    def GetWindbgExtensionApis32(self):
##        '-no docstring-'
##        #return Api
##
##    def Assemble(self, Offset, Instr):
##        '-no docstring-'
##        #return EndOffset
##
##    def OutputVaList(self, Mask, Format, Args):
##        '-no docstring-'
##        #return 
##
##    def ReturnInput(self, Buffer):
##        '-no docstring-'
##        #return 
##
##    def ExecuteCommandFile(self, OutputControl, CommandFile, Flags):
##        '-no docstring-'
##        #return 
##
##    def OutputPrompt(self, OutputControl, Format, __MIDL__IDebugControl0002):
##        '-no docstring-'
##        #return 
##
##    def OutputCurrentState(self, OutputControl, Flags):
##        '-no docstring-'
##        #return 
##
##    def GetEngineOptions(self):
##        '-no docstring-'
##        #return Options
##
##    def CallExtension(self, Handle, Function, Arguments):
##        '-no docstring-'
##        #return 
##
##    def GetEventFilterText(self, Index, BufferSize):
##        '-no docstring-'
##        #return Buffer, TextSize
##
##    def SetEventFilterCommand(self, Index, Command):
##        '-no docstring-'
##        #return 
##
##    def GetNumberPossibleExecutingProcessorTypes(self):
##        '-no docstring-'
##        #return Number
##
##    def SetSpecificFilterParameters(self, Start, Count, Params):
##        '-no docstring-'
##        #return 
##
##    def GetNumberEventFilters(self):
##        '-no docstring-'
##        #return SpecificEvents, SpecificExceptions, ArbitraryExceptions
##
##    def OutputDisassemblyLines(self, OutputControl, PreviousLines, TotalLines, Offset, Flags):
##        '-no docstring-'
##        #return OffsetLine, StartOffset, EndOffset, LineOffsets
##
##    def GetReturnOffset(self):
##        '-no docstring-'
##        #return Offset
##
##    def GetLastEventInformation(self, ExtraInformationSize, DescriptionSize):
##        '-no docstring-'
##        #return Type, ProcessId, ThreadId, ExtraInformation, ExtraInformationUsed, Description, DescriptionUsed
##
##    def SetInterruptTimeout(self, Seconds):
##        '-no docstring-'
##        #return 
##
##    def GetStackTrace(self, FrameOffset, StackOffset, InstructionOffset, FramesSize):
##        '-no docstring-'
##        #return Frames, FramesFilled
##
##    def GetSystemErrorControl(self):
##        '-no docstring-'
##        #return OutputLevel, BreakLevel
##
##    def GetSpecificFilterArgument(self, Index, BufferSize):
##        '-no docstring-'
##        #return Buffer, ArgumentSize
##
##    def GetExceptionFilterSecondCommand(self, Index, BufferSize):
##        '-no docstring-'
##        #return Buffer, CommandSize
##
##    def GetPageSize(self):
##        '-no docstring-'
##        #return Size
##
##    def Disassemble(self, Offset, Flags, BufferSize):
##        '-no docstring-'
##        #return Buffer, DisassemblySize, EndOffset
##
##    def GetExecutionStatus(self):
##        '-no docstring-'
##        #return Status
##
##    def GetExtensionByPath(self, Path):
##        '-no docstring-'
##        #return Handle
##
##    def OutputPromptVaList(self, OutputControl, Format, Args):
##        '-no docstring-'
##        #return 
##
##    def GetNumberBreakpoints(self):
##        '-no docstring-'
##        #return Number
##
##    def GetBreakpointByIndex(self, Index):
##        '-no docstring-'
##        #return Bp
##
##    def GetEventFilterCommand(self, Index, BufferSize):
##        '-no docstring-'
##        #return Buffer, CommandSize
##
##    def SetEngineOptions(self, Options):
##        '-no docstring-'
##        #return 
##
##    def GetExtensionFunction(self, Handle, FuncName):
##        '-no docstring-'
##        #return Function
##
##    def GetPossibleExecutingProcessorTypes(self, Start, Count):
##        '-no docstring-'
##        #return Types
##
##    def GetSupportedProcessorTypes(self, Start, Count):
##        '-no docstring-'
##        #return Types
##
##    def GetLogMask(self):
##        '-no docstring-'
##        #return Mask
##
##    def GetPromptText(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, TextSize
##
##    def GetEffectiveProcessorType(self):
##        '-no docstring-'
##        #return Type
##
##    def Output(self, Mask, Format, __MIDL__IDebugControl0000):
##        '-no docstring-'
##        #return 
##
##    def IsPointer64Bit(self):
##        '-no docstring-'
##        #return 
##
##    def SetSystemErrorControl(self, OutputLevel, BreakLevel):
##        '-no docstring-'
##        #return 
##
##    def GetProcessorTypeNames(self, Type, FullNameBufferSize, AbbrevNameBufferSize):
##        '-no docstring-'
##        #return FullNameBuffer, FullNameSize, AbbrevNameBuffer, AbbrevNameSize
##

IDebugBreakpoint._methods_ = [
    COMMETHOD([], HRESULT, 'GetId',
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetType',
              ( ['out'], POINTER(c_ulong), 'BreakType' ),
              ( ['out'], POINTER(c_ulong), 'ProcType' )),
    COMMETHOD([], HRESULT, 'GetAdder',
              ( ['out'], POINTER(POINTER(IDebugClient)), 'Adder' )),
    COMMETHOD([], HRESULT, 'GetFlags',
              ( ['out'], POINTER(c_ulong), 'Flags' )),
    COMMETHOD([], HRESULT, 'AddFlags',
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'RemoveFlags',
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'SetFlags',
              ( ['in'], c_ulong, 'Flags' )),
    COMMETHOD([], HRESULT, 'GetOffset',
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'SetOffset',
              ( ['in'], c_ulonglong, 'Offset' )),
    COMMETHOD([], HRESULT, 'GetDataParameters',
              ( ['out'], POINTER(c_ulong), 'Size' ),
              ( ['out'], POINTER(c_ulong), 'AccessType' )),
    COMMETHOD([], HRESULT, 'SetDataParameters',
              ( ['in'], c_ulong, 'Size' ),
              ( ['in'], c_ulong, 'AccessType' )),
    COMMETHOD([], HRESULT, 'GetPassCount',
              ( ['out'], POINTER(c_ulong), 'Count' )),
    COMMETHOD([], HRESULT, 'SetPassCount',
              ( ['in'], c_ulong, 'Count' )),
    COMMETHOD([], HRESULT, 'GetCurrentPassCount',
              ( ['out'], POINTER(c_ulong), 'Count' )),
    COMMETHOD([], HRESULT, 'GetMatchThreadId',
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'SetMatchThreadId',
              ( ['in'], c_ulong, 'Thread' )),
    COMMETHOD([], HRESULT, 'GetCommand',
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'CommandSize' )),
    COMMETHOD([], HRESULT, 'SetCommand',
              ( ['in'], STRING, 'Command' )),
    COMMETHOD([], HRESULT, 'GetOffsetExpression',
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ExpressionSize' )),
    COMMETHOD([], HRESULT, 'SetOffsetExpression',
              ( ['in'], STRING, 'Expression' )),
    COMMETHOD([], HRESULT, 'GetParameters',
              ( ['out'], POINTER(_DEBUG_BREAKPOINT_PARAMETERS), 'Params' )),
]
################################################################
## code template for IDebugBreakpoint implementation
##class IDebugBreakpoint_Impl(object):
##    def GetPassCount(self):
##        '-no docstring-'
##        #return Count
##
##    def GetOffsetExpression(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, ExpressionSize
##
##    def GetOffset(self):
##        '-no docstring-'
##        #return Offset
##
##    def SetDataParameters(self, Size, AccessType):
##        '-no docstring-'
##        #return 
##
##    def GetParameters(self):
##        '-no docstring-'
##        #return Params
##
##    def GetDataParameters(self):
##        '-no docstring-'
##        #return Size, AccessType
##
##    def GetType(self):
##        '-no docstring-'
##        #return BreakType, ProcType
##
##    def GetMatchThreadId(self):
##        '-no docstring-'
##        #return Id
##
##    def GetCurrentPassCount(self):
##        '-no docstring-'
##        #return Count
##
##    def GetId(self):
##        '-no docstring-'
##        #return Id
##
##    def GetCommand(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, CommandSize
##
##    def SetMatchThreadId(self, Thread):
##        '-no docstring-'
##        #return 
##
##    def RemoveFlags(self, Flags):
##        '-no docstring-'
##        #return 
##
##    def SetPassCount(self, Count):
##        '-no docstring-'
##        #return 
##
##    def AddFlags(self, Flags):
##        '-no docstring-'
##        #return 
##
##    def SetCommand(self, Command):
##        '-no docstring-'
##        #return 
##
##    def SetOffset(self, Offset):
##        '-no docstring-'
##        #return 
##
##    def SetFlags(self, Flags):
##        '-no docstring-'
##        #return 
##
##    def GetAdder(self):
##        '-no docstring-'
##        #return Adder
##
##    def GetFlags(self):
##        '-no docstring-'
##        #return Flags
##
##    def SetOffsetExpression(self, Expression):
##        '-no docstring-'
##        #return 
##


# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0044'
DEBUG_ENGOPT_ALLOW_NETWORK_PATHS = 4
__MIDL___MIDL_itf_DbgEng_0001_0073_0044 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0045'
DEBUG_ENGOPT_DISALLOW_NETWORK_PATHS = 8
__MIDL___MIDL_itf_DbgEng_0001_0073_0045 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0046'
DEBUG_ENGOPT_IGNORE_LOADER_EXCEPTIONS = 16
__MIDL___MIDL_itf_DbgEng_0001_0073_0046 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0047'
DEBUG_ENGOPT_INITIAL_BREAK = 32
__MIDL___MIDL_itf_DbgEng_0001_0073_0047 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0048'
DEBUG_ENGOPT_INITIAL_MODULE_BREAK = 64
__MIDL___MIDL_itf_DbgEng_0001_0073_0048 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0049'
DEBUG_ENGOPT_FINAL_BREAK = 128
__MIDL___MIDL_itf_DbgEng_0001_0073_0049 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0050'
DEBUG_ENGOPT_NO_EXECUTE_REPEAT = 256
__MIDL___MIDL_itf_DbgEng_0001_0073_0050 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0051'
DEBUG_ENGOPT_FAIL_INCOMPLETE_INFORMATION = 512
__MIDL___MIDL_itf_DbgEng_0001_0073_0051 = c_int # enum
_DEBUG_BREAKPOINT_PARAMETERS._fields_ = [
    ('Offset', c_ulonglong),
    ('Id', c_ulong),
    ('BreakType', c_ulong),
    ('ProcType', c_ulong),
    ('Flags', c_ulong),
    ('DataSize', c_ulong),
    ('DataAccessType', c_ulong),
    ('PassCount', c_ulong),
    ('CurrentPassCount', c_ulong),
    ('MatchThread', c_ulong),
    ('CommandSize', c_ulong),
    ('OffsetExpressionSize', c_ulong),
]
assert sizeof(_DEBUG_BREAKPOINT_PARAMETERS) == 56, sizeof(_DEBUG_BREAKPOINT_PARAMETERS)
assert alignment(_DEBUG_BREAKPOINT_PARAMETERS) == 8, alignment(_DEBUG_BREAKPOINT_PARAMETERS)

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0052'
DEBUG_ENGOPT_ALLOW_READ_ONLY_BREAKPOINTS = 1024
__MIDL___MIDL_itf_DbgEng_0001_0073_0052 = c_int # enum
class _DEBUG_HANDLE_DATA_BASIC(Structure):
    pass
_DEBUG_HANDLE_DATA_BASIC._fields_ = [
    ('TypeNameSize', c_ulong),
    ('ObjectNameSize', c_ulong),
    ('Attributes', c_ulong),
    ('GrantedAccess', c_ulong),
    ('HandleCount', c_ulong),
    ('PointerCount', c_ulong),
]
assert sizeof(_DEBUG_HANDLE_DATA_BASIC) == 24, sizeof(_DEBUG_HANDLE_DATA_BASIC)
assert alignment(_DEBUG_HANDLE_DATA_BASIC) == 4, alignment(_DEBUG_HANDLE_DATA_BASIC)

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0123'
DEBUG_DATA_BASE_TRANSLATION_VIRTUAL_OFFSET = 3
__MIDL___MIDL_itf_DbgEng_0001_0077_0123 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0120'
DEBUG_DATA_KPCR_OFFSET = 0
__MIDL___MIDL_itf_DbgEng_0001_0077_0120 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0057'
DEBUG_ENGOPT_DISABLE_MODULE_SYMBOL_LOAD = 32768
__MIDL___MIDL_itf_DbgEng_0001_0073_0057 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0098_0013'
DEBUG_EXT_QVALUE_DEFAULT = 0
__MIDL___MIDL_itf_DbgEng_0001_0098_0013 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0056'
DEBUG_ENGOPT_DISABLE_MANAGED_SUPPORT = 16384
__MIDL___MIDL_itf_DbgEng_0001_0073_0056 = c_int # enum
class _DEBUG_LAST_EVENT_INFO_BREAKPOINT(Structure):
    pass
_DEBUG_LAST_EVENT_INFO_BREAKPOINT._fields_ = [
    ('Id', c_ulong),
]
assert sizeof(_DEBUG_LAST_EVENT_INFO_BREAKPOINT) == 4, sizeof(_DEBUG_LAST_EVENT_INFO_BREAKPOINT)
assert alignment(_DEBUG_LAST_EVENT_INFO_BREAKPOINT) == 4, alignment(_DEBUG_LAST_EVENT_INFO_BREAKPOINT)

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0122'
DEBUG_DATA_KTHREAD_OFFSET = 2
__MIDL___MIDL_itf_DbgEng_0001_0077_0122 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0058'
DEBUG_ENGOPT_DISABLE_EXECUTION_COMMANDS = 65536
__MIDL___MIDL_itf_DbgEng_0001_0073_0058 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0081_0031'
DEBUG_CES_ENGINE_OPTIONS = 32
__MIDL___MIDL_itf_DbgEng_0001_0081_0031 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0081_0034'
DEBUG_CES_EVENT_FILTERS = 256
__MIDL___MIDL_itf_DbgEng_0001_0081_0034 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0081_0039'
DEBUG_CES_EXPRESSION_SYNTAX = 8192
__MIDL___MIDL_itf_DbgEng_0001_0081_0039 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0081_0032'
DEBUG_CES_LOG_FILE = 64
__MIDL___MIDL_itf_DbgEng_0001_0081_0032 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0081_0036'
DEBUG_CES_EXTENSIONS = 1024
__MIDL___MIDL_itf_DbgEng_0001_0081_0036 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0081_0033'
DEBUG_CES_RADIX = 128
__MIDL___MIDL_itf_DbgEng_0001_0081_0033 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0081_0042'
DEBUG_CSS_LOADS = 1
__MIDL___MIDL_itf_DbgEng_0001_0081_0042 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0081_0037'
DEBUG_CES_SYSTEMS = 2048
__MIDL___MIDL_itf_DbgEng_0001_0081_0037 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0081_0038'
DEBUG_CES_ASSEMBLY_OPTIONS = 4096
__MIDL___MIDL_itf_DbgEng_0001_0081_0038 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0081_0035'
DEBUG_CES_PROCESS_OPTIONS = 512
__MIDL___MIDL_itf_DbgEng_0001_0081_0035 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0081_0040'
DEBUG_CES_TEXT_REPLACEMENTS = 16384
__MIDL___MIDL_itf_DbgEng_0001_0081_0040 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0019'
DEBUG_OUTCTL_ALL_OTHER_CLIENTS = 2
__MIDL___MIDL_itf_DbgEng_0001_0073_0019 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0081_0041'
DEBUG_CSS_ALL = -1
__MIDL___MIDL_itf_DbgEng_0001_0081_0041 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0029'
DEBUG_DATA_MmPfnDatabaseAddr = 192
__MIDL___MIDL_itf_DbgEng_0001_0077_0029 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0086_0007'
DEBUG_OUTCB_EXPLICIT_FLUSH = 2
__MIDL___MIDL_itf_DbgEng_0001_0086_0007 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0030'
DEBUG_INTERRUPT_EXIT = 2
__MIDL___MIDL_itf_DbgEng_0001_0073_0030 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0081_0043'
DEBUG_CSS_UNLOADS = 2
__MIDL___MIDL_itf_DbgEng_0001_0081_0043 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0081_0045'
DEBUG_CSS_PATHS = 8
__MIDL___MIDL_itf_DbgEng_0001_0081_0045 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0072'
DEBUG_STACK_FRAME_MEMORY_USAGE = 512
__MIDL___MIDL_itf_DbgEng_0001_0073_0072 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0086_0003'
DEBUG_OUTCBI_DML = 4
__MIDL___MIDL_itf_DbgEng_0001_0086_0003 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0110'
DEBUG_FILTER_REMOVE = 4
__MIDL___MIDL_itf_DbgEng_0001_0073_0110 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0081_0046'
DEBUG_CSS_SYMBOL_OPTIONS = 16
__MIDL___MIDL_itf_DbgEng_0001_0081_0046 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0086_0001'
DEBUG_OUTCBI_EXPLICIT_FLUSH = 1
__MIDL___MIDL_itf_DbgEng_0001_0086_0001 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0031'
DEBUG_CURRENT_DEFAULT = 15
__MIDL___MIDL_itf_DbgEng_0001_0073_0031 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0081_0011'
DEBUG_EVENT_CHANGE_DEBUGGEE_STATE = 1024
__MIDL___MIDL_itf_DbgEng_0001_0081_0011 = c_int # enum
_DEBUG_VALUE._fields_ = [
    ('u', __MIDL___MIDL_itf_DbgEng_0001_0073_0127),
    ('TailOfRawBytes', c_ulong),
    ('Type', c_ulong),
]
assert sizeof(_DEBUG_VALUE) == 32, sizeof(_DEBUG_VALUE)
assert alignment(_DEBUG_VALUE) == 8, alignment(_DEBUG_VALUE)

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0081_0044'
DEBUG_CSS_SCOPE = 4
__MIDL___MIDL_itf_DbgEng_0001_0081_0044 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0062'
DEBUG_ANY_ID = -1
__MIDL___MIDL_itf_DbgEng_0001_0073_0062 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0086_0002'
DEBUG_OUTCBI_TEXT = 2
__MIDL___MIDL_itf_DbgEng_0001_0086_0002 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0086_0004'
DEBUG_OUTCBI_ANY_FORMAT = 6
__MIDL___MIDL_itf_DbgEng_0001_0086_0004 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0081_0047'
DEBUG_CSS_TYPE_OPTIONS = 32
__MIDL___MIDL_itf_DbgEng_0001_0081_0047 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0086_0005'
DEBUG_OUTCB_TEXT = 0
__MIDL___MIDL_itf_DbgEng_0001_0086_0005 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0032'
DEBUG_CURRENT_SYMBOL = 1
__MIDL___MIDL_itf_DbgEng_0001_0073_0032 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0086_0006'
DEBUG_OUTCB_DML = 1
__MIDL___MIDL_itf_DbgEng_0001_0086_0006 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0074'
DEBUG_STACK_DML = 2048
__MIDL___MIDL_itf_DbgEng_0001_0073_0074 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0068_0042'
DEBUG_OUTPUT_VERBOSE = 8
__MIDL___MIDL_itf_DbgEng_0001_0068_0042 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0086_0009'
DEBUG_OUTCBF_DML_HAS_TAGS = 2
__MIDL___MIDL_itf_DbgEng_0001_0086_0009 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0086_0010'
DEBUG_OUTCBF_DML_HAS_SPECIAL_CHARACTERS = 4
__MIDL___MIDL_itf_DbgEng_0001_0086_0010 = c_int # enum
class _DEBUG_READ_USER_MINIDUMP_STREAM(Structure):
    pass
_DEBUG_READ_USER_MINIDUMP_STREAM._fields_ = [
    ('StreamType', c_ulong),
    ('Flags', c_ulong),
    ('Offset', c_ulonglong),
    ('Buffer', c_void_p),
    ('BufferSize', c_ulong),
    ('BufferUsed', c_ulong),
]
assert sizeof(_DEBUG_READ_USER_MINIDUMP_STREAM) == 32, sizeof(_DEBUG_READ_USER_MINIDUMP_STREAM)
assert alignment(_DEBUG_READ_USER_MINIDUMP_STREAM) == 8, alignment(_DEBUG_READ_USER_MINIDUMP_STREAM)

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0033'
DEBUG_CURRENT_DISASM = 2
__MIDL___MIDL_itf_DbgEng_0001_0073_0033 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0086_0008'
DEBUG_OUTCBF_COMBINED_EXPLICIT_FLUSH = 1
__MIDL___MIDL_itf_DbgEng_0001_0086_0008 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0000_0000_0011'
REALTIME_PRIORITY_CLASS = 256
__MIDL___MIDL_itf_DbgEng_0000_0000_0011 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0063'
DEBUG_STACK_ARGUMENTS = 1
__MIDL___MIDL_itf_DbgEng_0001_0073_0063 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0087_0006'
DEBUG_REGISTER_SUB_REGISTER = 1
__MIDL___MIDL_itf_DbgEng_0001_0087_0006 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0034'
DEBUG_CURRENT_REGISTERS = 4
__MIDL___MIDL_itf_DbgEng_0001_0073_0034 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0054'
DEBUG_ENGOPT_DISALLOW_SHELL_COMMANDS = 4096
__MIDL___MIDL_itf_DbgEng_0001_0073_0054 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0088_0001'
DEBUG_REGSRC_DEBUGGEE = 0
__MIDL___MIDL_itf_DbgEng_0001_0088_0001 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0037'
DEBUG_DISASM_MATCHING_SYMBOLS = 2
__MIDL___MIDL_itf_DbgEng_0001_0073_0037 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0020'
DEBUG_OUTCTL_IGNORE = 3
__MIDL___MIDL_itf_DbgEng_0001_0073_0020 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0087_0005'
DEBUG_REGISTERS_ALL = 7
__MIDL___MIDL_itf_DbgEng_0001_0087_0005 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0087_0003'
DEBUG_REGISTERS_INT64 = 2
__MIDL___MIDL_itf_DbgEng_0001_0087_0003 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0087_0004'
DEBUG_REGISTERS_FLOAT = 4
__MIDL___MIDL_itf_DbgEng_0001_0087_0004 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0077_0119'
DEBUG_DATA_DumpMmStorage = 100064
__MIDL___MIDL_itf_DbgEng_0001_0077_0119 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0098_0002'
DEBUG_CMDEX_INVALID = 0
__MIDL___MIDL_itf_DbgEng_0001_0098_0002 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0087_0001'
DEBUG_REGISTERS_DEFAULT = 0
__MIDL___MIDL_itf_DbgEng_0001_0087_0001 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0090_0001'
DEBUG_SYMENT_IS_CODE = 1
__MIDL___MIDL_itf_DbgEng_0001_0090_0001 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0087_0002'
DEBUG_REGISTERS_INT32 = 1
__MIDL___MIDL_itf_DbgEng_0001_0087_0002 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0081_0019'
DEBUG_SESSION_REBOOT = 5
__MIDL___MIDL_itf_DbgEng_0001_0081_0019 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0088_0002'
DEBUG_REGSRC_EXPLICIT = 1
__MIDL___MIDL_itf_DbgEng_0001_0088_0002 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0088_0003'
DEBUG_REGSRC_FRAME = 2
__MIDL___MIDL_itf_DbgEng_0001_0088_0003 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0094'
DEBUG_EXECUTE_NOT_LOGGED = 2
__MIDL___MIDL_itf_DbgEng_0001_0073_0094 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0089_0001'
DEBUG_OUTPUT_SYMBOLS_DEFAULT = 0
__MIDL___MIDL_itf_DbgEng_0001_0089_0001 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0078'
DEBUG_CLASS_IMAGE_FILE = 3
__MIDL___MIDL_itf_DbgEng_0001_0073_0078 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0089_0002'
DEBUG_OUTPUT_SYMBOLS_NO_NAMES = 1
__MIDL___MIDL_itf_DbgEng_0001_0089_0002 = c_int # enum
class IDebugSystemObjects2(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'IDebugSystemObjects2'
    _iid_ = GUID('{0AE9F5FF-1852-4679-B055-494BEE6407EE}')
    _idlflags_ = []
IDebugSystemObjects2._methods_ = [
    COMMETHOD([], HRESULT, 'GetEventThread',
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetEventProcess',
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetCurrentThreadId',
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'SetCurrentThreadId',
              ( ['in'], c_ulong, 'Id' )),
    COMMETHOD([], HRESULT, 'GetCurrentProcessId',
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'SetCurrentProcessId',
              ( ['in'], c_ulong, 'Id' )),
    COMMETHOD([], HRESULT, 'GetNumberThreads',
              ( ['out'], POINTER(c_ulong), 'Number' )),
    COMMETHOD([], HRESULT, 'GetTotalNumberThreads',
              ( ['out'], POINTER(c_ulong), 'Total' ),
              ( ['out'], POINTER(c_ulong), 'LargestProcess' )),
    COMMETHOD([], HRESULT, 'GetThreadIdsByIndex',
              ( ['in'], c_ulong, 'Start' ),
              ( ['in'], c_ulong, 'Count' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'Ids' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'SysIds' )),
    COMMETHOD([], HRESULT, 'GetThreadIdByProcessor',
              ( ['in'], c_ulong, 'Processor' ),
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetCurrentThreadDataOffset',
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'GetThreadIdByDataOffset',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetCurrentThreadTeb',
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'GetThreadIdByTeb',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetCurrentThreadSystemId',
              ( ['out'], POINTER(c_ulong), 'SysId' )),
    COMMETHOD([], HRESULT, 'GetThreadIdBySystemId',
              ( ['in'], c_ulong, 'SysId' ),
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetCurrentThreadHandle',
              ( ['out'], POINTER(c_ulonglong), 'Handle' )),
    COMMETHOD([], HRESULT, 'GetThreadIdByHandle',
              ( ['in'], c_ulonglong, 'Handle' ),
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetNumberProcesses',
              ( ['out'], POINTER(c_ulong), 'Number' )),
    COMMETHOD([], HRESULT, 'GetProcessIdsByIndex',
              ( ['in'], c_ulong, 'Start' ),
              ( ['in'], c_ulong, 'Count' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'Ids' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'SysIds' )),
    COMMETHOD([], HRESULT, 'GetCurrentProcessDataOffset',
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'GetProcessIdByDataOffset',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetCurrentProcessPeb',
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'GetProcessIdByPeb',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetCurrentProcessSystemId',
              ( ['out'], POINTER(c_ulong), 'SysId' )),
    COMMETHOD([], HRESULT, 'GetProcessIdBySystemId',
              ( ['in'], c_ulong, 'SysId' ),
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetCurrentProcessHandle',
              ( ['out'], POINTER(c_ulonglong), 'Handle' )),
    COMMETHOD([], HRESULT, 'GetProcessIdByHandle',
              ( ['in'], c_ulonglong, 'Handle' ),
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetCurrentProcessExecutableName',
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ExeSize' )),
    COMMETHOD([], HRESULT, 'GetCurrentProcessUpTime',
              ( ['out'], POINTER(c_ulong), 'UpTime' )),
    COMMETHOD([], HRESULT, 'GetImplicitThreadDataOffset',
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'SetImplicitThreadDataOffset',
              ( ['in'], c_ulonglong, 'Offset' )),
    COMMETHOD([], HRESULT, 'GetImplicitProcessDataOffset',
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'SetImplicitProcessDataOffset',
              ( ['in'], c_ulonglong, 'Offset' )),
]
################################################################
## code template for IDebugSystemObjects2 implementation
##class IDebugSystemObjects2_Impl(object):
##    def GetThreadIdByTeb(self, Offset):
##        '-no docstring-'
##        #return Id
##
##    def GetProcessIdsByIndex(self, Start, Count):
##        '-no docstring-'
##        #return Ids, SysIds
##
##    def GetCurrentProcessSystemId(self):
##        '-no docstring-'
##        #return SysId
##
##    def GetImplicitThreadDataOffset(self):
##        '-no docstring-'
##        #return Offset
##
##    def GetThreadIdsByIndex(self, Start, Count):
##        '-no docstring-'
##        #return Ids, SysIds
##
##    def SetCurrentThreadId(self, Id):
##        '-no docstring-'
##        #return 
##
##    def GetCurrentProcessPeb(self):
##        '-no docstring-'
##        #return Offset
##
##    def GetCurrentProcessExecutableName(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, ExeSize
##
##    def GetTotalNumberThreads(self):
##        '-no docstring-'
##        #return Total, LargestProcess
##
##    def GetProcessIdByPeb(self, Offset):
##        '-no docstring-'
##        #return Id
##
##    def SetImplicitProcessDataOffset(self, Offset):
##        '-no docstring-'
##        #return 
##
##    def GetCurrentProcessId(self):
##        '-no docstring-'
##        #return Id
##
##    def GetEventProcess(self):
##        '-no docstring-'
##        #return Id
##
##    def GetThreadIdBySystemId(self, SysId):
##        '-no docstring-'
##        #return Id
##
##    def GetThreadIdByDataOffset(self, Offset):
##        '-no docstring-'
##        #return Id
##
##    def GetCurrentProcessUpTime(self):
##        '-no docstring-'
##        #return UpTime
##
##    def GetThreadIdByHandle(self, Handle):
##        '-no docstring-'
##        #return Id
##
##    def GetCurrentThreadTeb(self):
##        '-no docstring-'
##        #return Offset
##
##    def SetImplicitThreadDataOffset(self, Offset):
##        '-no docstring-'
##        #return 
##
##    def GetImplicitProcessDataOffset(self):
##        '-no docstring-'
##        #return Offset
##
##    def GetProcessIdBySystemId(self, SysId):
##        '-no docstring-'
##        #return Id
##
##    def GetEventThread(self):
##        '-no docstring-'
##        #return Id
##
##    def GetCurrentProcessDataOffset(self):
##        '-no docstring-'
##        #return Offset
##
##    def GetProcessIdByDataOffset(self, Offset):
##        '-no docstring-'
##        #return Id
##
##    def GetNumberProcesses(self):
##        '-no docstring-'
##        #return Number
##
##    def GetCurrentThreadId(self):
##        '-no docstring-'
##        #return Id
##
##    def GetCurrentProcessHandle(self):
##        '-no docstring-'
##        #return Handle
##
##    def SetCurrentProcessId(self, Id):
##        '-no docstring-'
##        #return 
##
##    def GetCurrentThreadHandle(self):
##        '-no docstring-'
##        #return Handle
##
##    def GetProcessIdByHandle(self, Handle):
##        '-no docstring-'
##        #return Id
##
##    def GetNumberThreads(self):
##        '-no docstring-'
##        #return Number
##
##    def GetCurrentThreadSystemId(self):
##        '-no docstring-'
##        #return SysId
##
##    def GetCurrentThreadDataOffset(self):
##        '-no docstring-'
##        #return Offset
##
##    def GetThreadIdByProcessor(self, Processor):
##        '-no docstring-'
##        #return Id
##


# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0060'
DEBUG_ENGOPT_PREFER_DML = 262144
__MIDL___MIDL_itf_DbgEng_0001_0073_0060 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0089_0004'
DEBUG_OUTPUT_SYMBOLS_NO_VALUES = 4
__MIDL___MIDL_itf_DbgEng_0001_0089_0004 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0089_0005'
DEBUG_OUTPUT_SYMBOLS_NO_TYPES = 16
__MIDL___MIDL_itf_DbgEng_0001_0089_0005 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0089_0006'
DEBUG_SYMBOL_EXPANSION_LEVEL_MASK = 15
__MIDL___MIDL_itf_DbgEng_0001_0089_0006 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0089_0007'
DEBUG_SYMBOL_EXPANDED = 16
__MIDL___MIDL_itf_DbgEng_0001_0089_0007 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0089_0008'
DEBUG_SYMBOL_READ_ONLY = 32
__MIDL___MIDL_itf_DbgEng_0001_0089_0008 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0089_0009'
DEBUG_SYMBOL_IS_ARRAY = 64
__MIDL___MIDL_itf_DbgEng_0001_0089_0009 = c_int # enum
class IDebugSystemObjects(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    u'IDebugSystemObjects'
    _iid_ = GUID('{6B86FE2C-2C4F-4F0C-9DA2-174311ACC327}')
    _idlflags_ = []
IDebugSystemObjects._methods_ = [
    COMMETHOD([], HRESULT, 'GetEventThread',
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetEventProcess',
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetCurrentThreadId',
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'SetCurrentThreadId',
              ( ['in'], c_ulong, 'Id' )),
    COMMETHOD([], HRESULT, 'GetCurrentProcessId',
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'SetCurrentProcessId',
              ( ['in'], c_ulong, 'Id' )),
    COMMETHOD([], HRESULT, 'GetNumberThreads',
              ( ['out'], POINTER(c_ulong), 'Number' )),
    COMMETHOD([], HRESULT, 'GetTotalNumberThreads',
              ( ['out'], POINTER(c_ulong), 'Total' ),
              ( ['out'], POINTER(c_ulong), 'LargestProcess' )),
    COMMETHOD([], HRESULT, 'GetThreadIdsByIndex',
              ( ['in'], c_ulong, 'Start' ),
              ( ['in'], c_ulong, 'Count' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'Ids' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'SysIds' )),
    COMMETHOD([], HRESULT, 'GetThreadIdByProcessor',
              ( ['in'], c_ulong, 'Processor' ),
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetCurrentThreadDataOffset',
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'GetThreadIdByDataOffset',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetCurrentThreadTeb',
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'GetThreadIdByTeb',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetCurrentThreadSystemId',
              ( ['out'], POINTER(c_ulong), 'SysId' )),
    COMMETHOD([], HRESULT, 'GetThreadIdBySystemId',
              ( ['in'], c_ulong, 'SysId' ),
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetCurrentThreadHandle',
              ( ['out'], POINTER(c_ulonglong), 'Handle' )),
    COMMETHOD([], HRESULT, 'GetThreadIdByHandle',
              ( ['in'], c_ulonglong, 'Handle' ),
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetNumberProcesses',
              ( ['out'], POINTER(c_ulong), 'Number' )),
    COMMETHOD([], HRESULT, 'GetProcessIdsByIndex',
              ( ['in'], c_ulong, 'Start' ),
              ( ['in'], c_ulong, 'Count' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'Ids' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'SysIds' )),
    COMMETHOD([], HRESULT, 'GetCurrentProcessDataOffset',
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'GetProcessIdByDataOffset',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetCurrentProcessPeb',
              ( ['out'], POINTER(c_ulonglong), 'Offset' )),
    COMMETHOD([], HRESULT, 'GetProcessIdByPeb',
              ( ['in'], c_ulonglong, 'Offset' ),
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetCurrentProcessSystemId',
              ( ['out'], POINTER(c_ulong), 'SysId' )),
    COMMETHOD([], HRESULT, 'GetProcessIdBySystemId',
              ( ['in'], c_ulong, 'SysId' ),
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetCurrentProcessHandle',
              ( ['out'], POINTER(c_ulonglong), 'Handle' )),
    COMMETHOD([], HRESULT, 'GetProcessIdByHandle',
              ( ['in'], c_ulonglong, 'Handle' ),
              ( ['out'], POINTER(c_ulong), 'Id' )),
    COMMETHOD([], HRESULT, 'GetCurrentProcessExecutableName',
              ( ['out', 'optional'], STRING, 'Buffer' ),
              ( ['in', 'optional'], c_ulong, 'BufferSize' ),
              ( ['out', 'optional'], POINTER(c_ulong), 'ExeSize' )),
]
################################################################
## code template for IDebugSystemObjects implementation
##class IDebugSystemObjects_Impl(object):
##    def GetThreadIdByTeb(self, Offset):
##        '-no docstring-'
##        #return Id
##
##    def GetProcessIdsByIndex(self, Start, Count):
##        '-no docstring-'
##        #return Ids, SysIds
##
##    def GetCurrentProcessSystemId(self):
##        '-no docstring-'
##        #return SysId
##
##    def GetThreadIdsByIndex(self, Start, Count):
##        '-no docstring-'
##        #return Ids, SysIds
##
##    def SetCurrentThreadId(self, Id):
##        '-no docstring-'
##        #return 
##
##    def GetCurrentProcessPeb(self):
##        '-no docstring-'
##        #return Offset
##
##    def GetCurrentProcessExecutableName(self, BufferSize):
##        '-no docstring-'
##        #return Buffer, ExeSize
##
##    def GetTotalNumberThreads(self):
##        '-no docstring-'
##        #return Total, LargestProcess
##
##    def GetProcessIdByPeb(self, Offset):
##        '-no docstring-'
##        #return Id
##
##    def GetCurrentProcessId(self):
##        '-no docstring-'
##        #return Id
##
##    def GetEventProcess(self):
##        '-no docstring-'
##        #return Id
##
##    def GetThreadIdBySystemId(self, SysId):
##        '-no docstring-'
##        #return Id
##
##    def GetThreadIdByDataOffset(self, Offset):
##        '-no docstring-'
##        #return Id
##
##    def GetThreadIdByHandle(self, Handle):
##        '-no docstring-'
##        #return Id
##
##    def GetCurrentThreadTeb(self):
##        '-no docstring-'
##        #return Offset
##
##    def GetProcessIdBySystemId(self, SysId):
##        '-no docstring-'
##        #return Id
##
##    def GetEventThread(self):
##        '-no docstring-'
##        #return Id
##
##    def GetCurrentProcessDataOffset(self):
##        '-no docstring-'
##        #return Offset
##
##    def GetProcessIdByDataOffset(self, Offset):
##        '-no docstring-'
##        #return Id
##
##    def GetNumberProcesses(self):
##        '-no docstring-'
##        #return Number
##
##    def GetCurrentThreadId(self):
##        '-no docstring-'
##        #return Id
##
##    def GetCurrentProcessHandle(self):
##        '-no docstring-'
##        #return Handle
##
##    def SetCurrentProcessId(self, Id):
##        '-no docstring-'
##        #return 
##
##    def GetCurrentThreadHandle(self):
##        '-no docstring-'
##        #return Handle
##
##    def GetProcessIdByHandle(self, Handle):
##        '-no docstring-'
##        #return Id
##
##    def GetNumberThreads(self):
##        '-no docstring-'
##        #return Number
##
##    def GetCurrentThreadSystemId(self):
##        '-no docstring-'
##        #return SysId
##
##    def GetCurrentThreadDataOffset(self):
##        '-no docstring-'
##        #return Offset
##
##    def GetThreadIdByProcessor(self, Processor):
##        '-no docstring-'
##        #return Id
##


# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0089_0010'
DEBUG_SYMBOL_IS_FLOAT = 128
__MIDL___MIDL_itf_DbgEng_0001_0089_0010 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0089_0011'
DEBUG_SYMBOL_IS_ARGUMENT = 256
__MIDL___MIDL_itf_DbgEng_0001_0089_0011 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0089_0012'
DEBUG_SYMBOL_IS_LOCAL = 512
__MIDL___MIDL_itf_DbgEng_0001_0089_0012 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0090_0003'
DEBUG_SYMENT_IS_PARAMETER = 4
__MIDL___MIDL_itf_DbgEng_0001_0090_0003 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0024'
DEBUG_OUTCTL_OVERRIDE_MASK = 16
__MIDL___MIDL_itf_DbgEng_0001_0073_0024 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0090_0002'
DEBUG_SYMENT_IS_DATA = 2
__MIDL___MIDL_itf_DbgEng_0001_0090_0002 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0098_0005'
DEBUG_EXTINIT_HAS_COMMAND_HELP = 1
__MIDL___MIDL_itf_DbgEng_0001_0098_0005 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0090_0004'
DEBUG_SYMENT_IS_LOCAL = 8
__MIDL___MIDL_itf_DbgEng_0001_0090_0004 = c_int # enum

# values for enumeration '__MIDL___MIDL_itf_DbgEng_0001_0073_0075'
DEBUG_CLASS_UNINITIALIZED = 0
__MIDL___MIDL_itf_DbgEng_0001_0073_0075 = c_int # enum
__all__ = [ 'DEBUG_DATA_SPACE_PHYSICAL',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0084',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0086',
           'DEBUG_TBINFO_PRIORITY_CLASS',
           'DEBUG_STACK_FRAME_ADDRESSES', '_DEBUG_STACK_FRAME',
           'DEBUG_SCOPE_GROUP_ARGUMENTS',
           'DEBUG_DATA_OffsetKThreadState',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0123',
           'DEBUG_ENGOPT_IGNORE_EXTENSION_VERSIONS',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0121',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0120',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0088',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0123',
           'DEBUG_ASMOPT_IGNORE_OUTPUT_WIDTH',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0124',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0019',
           'DEBUG_STATUS_MASK',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0056',
           'DEBUG_OUTTYPE_NO_INDENT',
           '__MIDL___MIDL_itf_DbgEng_0001_0081_0035',
           'DEBUG_ENGOPT_FAIL_INCOMPLETE_INFORMATION',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0080',
           '__MIDL___MIDL_itf_DbgEng_0001_0087_0003',
           'DEBUG_DATA_ExpSystemResourcesListAddr',
           'CREATE_SEPARATE_WOW_VDM', 'IDebugSymbols3',
           'IDebugSymbols2', 'DEBUG_ASMOPT_SOURCE_LINE_NUMBER',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0034',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0037',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0036',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0031',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0030',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0033',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0032',
           'IDebugDataSpaces4', 'DEBUG_MODNAME_SYMBOL_FILE',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0026',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0039',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0038',
           'IDebugDataSpaces2', 'DEBUG_DATA_KiCallUserModeAddr',
           'DEBUG_OUTPUT_SYMBOLS', 'DEBUG_EXECUTE_NOT_LOGGED',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0018',
           '__MIDL___MIDL_itf_DbgEng_0001_0089_0001',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0122',
           '__MIDL___MIDL_itf_DbgEng_0001_0064_0021',
           'DEBUG_ATTACH_INVASIVE_NO_INITIAL_BREAK',
           'DEBUG_CLASS_IMAGE_FILE', 'DEBUG_END_ACTIVE_TERMINATE',
           'DEBUG_REQUEST_GET_CACHED_SYMBOL_INFO',
           'DEBUG_DATA_MmTotalCommitLimitMaximumAddr',
           'DEBUG_DATA_SPACE_MSR', 'DEBUG_OUT_TEXT_REPL_DEFAULT',
           'DEBUG_ECREATE_PROCESS_DEFAULT',
           'DEBUG_DATA_DumpMmStorage', 'DEBUG_EINDEX_NAME',
           'DEBUG_TYPEOPTS_MATCH_MAXSIZE',
           '__MIDL___MIDL_itf_DbgEng_0001_0081_0008',
           'DEBUG_WAIT_DEFAULT', 'DEBUG_CES_CODE_LEVEL',
           'DEBUG_MODULE_EXPLICIT', 'DEBUG_OUTTYPE_NO_OFFSET',
           'DEBUG_DATA_KiNormalSystemCall', 'DEBUG_SERVERS_DEBUGGER',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0125',
           '__MIDL___MIDL_itf_DbgEng_0001_0081_0003',
           'DEBUG_HANDLE_DATA_TYPE_OBJECT_NAME',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0062',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0089',
           'DEBUG_OUTTYPE_VERBOSE',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0078',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0108',
           '__MIDL___MIDL_itf_DbgEng_0001_0081_0031',
           '__MIDL___MIDL_itf_DbgEng_0000_0000_0009',
           '__MIDL___MIDL_itf_DbgEng_0000_0000_0008',
           'DEBUG_SYSOBJINFO_CURRENT_PROCESS_COOKIE',
           '__MIDL___MIDL_itf_DbgEng_0000_0000_0006',
           '__MIDL___MIDL_itf_DbgEng_0000_0000_0005',
           '__MIDL___MIDL_itf_DbgEng_0000_0000_0004',
           '__MIDL___MIDL_itf_DbgEng_0000_0000_0003',
           '__MIDL___MIDL_itf_DbgEng_0000_0000_0002',
           '__MIDL___MIDL_itf_DbgEng_0000_0000_0001',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0052',
           'DEBUG_KERNEL_CONNECTION', 'DEBUG_DATA_MmPageSize',
           'DEBUG_CES_SYSTEMS',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0074',
           'DEBUG_STATUS_STEP_BRANCH',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0050',
           'DEBUG_PROC_DESC_NO_SERVICES', 'DEBUG_VALUE_INT64',
           'DEBUG_REQUEST_TARGET_EXCEPTION_THREAD',
           'DEBUG_STATUS_REVERSE_STEP_OVER',
           'DEBUG_DATA_MmMaximumNonPagedPoolInBytesAddr',
           'DEBUG_DATA_BASE_TRANSLATION_VIRTUAL_OFFSET',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0070',
           'DEBUG_DATA_MmSharedCommitAddr',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0068',
           'DEBUG_REGISTERS_INT64',
           'DEBUG_DATA_OffsetKThreadNextProcessor',
           'DEBUG_DATA_MmPagedPoolEndAddr', 'DEBUG_DUMP_FILE_BASE',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0069',
           'DEBUG_DATA_MmNonPagedPoolEndAddr', 'DEBUG_END_REENTRANT',
           'DEBUG_REQUEST_GET_TEXT_COMPLETIONS_ANSI',
           'DEBUG_FORMAT_USER_SMALL_PRIVATE_READ_WRITE_MEMORY',
           'DEBUG_DATA_MmProcessCommitAddr',
           'DEBUG_STACK_COLUMN_NAMES', 'DEBUG_VALUE_FLOAT82',
           'DEBUG_VALUE_FLOAT80',
           '__MIDL___MIDL_itf_DbgEng_0001_0078_0012',
           '__MIDL___MIDL_itf_DbgEng_0001_0078_0013',
           '__MIDL___MIDL_itf_DbgEng_0001_0078_0010',
           '__MIDL___MIDL_itf_DbgEng_0001_0078_0011',
           'DEBUG_GETMOD_NO_UNLOADED_MODULES',
           'DEBUG_USER_WINDOWS_PROCESS_SERVER',
           'DEBUG_DATA_MmPhysicalMemoryBlockAddr',
           'DEBUG_STACK_FRAME_MEMORY_USAGE', 'DEBUG_EVENT_EXCEPTION',
           'DEBUG_MANAGED_DISABLED',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0035',
           'DEBUG_CLASS_KERNEL', 'DEBUG_DISASM_SOURCE_FILE_NAME',
           '__MIDL___MIDL_itf_DbgEng_0001_0071_0002',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0010',
           '__MIDL___MIDL_itf_DbgEng_0001_0071_0001',
           'DEBUG_ENGOPT_DISALLOW_SHELL_COMMANDS',
           'DEBUG_SYSVERSTR_BUILD', 'DEBUG_DATA_DumpWriterStatus',
           'DEBUG_REGSRC_EXPLICIT', 'DEBUG_DUMP_TRACE_LOG',
           '__MIDL___MIDL_itf_DbgEng_0001_0075_0002',
           '__MIDL___MIDL_itf_DbgEng_0001_0091_0005',
           '__MIDL___MIDL_itf_DbgEng_0001_0091_0006',
           '__MIDL___MIDL_itf_DbgEng_0001_0075_0001',
           '__MIDL___MIDL_itf_DbgEng_0001_0075_0006',
           '__MIDL___MIDL_itf_DbgEng_0001_0075_0007',
           '__MIDL___MIDL_itf_DbgEng_0001_0075_0004',
           '__MIDL___MIDL_itf_DbgEng_0001_0075_0005',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0039',
           '__MIDL___MIDL_itf_DbgEng_0001_0075_0008',
           '__MIDL___MIDL_itf_DbgEng_0001_0075_0009',
           '__MIDL___MIDL_itf_DbgEng_0001_0091_0008',
           '__MIDL___MIDL_itf_DbgEng_0001_0091_0009',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0028',
           'DEBUG_END_PASSIVE',
           '__MIDL___MIDL_itf_DbgEng_0001_0064_0041',
           '__MIDL___MIDL_itf_DbgEng_0001_0064_0042',
           'IDLE_PRIORITY_CLASS', 'DEBUG_BREAK_READ',
           'DEBUG_VSEARCH_DEFAULT',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0055',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0054',
           '__MIDL___MIDL_itf_DbgEng_0001_0081_0016',
           '__MIDL___MIDL_itf_DbgEng_0001_0081_0017',
           '__MIDL___MIDL_itf_DbgEng_0001_0081_0014',
           '__MIDL___MIDL_itf_DbgEng_0001_0081_0015',
           '__MIDL___MIDL_itf_DbgEng_0001_0081_0012',
           '__MIDL___MIDL_itf_DbgEng_0001_0081_0013',
           '__MIDL___MIDL_itf_DbgEng_0001_0081_0010',
           '__MIDL___MIDL_itf_DbgEng_0001_0081_0011',
           'DEBUG_STATUS_GO',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0048',
           'DEBUG_SERVERS_ALL', '_DEBUG_SPECIFIC_FILTER_PARAMETERS',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0034',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0044',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0045', '_DEBUG_VALUE',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0047',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0040',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0041',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0042',
           'DEBUG_ENGOPT_SYNCHRONIZE_BREAKPOINTS',
           'DEBUG_DATA_MmSystemCacheWsAddr',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0036',
           '__MIDL___MIDL_itf_DbgEng_0001_0088_0002',
           'DEBUG_OUTCBF_DML_HAS_TAGS',
           'DEBUG_OUTPUT_SYMBOLS_NO_TYPES',
           '__MIDL___MIDL_itf_DbgEng_0001_0088_0001',
           'DEBUG_MODNAME_IMAGE',
           '_DEBUG_PROCESSOR_IDENTIFICATION_ALPHA',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0030',
           'DEBUG_EVENT_UNLOAD_MODULE',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0097',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0033',
           'STACK_SIZE_PARAM_IS_A_RESERVATION',
           'DEBUG_REQUEST_GET_TEXT_COMPLETIONS_WIDE',
           'IDebugDataSpaces3',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0077',
           'DEBUG_FILTER_EXIT_PROCESS',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0032',
           'DEBUG_TBINFO_START_OFFSET', 'DEBUG_FILTER_GO_NOT_HANDLED',
           'DEBUG_DATA_MmSizeOfPagedPoolInBytesAddr',
           'DEBUG_SYMTYPE_DEFERRED', 'NORMAL_PRIORITY_CLASS',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0076',
           'DEBUG_DISASM_SOURCE_LINE_NUMBER',
           'DEBUG_DATA_NtBuildLabAddr',
           'DEBUG_TYPEOPTS_UNICODE_DISPLAY',
           'DEBUG_FORMAT_USER_SMALL_FULL_MEMORY',
           'DEBUG_HANDLE_DATA_TYPE_PER_HANDLE_OPERATIONS',
           'DEBUG_MANRESET_DEFAULT',
           '__MIDL___MIDL_itf_DbgEng_0001_0089_0004',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0096',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0085',
           'DEBUG_OUTCTL_DML',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0024',
           'DEBUG_LOG_DEFAULT', 'DEBUG_PROCESS',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0094',
           'DEBUG_FIND_SOURCE_TOKEN_LOOKUP',
           '__MIDL___MIDL_itf_DbgEng_0001_0098_0012',
           'DEBUG_HANDLE_DATA_TYPE_ALL_HANDLE_OPERATIONS',
           'DEBUG_EVENT_CHANGE_DEBUGGEE_STATE',
           'DEBUG_USER_WINDOWS_IDNA',
           '__MIDL___MIDL_itf_DbgEng_0001_0086_0001',
           '__MIDL___MIDL_itf_DbgEng_0001_0086_0005',
           'DEBUG_MANSTR_LOADED_SUPPORT_DLL',
           'DEBUG_FIND_SOURCE_NO_SRCSRV', 'DEBUG_EXT_PVTYPE_IS_VALUE',
           '_DEBUG_PROCESSOR_IDENTIFICATION_X86',
           '__MIDL___MIDL_itf_DbgEng_0001_0064_0020', 'IDebugControl',
           'DEBUG_STATUS_REVERSE_GO', 'DEBUG_OUTCTL_ALL_CLIENTS',
           'DEBUG_DATA_OffsetKThreadKernelStack',
           'DEBUG_OUTPUT_PROMPT', 'DEBUG_OUTSYM_SOURCE_LINE',
           'DEBUG_MODNAME_MAPPED_IMAGE',
           'DEBUG_FORMAT_USER_SMALL_HANDLE_DATA',
           '__MIDL___MIDL_itf_DbgEng_0001_0086_0003', 'DEBUG_CSS_ALL',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0063',
           'DEBUG_TBINFO_EXIT_STATUS',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0007',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0058',
           'CREATE_SUSPENDED', 'DEBUG_DATA_MmVerifierDataAddr',
           'DEBUG_VSOURCE_INVALID',
           '__MIDL___MIDL_itf_DbgEng_0001_0089_0011',
           'DEBUG_ENGOPT_KD_QUIET_MODE', 'DEBUG_SYMBOL_READ_ONLY',
           'DEBUG_DATA_BreakpointWithStatusAddr',
           'DEBUG_HANDLE_DATA_TYPE_TYPE_NAME_WIDE',
           'DEBUG_DATA_ObpTypeObjectTypeAddr',
           'DEBUG_CES_EVENT_FILTERS', 'DEBUG_OUTSYM_DEFAULT',
           'DEBUG_ADDSYNTHSYM_DEFAULT', 'DEBUG_END_DISCONNECT',
           'PROFILE_SERVER',
           '__MIDL___MIDL_itf_DbgEng_0001_0069_0021',
           '__MIDL___MIDL_itf_DbgEng_0001_0086_0009',
           'DEBUG_TBINFO_AFFINITY', 'DEBUG_SESSION_END',
           'DEBUG_SRCFILE_SYMBOL_TOKEN_SOURCE_COMMAND_WIDE',
           'DEBUG_DATA_KeBugCheckCallbackListHeadAddr',
           'DEBUG_TBINFO_TIMES', 'DEBUG_INTERRUPT_EXIT',
           'DEBUG_SYMBOL_EXPANDED', 'DEBUG_KNOWN_STRUCT_GET_NAMES',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0109',
           'DEBUG_FILTER_SECOND_CHANCE_BREAK',
           'DEBUG_PROC_DESC_NO_COMMAND_LINE', 'DEBUG_FORMAT_DEFAULT',
           'DEBUG_VALUE_INVALID',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0035',
           'EXCEPTION_MAXIMUM_PARAMETERS',
           'DEBUG_GET_PROC_SERVICE_NAME', 'DEBUG_MODULE_USER_MODE',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0044',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0110',
           'DEBUG_DATA_MmSessionBase',
           'DEBUG_ENGOPT_DISABLE_MANAGED_SUPPORT',
           'DEBUG_IOUTPUT_BREAKPOINT', 'DEBUG_EVENT_EXIT_PROCESS',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0002',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0003',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0004',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0005',
           '__MIDL___MIDL_itf_DbgEng_0001_0076_0009',
           '__MIDL___MIDL_itf_DbgEng_0001_0076_0008',
           '__MIDL___MIDL_itf_DbgEng_0001_0076_0007',
           '__MIDL___MIDL_itf_DbgEng_0001_0076_0006',
           '__MIDL___MIDL_itf_DbgEng_0001_0076_0005',
           '__MIDL___MIDL_itf_DbgEng_0001_0076_0004',
           '__MIDL___MIDL_itf_DbgEng_0001_0076_0003',
           '__MIDL___MIDL_itf_DbgEng_0001_0076_0002',
           '__MIDL___MIDL_itf_DbgEng_0001_0076_0001',
           'DEBUG_SYMENT_IS_MANAGED',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0001',
           'IDebugAdvanced3', 'IDebugAdvanced2',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0111',
           'DEBUG_VALUE_INT16', 'DEBUG_ENGOPT_NO_EXECUTE_REPEAT',
           'DEBUG_SRCFILE_SYMBOL_TOKEN', '_IMAGE_DATA_DIRECTORY',
           'DEBUG_SESSION_HIBERNATE',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0011',
           '__MIDL___MIDL_itf_DbgEng_0001_0066_0012',
           'DEBUG_PROC_DESC_NO_MTS_PACKAGES',
           'DEBUG_FIND_SOURCE_BEST_MATCH',
           'DEBUG_KNOWN_STRUCT_SUPPRESS_TYPE_NAME', 'DEBUG_STACK_DML',
           'DEBUG_OUTCTL_IGNORE', 'DEBUG_FILTER_OUTPUT',
           'DEBUG_CES_ASSEMBLY_OPTIONS',
           'DEBUG_DATA_MmPagedPoolStartAddr',
           'DEBUG_DATA_KeTimeIncrementAddr',
           'DEBUG_STATUS_RESTART_REQUESTED', 'DEBUG_DUMP_DEFAULT',
           '__MIDL___MIDL_itf_DbgEng_0001_0081_0027',
           '__MIDL___MIDL_itf_DbgEng_0001_0081_0026',
           'DEBUG_OUTPUT_EXTENSION_WARNING',
           '__MIDL___MIDL_itf_DbgEng_0001_0081_0024',
           '__MIDL___MIDL_itf_DbgEng_0001_0081_0023',
           '__MIDL___MIDL_itf_DbgEng_0001_0081_0022',
           '__MIDL___MIDL_itf_DbgEng_0001_0081_0021',
           '__MIDL___MIDL_itf_DbgEng_0001_0081_0020',
           '__MIDL___MIDL_itf_DbgEng_0000_0000_0011',
           'DEBUG_OUTCB_EXPLICIT_FLUSH',
           '__MIDL___MIDL_itf_DbgEng_0001_0081_0029',
           '__MIDL___MIDL_itf_DbgEng_0001_0081_0028',
           '__MIDL___MIDL_itf_DbgEng_0001_0064_0039',
           '__MIDL___MIDL_itf_DbgEng_0001_0064_0038',
           'DEBUG_SERVERS_PROCESS',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0008',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0009',
           'DEBUG_PHYSICAL_WRITE_COMBINED',
           'DEBUG_DATA_MmVirtualTranslationBase',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0004',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0005',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0006',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0007',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0130',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0001',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0002',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0003',
           '__MIDL___MIDL_itf_DbgEng_0001_0090_0006',
           '__MIDL___MIDL_itf_DbgEng_0001_0090_0005',
           'DEBUG_ENGOPT_PREFER_DML',
           '__MIDL___MIDL_itf_DbgEng_0001_0090_0003',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0072',
           '__MIDL___MIDL_itf_DbgEng_0001_0090_0001',
           'DEBUG_ENGOPT_DISABLE_MODULE_SYMBOL_LOAD',
           '__MIDL___MIDL_itf_DbgEng_0001_0089_0008',
           '__MIDL___MIDL_itf_DbgEng_0001_0081_0036',
           'DEBUG_OUTCBI_TEXT',
           '__MIDL___MIDL_itf_DbgEng_0001_0066_0005',
           '__MIDL___MIDL_itf_DbgEng_0001_0064_0017',
           'DEBUG_SYMENT_IS_DATA',
           '__MIDL___MIDL_itf_DbgEng_0001_0081_0037',
           'DEBUG_SYMINFO_GET_SYMBOL_NAME_BY_OFFSET_AND_TAG_WIDE',
           'DEBUG_DATA_MmUserProbeAddressAddr',
           'DEBUG_GSEL_ALLOW_LOWER',
           '__MIDL___MIDL_itf_DbgEng_0001_0081_0030',
           'DEBUG_CDS_REGISTERS',
           '__MIDL___MIDL_itf_DbgEng_0001_0081_0032',
           'DEBUG_DATA_SPACE_BUS_DATA',
           '__MIDL___MIDL_itf_DbgEng_0001_0064_0023',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0022',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0023',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0020',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0021',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0026',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0027',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0024',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0025',
           'DEBUG_DATA_OffsetEprocessParentCID',
           'DEBUG_OUTCTL_THIS_CLIENT',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0028',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0029',
           'DEBUG_SYMINFO_IMAGEHLP_MODULEW64',
           'DEBUG_HANDLE_DATA_TYPE_MINI_THREAD_1',
           'DEBUG_CLASS_UNINITIALIZED',
           'DEBUG_FILTER_DEBUGGEE_OUTPUT',
           'DEBUG_DATA_MmNumberOfPhysicalPagesAddr',
           '__MIDL___MIDL_itf_DbgEng_0001_0089_0006',
           '__MIDL___MIDL_itf_DbgEng_0001_0081_0033',
           'DEBUG_STATUS_REVERSE_STEP_INTO', 'DEBUG_FORMAT_WRITE_CAB',
           'DEBUG_FILTER_GO_HANDLED', 'DEBUG_NOTIFY_SESSION_ACTIVE',
           'DEBUG_MODULE_SECONDARY',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0096',
           '__MIDL___MIDL_itf_DbgEng_0001_0081_0038',
           'DEBUG_SYMBOL_IS_FLOAT',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0095',
           'DEBUG_FORMAT_USER_SMALL_FILTER_PATHS',
           'DEBUG_OUTPUT_VERBOSE', 'DEBUG_OUTPUT_PROMPT_REGISTERS',
           '__MIDL___MIDL_itf_DbgEng_0001_0064_0028',
           'DEBUG_DATA_SharedUserData',
           'DEBUG_DATA_OffsetPrcbVendorString',
           'DEBUG_CES_BREAKPOINTS', 'DEBUG_SYMTYPE_CODEVIEW',
           'DEBUG_DATA_ObpRootDirectoryObjectAddr', 'PROFILE_KERNEL',
           '__MIDL___MIDL_itf_DbgEng_0000_0000_0018',
           '__MIDL___MIDL_itf_DbgEng_0000_0000_0019',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0038',
           '__MIDL___MIDL_itf_DbgEng_0000_0000_0014',
           '__MIDL___MIDL_itf_DbgEng_0000_0000_0015',
           '__MIDL___MIDL_itf_DbgEng_0000_0000_0016',
           '__MIDL___MIDL_itf_DbgEng_0000_0000_0017',
           '__MIDL___MIDL_itf_DbgEng_0000_0000_0010',
           'DEBUG_DATA_MmSpecialPoolTagAddr',
           '__MIDL___MIDL_itf_DbgEng_0000_0000_0012',
           '__MIDL___MIDL_itf_DbgEng_0000_0000_0013',
           'DEBUG_FILTER_REMOVE', 'DEBUG_CES_EXECUTION_STATUS',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0053',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0052',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0051',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0050',
           'DEBUG_DATA_MmHighestUserAddressAddr',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0043',
           'DEBUG_DATA_KPRCB_OFFSET',
           '_DEBUG_EXCEPTION_FILTER_PARAMETERS',
           'DEBUG_DATA_KdPrintRolloverCountAddr',
           'DEBUG_REQUEST_EXT_TYPED_DATA_ANSI', 'DEBUG_LOG_DML',
           'DEBUG_MODULE_SYM_BAD_CHECKSUM',
           'DEBUG_DATA_OffsetKThreadBStore', 'DEBUG_MODULE_LOADED',
           'DEBUG_MANRESET_LOAD_DLL',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0031',
           'DEBUG_STACK_NONVOLATILE_REGISTERS',
           'DEBUG_BREAKPOINT_ENABLED',
           'DEBUG_REQUEST_SOURCE_PATH_HAS_SOURCE_SERVER',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0030',
           '_WINDBG_EXTENSION_APIS64', 'IDebugSystemObjects4',
           'DEBUG_DATA_KdPrintCircularBufferPtrAddr',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0098',
           'DEBUG_STACK_FRAME_ADDRESSES_RA_ONLY',
           'IDebugSystemObjects3', 'IDebugSystemObjects2',
           '__MIDL___MIDL_itf_DbgEng_0001_0066_0006',
           'DEBUG_EVENT_CREATE_PROCESS',
           'DEBUG_ECREATE_PROCESS_USE_VERIFIER_FLAGS',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0046',
           'DEBUG_GET_PROC_DEFAULT',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0105',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0106',
           'DEBUG_STACK_ARGUMENTS',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0103',
           '__MIDL___MIDL_itf_DbgEng_0001_0081_0019',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0048',
           'DEBUG_STATUS_STEP_OVER', 'DEBUG_OUTPUT_IDENTITY_DEFAULT',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0037',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0036',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0018',
           '__MIDL___MIDL_itf_DbgEng_0001_0087_0004',
           'DEBUG_REGSRC_DEBUGGEE',
           'DEBUG_REQUEST_ADD_CACHED_SYMBOL_INFO',
           'DEBUG_EXPR_CPLUSPLUS', 'DEBUG_IOUTPUT_REMOTING',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0085',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0117',
           'DEBUG_OUTPUT_NORMAL', 'DEBUG_SYMTYPE_EXPORT',
           '__MIDL___MIDL_itf_DbgEng_0001_0091_0031',
           '__MIDL___MIDL_itf_DbgEng_0001_0091_0030',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0102',
           '__MIDL___MIDL_itf_DbgEng_0001_0087_0002',
           'DEBUG_DATA_PsLoadedModuleListAddr',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0023',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0049',
           'DEBUG_GET_PROC_ONLY_MATCH', 'DEBUG_OUTCTL_LOG_ONLY',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0078',
           'DEBUG_CONNECT_SESSION_NO_ANNOUNCE',
           'DEBUG_GET_TEXT_COMPLETIONS_NO_EXTENSION_COMMANDS',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0040',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0041',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0042',
           'DEBUG_TYPEOPTS_LONGSTATUS_DISPLAY',
           'DEBUG_OUTCTL_AMBIENT_DML',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0045',
           'DEBUG_DATA_OffsetKThreadBStoreLimit',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0047',
           '_DEBUG_SYMBOL_ENTRY',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0049',
           '__MIDL___MIDL_itf_DbgEng_0001_0081_0039',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0079',
           'DEBUG_FILTER_EXIT_THREAD',
           'DEBUG_DATA_OffsetPrcbProcessorState',
           'DEBUG_REGISTERS_DEFAULT',
           '__MIDL___MIDL_itf_DbgEng_0001_0081_0042',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0071',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0070',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0073',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0072',
           'DEBUG_ENGOPT_INITIAL_BREAK', 'DEBUG_VALUE_VECTOR64',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0077',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0076',
           '__MIDL___MIDL_itf_DbgEng_0001_0081_0044',
           'DEBUG_DATA_SPACE_DEBUGGER_DATA',
           '__MIDL___MIDL_itf_DbgEng_0001_0091_0007', 'PROFILE_USER',
           'DEBUG_ATTACH_EXDI_DRIVER', 'DEBUG_OUTCB_TEXT',
           'DEBUG_DATA_MmModifiedNoWritePageListHeadAddr',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0104',
           'DEBUG_EVENT_EXIT_THREAD',
           'DEBUG_KNOWN_STRUCT_GET_SINGLE_LINE_OUTPUT',
           '__MIDL___MIDL_itf_DbgEng_0001_0098_0005',
           '__MIDL___MIDL_itf_DbgEng_0001_0086_0010',
           'DEBUG_PROC_DESC_NO_SESSION_ID',
           'DEBUG_FORMAT_USER_SMALL_CODE_SEGMENTS',
           'DEBUG_STATUS_GO_HANDLED', 'DEBUG_CES_RADIX',
           'DEBUG_CSS_SYMBOL_OPTIONS',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0006',
           'IDebugSymbolGroup', 'DEBUG_EXTINIT_HAS_COMMAND_HELP',
           'DEBUG_CURRENT_DEFAULT', 'DEBUG_IOUTPUT_KD_PROTOCOL',
           'DEBUG_EVENT_CHANGE_SYMBOL_STATE',
           'DEBUG_INTERRUPT_ACTIVE',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0107',
           'DEBUG_GETFNENT_DEFAULT',
           'DEBUG_DATA_MmHighestPhysicalPageAddr', 'DEBUG_EXPR_MASM',
           'DEBUG_ENGOPT_ALLOW_NETWORK_PATHS',
           '__MIDL___MIDL_itf_DbgEng_0001_0091_0012',
           '_IMAGE_NT_HEADERS64', 'DEBUG_IOUTPUT_EVENT',
           'DEBUG_FILTER_BREAK', 'DEBUG_EXECUTE_NO_REPEAT',
           'DEBUG_DATA_MmModifiedPageListHeadAddr',
           'DEBUG_REQUEST_GET_WIN32_MAJOR_MINOR_VERSIONS',
           '__MIDL___MIDL_itf_DbgEng_0001_0081_0046',
           'DEBUG_OUTTYPE_BLOCK_RECURSE',
           '_DEBUG_CREATE_PROCESS_OPTIONS',
           'DEBUG_REQUEST_GET_EXTENSION_SEARCH_PATH_WIDE',
           'DEBUG_CDS_DATA', 'DEBUG_SYMBOL_IS_LOCAL',
           'DEBUG_DATA_MmNonPagedSystemStartAddr',
           'DEBUG_OUTCBF_COMBINED_EXPLICIT_FLUSH',
           'DEBUG_REGISTER_SUB_REGISTER',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0061',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0038',
           'DEBUG_DATA_MmAvailablePagesAddr',
           'CREATE_DEFAULT_ERROR_MODE', 'DEBUG_STATUS_IGNORE_EVENT',
           'DEBUG_OUTTYPE_COMPACT_OUTPUT',
           'DEBUG_HANDLE_DATA_TYPE_TYPE_NAME',
           'DEBUG_BREAKPOINT_ADDER_ONLY',
           'DEBUG_DATA_MmSystemCacheEndAddr',
           'DEBUG_DATA_SizeEProcess', 'DEBUG_VALUE_TYPES',
           'DEBUG_FORMAT_USER_SMALL_UNLOADED_MODULES',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0019',
           'DEBUG_REGISTERS_ALL', 'DEBUG_CURRENT_DISASM',
           '_IMAGE_FILE_HEADER', 'DEBUG_GETMOD_DEFAULT',
           '__MIDL___MIDL_itf_DbgEng_0001_0098_0002',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0019',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0018',
           'DEBUG_STATUS_NO_DEBUGGEE',
           '__MIDL___MIDL_itf_DbgEng_0001_0091_0002',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0013',
           'IDebugOutputCallbacks2', 'DEBUG_FIND_SOURCE_FULL_PATH',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0010',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0017',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0016',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0015',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0014',
           'DEBUG_FORMAT_CAB_SECONDARY_FILES',
           'DEBUG_DATA_SavedContextAddr', 'DEBUG_EXT_QVALUE_DEFAULT',
           '_DEBUG_OFFSET_REGION',
           'DEBUG_HANDLE_DATA_TYPE_OBJECT_NAME_WIDE',
           'DEBUG_CMDEX_ADD_EVENT_STRING', 'DEBUG_CURRENT_REGISTERS',
           'DEBUG_DATA_MmUnloadedDriversAddr',
           'DEBUG_CES_EXPRESSION_SYNTAX', 'DEBUG_VALUE_INT8',
           'DEBUG_SYMENT_IS_LOCAL',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0001',
           'DEBUG_OUTSYM_ALLOW_DISPLACEMENT', 'DEBUG_SYMBOL_IS_ARRAY',
           '_DEBUG_LAST_EVENT_INFO_BREAKPOINT',
           'DEBUG_PROC_DESC_DEFAULT', 'DEBUG_DATA_SPACE_IO',
           'DEBUG_DATA_PsActiveProcessHeadAddr',
           'DEBUG_SYSOBJINFO_THREAD_NAME_WIDE',
           'DEBUG_BREAKPOINT_DATA', 'DEBUG_LOG_UNICODE',
           '__MIDL___MIDL_itf_DbgEng_0001_0093_0015',
           '__MIDL___MIDL_itf_DbgEng_0001_0093_0014',
           'DEBUG_GETMOD_NO_LOADED_MODULES',
           '__MIDL___MIDL_itf_DbgEng_0001_0093_0016',
           '__MIDL___MIDL_itf_DbgEng_0001_0093_0011',
           '__MIDL___MIDL_itf_DbgEng_0001_0093_0010',
           '__MIDL___MIDL_itf_DbgEng_0001_0093_0013',
           'DEBUG_VALUE_FLOAT128', 'DEBUG_SYMENT_IS_CODE',
           'DEBUG_OUTCB_DML', 'DEBUG_VSOURCE_DEBUGGEE',
           '_IMAGE_OPTIONAL_HEADER64', 'DEBUG_SYMENT_IS_SYNTHETIC',
           'DEBUG_BREAKPOINT_GO_ONLY', 'DEBUG_PROCESS_DETACH_ON_EXIT',
           'DEBUG_REQUEST_SET_LOCAL_IMPLICIT_COMMAND_LINE',
           '_WINDBG_EXTENSION_APIS32', 'DEBUG_EXTENSION_AT_ENGINE',
           'DEBUG_REQUEST_GET_CAPTURED_EVENT_CODE_OFFSET',
           'IDebugOutputCallbacksWide',
           'DEBUG_HANDLE_DATA_TYPE_HANDLE_COUNT',
           'DEBUG_STACK_PARAMETERS_NEWLINE', 'DEBUG_SYMTYPE_NONE',
           'DEBUG_DATA_KPCR_OFFSET', 'CREATE_UNICODE_ENVIRONMENT',
           'CREATE_NO_WINDOW', 'DEBUG_DATA_SizePrcb',
           'IDebugSymbolGroup2',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0087',
           'HIGH_PRIORITY_CLASS', 'DEBUG_REGISTERS_INT32',
           'DEBUG_PROC_DESC_NO_PATHS', 'DEBUG_STATUS_BREAK',
           'DEBUG_VALUE_FLOAT64', 'DEBUG_SYMTYPE_PDB',
           '__MIDL___MIDL_itf_DbgEng_0001_0076_0014',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0111',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0037',
           'DEBUG_DUMP_FILE_PAGE_FILE_DUMP',
           '__MIDL___MIDL_itf_DbgEng_0001_0076_0010',
           '__MIDL___MIDL_itf_DbgEng_0001_0076_0011',
           '__MIDL___MIDL_itf_DbgEng_0001_0076_0012',
           '__MIDL___MIDL_itf_DbgEng_0001_0076_0013',
           'DEBUG_CSS_LOADS', 'DEBUG_NOTIFY_SESSION_INACTIVE',
           'DEBUG_FORMAT_USER_SMALL_NO_AUXILIARY_STATE',
           'DEBUG_CDS_ALL', 'DEBUG_DATA_KdPrintCircularBufferEndAddr',
           'DEBUG_ASMOPT_DEFAULT', 'DEBUG_STATUS_GO_NOT_HANDLED',
           'DEBUG_DATA_DumpPowerState',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0082',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0107',
           '__MIDL___MIDL_itf_DbgEng_0001_0069_0020',
           'DEBUG_CURRENT_SYMBOL', 'DEBUG_DATA_SPACE_VIRTUAL',
           '__MIDL___MIDL_itf_DbgEng_0001_0066_0011',
           '__MIDL___MIDL_itf_DbgEng_0001_0066_0010',
           'DEBUG_CES_EFFECTIVE_PROCESSOR',
           'DEBUG_EVENT_SESSION_STATUS', 'DEBUG_DATA_OffsetPrcbMhz',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0052',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0081',
           'DEBUG_SYMTYPE_COFF',
           '__MIDL___MIDL_itf_DbgEng_0001_0064_0027',
           '__MIDL___MIDL_itf_DbgEng_0001_0064_0024',
           '__MIDL___MIDL_itf_DbgEng_0001_0064_0025',
           'DEBUG_FORMAT_USER_SMALL_THREAD_INFO',
           'DEBUG_SYSVERSTR_SERVICE_PACK',
           '__MIDL___MIDL_itf_DbgEng_0001_0098_0009',
           '__MIDL___MIDL_itf_DbgEng_0001_0098_0008',
           '__MIDL___MIDL_itf_DbgEng_0001_0098_0007',
           '__MIDL___MIDL_itf_DbgEng_0001_0098_0006',
           '_DEBUG_PROCESSOR_IDENTIFICATION_IA64',
           '__MIDL___MIDL_itf_DbgEng_0001_0098_0004',
           '__MIDL___MIDL_itf_DbgEng_0001_0098_0003',
           'DEBUG_KERNEL_LOCAL',
           '__MIDL___MIDL_itf_DbgEng_0001_0098_0001',
           '__MIDL___MIDL_itf_DbgEng_0001_0064_0029',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0039',
           'DEBUG_EINDEX_FROM_START', 'DEBUG_OUTPUT_WARNING',
           '__MIDL___MIDL_itf_DbgEng_0001_0087_0005',
           'DEBUG_DATA_OffsetPrcbDpcRoutine',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0101',
           '_DEBUG_LAST_EVENT_INFO_LOAD_MODULE',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0033',
           'DEBUG_NOTIFY_SESSION_INACCESSIBLE',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0035',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0034',
           'DEBUG_REQUEST_REMOVE_CACHED_SYMBOL_INFO',
           'DEBUG_SESSION_ACTIVE',
           '__MIDL___MIDL_itf_DbgEng_0001_0089_0009',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0074',
           'DEBUG_CSS_UNLOADS', '_DEBUG_THREAD_BASIC_INFORMATION',
           'DEBUG_PROC_DESC_NO_USER_NAME',
           '_DEBUG_GET_TEXT_COMPLETIONS_IN',
           'DEBUG_OUTPUT_SYMBOLS_NO_VALUES',
           'DEBUG_FORMAT_USER_SMALL_FULL_MEMORY_INFO',
           'DEBUG_DATA_KTHREAD_OFFSET',
           'DEBUG_OUTPUT_SYMBOLS_DEFAULT', 'DEBUG_EVENT_BREAKPOINT',
           'DEBUG_VSEARCH_WRITABLE_ONLY',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0083',
           'DEBUG_ENGOPT_ALLOW_READ_ONLY_BREAKPOINTS',
           'DEBUG_DATA_PaeEnabled',
           '__MIDL___MIDL_itf_DbgEng_0001_0092_0007',
           'DEBUG_CES_EXTENSIONS', 'DEBUG_EXT_PVTYPE_IS_POINTER',
           'DEBUG_DATA_OffsetEprocessDirectoryTableBase',
           'DEBUG_DATA_ProductType', 'DEBUG_INTERRUPT_PASSIVE',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0009',
           'DEBUG_SYMTYPE_DIA',
           'DEBUG_HANDLE_DATA_TYPE_MINI_PROCESS_1',
           'DEBUG_HANDLE_DATA_TYPE_MINI_PROCESS_2', 'IDebugControl2',
           'IDebugSymbols', 'IDebugControl4',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0105',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0104',
           'DEBUG_DATA_NonPagedPoolDescriptorAddr',
           'DEBUG_DATA_OffsetPrcbNumber',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0101',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0100',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0103',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0102',
           'DEBUG_OUTCTL_NOT_LOGGED',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0017',
           'DEBUG_SYMINFO_BREAKPOINT_SOURCE_LINE',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0108',
           'DEBUG_BREAK_IO', 'DEBUG_CLASS_USER_WINDOWS',
           'DEBUG_VALUE_VECTOR128', 'DEBUG_NOTIFY_SESSION_ACCESSIBLE',
           '__MIDL___MIDL_itf_DbgEng_0001_0064_0030',
           'IDebugOutputCallbacks', 'DEBUG_OUTCTL_ALL_OTHER_CLIENTS',
           'DEBUG_DATA_OffsetPrcbCpuType', 'DEBUG_SYMBOL_IS_ARGUMENT',
           '__MIDL___MIDL_itf_DbgEng_0001_0081_0025',
           'DEBUG_FILTER_LOAD_MODULE',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0032',
           'DEBUG_REQUEST_TARGET_EXCEPTION_CONTEXT',
           'DEBUG_ECREATE_PROCESS_INHERIT_HANDLES',
           'DEBUG_OUTCBF_DML_HAS_SPECIAL_CHARACTERS',
           'DEBUG_FILTER_IGNORE',
           'DEBUG_DATA_MmLoadedUserImageListAddr',
           'DEBUG_ATTACH_LOCAL_KERNEL',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0100',
           '_DEBUG_LAST_EVENT_INFO_UNLOAD_MODULE',
           '__MIDL___MIDL_itf_DbgEng_0001_0091_0004',
           '_DEBUG_GET_TEXT_COMPLETIONS_OUT',
           'DEBUG_DATA_KdPrintWritePointerAddr',
           '__MIDL___MIDL_itf_DbgEng_0001_0075_0003',
           '__MIDL___MIDL_itf_DbgEng_0000_0000_0021',
           '__MIDL___MIDL_itf_DbgEng_0000_0000_0020',
           '__MIDL___MIDL_itf_DbgEng_0000_0000_0023',
           '__MIDL___MIDL_itf_DbgEng_0000_0000_0022',
           '__MIDL___MIDL_itf_DbgEng_0000_0000_0025',
           '__MIDL___MIDL_itf_DbgEng_0000_0000_0024',
           '__MIDL___MIDL_itf_DbgEng_0000_0000_0027',
           '__MIDL___MIDL_itf_DbgEng_0000_0000_0026',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0044',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0045',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0046',
           'DEBUG_GET_TEXT_COMPLETIONS_NO_DOT_COMMANDS',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0040',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0041',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0042',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0043',
           'DEBUG_GSEL_NO_SYMBOL_LOADS',
           '_MEMORY_BASIC_INFORMATION64',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0048',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0049',
           'DEBUG_DATA_KeUserCallbackDispatcherAddr',
           '__MIDL___MIDL_itf_DbgEng_0001_0091_0001',
           '__MIDL___MIDL_itf_DbgEng_0001_0064_0032',
           'DEBUG_DATA_MmAllocatedNonPagedPoolAddr',
           'DEBUG_EVENT_CREATE_THREAD', '_DEBUG_REGISTER_DESCRIPTION',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0051',
           '__MIDL___MIDL_itf_DbgEng_0001_0091_0003',
           'DEBUG_FILTER_CREATE_THREAD', 'DEBUG_CES_PROCESS_OPTIONS',
           'DEBUG_DATA_OffsetPrcbCurrentThread',
           '__MIDL___MIDL_itf_DbgEng_0001_0080_0010',
           '_DEBUG_LAST_EVENT_INFO_EXIT_PROCESS',
           'DEBUG_VALUE_FLOAT32',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0075',
           '__MIDL___MIDL_itf_DbgEng_0001_0064_0035',
           'DEBUG_DATA_SPACE_COUNT',
           'DEBUG_FORMAT_USER_SMALL_INDIRECT_MEMORY',
           '__MIDL___MIDL_itf_DbgEng_0001_0087_0006',
           'DEBUG_DATA_MmStandbyPageListHeadAddr',
           'DEBUG_REQUEST_CURRENT_OUTPUT_CALLBACKS_ARE_DML_AWARE',
           'DEBUG_EVENT_SYSTEM_ERROR',
           'DEBUG_GET_TEXT_COMPLETIONS_IS_SYMBOL',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0057',
           '__MIDL___MIDL_itf_DbgEng_0001_0090_0004',
           'DEBUG_CURRENT_SOURCE_LINE',
           'DEBUG_CONNECT_SESSION_NO_VERSION', 'IDebugBreakpoint',
           'DEBUG_DATA_IopErrorLogListHeadAddr',
           'DEBUG_FIND_SOURCE_DEFAULT', 'DEBUG_MANSTR_NONE',
           'DEBUG_DUMP_FILE_LOAD_FAILED_INDEX',
           '_DEBUG_BREAKPOINT_PARAMETERS', '_DEBUG_SYMBOL_PARAMETERS',
           'DEBUG_SYMINFO_GET_MODULE_SYMBOL_NAMES_AND_OFFSETS',
           '__MIDL___MIDL_itf_DbgEng_0001_0064_0040',
           '__MIDL___MIDL_itf_DbgEng_0001_0069_0009',
           '__MIDL___MIDL_itf_DbgEng_0001_0069_0008',
           'DEBUG_ASMOPT_NO_CODE_BYTES',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0057',
           '_DEBUG_LAST_EVENT_INFO_SYSTEM_ERROR',
           '__MIDL___MIDL_itf_DbgEng_0001_0069_0003',
           '__MIDL___MIDL_itf_DbgEng_0001_0069_0002',
           '__MIDL___MIDL_itf_DbgEng_0001_0069_0001',
           'DEBUG_DATA_MmExtendedCommitAddr',
           '__MIDL___MIDL_itf_DbgEng_0001_0069_0007',
           '__MIDL___MIDL_itf_DbgEng_0001_0069_0006',
           '__MIDL___MIDL_itf_DbgEng_0001_0069_0005',
           '__MIDL___MIDL_itf_DbgEng_0001_0069_0004',
           '__MIDL___MIDL_itf_DbgEng_0001_0064_0031',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0050',
           'DEBUG_TBINFO_ALL',
           '__MIDL___MIDL_itf_DbgEng_0001_0091_0028',
           '__MIDL___MIDL_itf_DbgEng_0001_0091_0029',
           '__MIDL___MIDL_itf_DbgEng_0001_0091_0026',
           '__MIDL___MIDL_itf_DbgEng_0001_0091_0027',
           '__MIDL___MIDL_itf_DbgEng_0001_0091_0024',
           'DEBUG_GETFNENT_RAW_ENTRY_ONLY',
           '__MIDL___MIDL_itf_DbgEng_0001_0091_0022',
           '__MIDL___MIDL_itf_DbgEng_0001_0091_0023',
           '__MIDL___MIDL_itf_DbgEng_0001_0091_0020',
           '__MIDL___MIDL_itf_DbgEng_0001_0091_0021',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0066',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0067',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0064',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0065',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0079',
           '__MIDL___MIDL_itf_DbgEng_0001_0081_0018',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0060',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0061',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0075',
           'DEBUG_OUTCTL_SEND_MASK', 'DEBUG_OUTPUT_ERROR',
           'IMAGE_NUMBEROF_DIRECTORY_ENTRIES',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0071',
           'DEBUG_DATA_PoolTrackTableAddr',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0073',
           '__MIDL___MIDL_itf_DbgEng_0001_0064_0034',
           'DEBUG_OUTSYM_FORCE_OFFSET',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0109',
           '__MIDL___MIDL_itf_DbgEng_0001_0064_0037',
           '__MIDL___MIDL_itf_DbgEng_0001_0090_0002',
           'DEBUG_DATA_PROCESSOR_IDENTIFICATION',
           '__MIDL___MIDL_itf_DbgEng_0001_0064_0036',
           'DEBUG_VALUE_INT32', 'DEBUG_ENGOPT_DISALLOW_NETWORK_PATHS',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0059',
           '__MIDL___MIDL_itf_DbgEng_0001_0081_0043',
           '__MIDL___MIDL_itf_DbgEng_0001_0064_0033',
           'DEBUG_DATA_SPACE_CONTROL',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0099',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0098',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0093',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0092',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0091',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0090',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0097',
           'DEBUG_DUMP_WINDOWS_CE',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0095',
           'DEBUG_ENGOPT_IGNORE_DBGHELP_VERSION',
           '__MIDL___MIDL_itf_DbgEng_0001_0086_0004',
           '_DEBUG_LAST_EVENT_INFO_EXIT_THREAD',
           '__MIDL___MIDL_itf_DbgEng_0001_0086_0006',
           '__MIDL___MIDL_itf_DbgEng_0001_0086_0007',
           'DEBUG_MANSTR_LOAD_STATUS',
           '__MIDL___MIDL_itf_DbgEng_0001_0086_0002',
           'DEBUG_HANDLE_DATA_TYPE_BASIC',
           'DEBUG_FORMAT_USER_SMALL_DATA_SEGMENTS',
           'DEBUG_DATA_MmLastUnloadedDriverAddr',
           '__MIDL___MIDL_itf_DbgEng_0001_0086_0008',
           'DEBUG_STACK_PARAMETERS',
           'DEBUG_DATA_MmPeakCommitmentAddr',
           'DEBUG_CES_ENGINE_OPTIONS', 'DEBUG_KERNEL_EXDI_DRIVER',
           '_DEBUG_MODULE_AND_ID',
           'DEBUG_DATA_ExpPagedPoolDescriptorAddr',
           'DEBUG_COMMAND_EXCEPTION_ID', 'DEBUG_DATA_SizeEThread',
           'DEBUG_DATA_MmDriverCommitAddr', 'DEBUG_EXECUTE_DEFAULT',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0047',
           '__MIDL___MIDL_itf_DbgEng_0001_0064_0019',
           '__MIDL___MIDL_itf_DbgEng_0001_0064_0018',
           'DEBUG_GSEL_NEAREST_ONLY',
           '__MIDL___MIDL_itf_DbgEng_0001_0064_0016',
           '__MIDL___MIDL_itf_DbgEng_0001_0064_0015',
           '__MIDL___MIDL_itf_DbgEng_0001_0064_0014',
           '__MIDL___MIDL_itf_DbgEng_0001_0064_0013',
           '__MIDL___MIDL_itf_DbgEng_0001_0064_0012',
           '__MIDL___MIDL_itf_DbgEng_0001_0064_0011',
           '__MIDL___MIDL_itf_DbgEng_0001_0064_0010',
           'DETACHED_PROCESS', 'DEBUG_FILTER_UNLOAD_MODULE',
           'DEBUG_DATA_KernelVerifierAddr',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0094',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0093',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0092',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0091',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0090',
           'DEBUG_CES_CURRENT_THREAD',
           'DEBUG_DATA_MmSystemParentTablePage',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0011',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0099',
           'DEBUG_ENGOPT_ALL',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0124',
           'DEBUG_SESSION_REBOOT', 'CREATE_SHARED_WOW_VDM',
           'DEBUG_PHYSICAL_UNCACHED', 'DEBUG_END_ACTIVE_DETACH',
           'DEBUG_REQUEST_READ_USER_MINIDUMP_STREAM', 'DEBUG_CES_ALL',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0008',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0015',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0027',
           'REALTIME_PRIORITY_CLASS', 'DEBUG_CES_LOG_FILE',
           '_EXCEPTION_RECORD64',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0017', 'DEBUG_ANY_ID',
           '_DEBUG_HANDLE_DATA_BASIC',
           '__MIDL___MIDL_itf_DbgEng_0001_0064_0026',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0008',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0009',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0089',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0112',
           'DEBUG_SYMBOL_EXPANSION_LEVEL_MASK',
           'DEBUG_ENGOPT_IGNORE_LOADER_EXCEPTIONS',
           '__MIDL___MIDL_itf_DbgEng_0001_0091_0025',
           'DEBUG_ECREATE_PROCESS_USE_IMPLICIT_COMMAND_LINE',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0002',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0003',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0004',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0005',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0006',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0007',
           'DEBUG_SCOPE_GROUP_LOCALS', 'CREATE_FORCEDOS',
           'IDebugSystemObjects',
           'DEBUG_DATA_ExpNumberOfPagedPoolsAddr',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0046',
           'DEBUG_CMDEX_INVALID', 'IDebugClient', 'DEBUG_BREAK_WRITE',
           'DEBUG_STACK_FUNCTION_INFO',
           'CREATE_IGNORE_SYSTEM_DEFAULT', 'DEBUG_OUTCBI_DML',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0031',
           '__MIDL___MIDL_itf_DbgEng_0001_0092_0009',
           '__MIDL___MIDL_itf_DbgEng_0001_0092_0008',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0058',
           '__MIDL___MIDL_itf_DbgEng_0001_0092_0005',
           '__MIDL___MIDL_itf_DbgEng_0001_0092_0004',
           '_DEBUG_PROCESSOR_IDENTIFICATION_AMD64',
           '__MIDL___MIDL_itf_DbgEng_0001_0092_0006',
           '__MIDL___MIDL_itf_DbgEng_0001_0092_0001',
           '__MIDL___MIDL_itf_DbgEng_0001_0092_0003',
           '__MIDL___MIDL_itf_DbgEng_0001_0092_0002',
           'DEBUG_SESSION_END_SESSION_ACTIVE_DETACH',
           '__MIDL___MIDL_itf_DbgEng_0001_0093_0008',
           '__MIDL___MIDL_itf_DbgEng_0001_0093_0009',
           'DEBUG_LEVEL_ASSEMBLY', 'DEBUG_SOURCE_IS_STATEMENT',
           'DEBUG_DATA_MmZeroedPageListHeadAddr',
           '__MIDL___MIDL_itf_DbgEng_0001_0093_0002',
           '__MIDL___MIDL_itf_DbgEng_0001_0093_0003',
           'DEBUG_GET_TEXT_COMPLETIONS_IS_EXTENSION_COMMAND',
           '__MIDL___MIDL_itf_DbgEng_0001_0093_0001',
           '__MIDL___MIDL_itf_DbgEng_0001_0093_0006',
           '__MIDL___MIDL_itf_DbgEng_0001_0093_0007',
           '__MIDL___MIDL_itf_DbgEng_0001_0093_0004',
           '__MIDL___MIDL_itf_DbgEng_0001_0093_0005',
           'DEBUG_DATA_DumpFormatVersion',
           'DEBUG_SESSION_END_SESSION_PASSIVE',
           'DEBUG_CONNECT_SESSION_DEFAULT', 'DEBUG_EVENT_LOAD_MODULE',
           '__MIDL___MIDL_itf_DbgEng_0001_0087_0001',
           'DEBUG_ATTACH_KERNEL_CONNECTION', 'CREATE_NEW_CONSOLE',
           'DEBUG_DATA_OffsetKThreadTeb',
           'DEBUG_DATA_MmSystemRangeStartAddr',
           'IDebugEventCallbacksWide', 'DEBUG_OUTCBI_ANY_FORMAT',
           'DEBUG_REQUEST_GET_ADDITIONAL_CREATE_OPTIONS',
           'DEBUG_DATA_KiBugcheckDataAddr',
           '__MIDL___MIDL_itf_DbgEng_0001_0074_0001',
           'IDebugEventCallbacks', 'DEBUG_EINDEX_FROM_CURRENT',
           'IDebugRegisters2', 'DEBUG_ATTACH_DEFAULT',
           'DEBUG_STACK_SOURCE_LINE',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0029',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0012',
           'DEBUG_DATA_MmSystemCacheStartAddr',
           'DEBUG_DATA_KiProcessorBlockAddr',
           '__MIDL___MIDL_itf_DbgEng_0001_0068_0011',
           'DEBUG_OUTTYPE_ADDRESS_AT_END',
           '__MIDL___MIDL_itf_DbgEng_0001_0078_0001',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0012',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0028',
           '__MIDL___MIDL_itf_DbgEng_0001_0078_0002',
           '__MIDL___MIDL_itf_DbgEng_0001_0078_0005',
           '__MIDL___MIDL_itf_DbgEng_0001_0078_0004',
           '__MIDL___MIDL_itf_DbgEng_0001_0078_0007',
           '__MIDL___MIDL_itf_DbgEng_0001_0078_0006',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0022',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0023',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0020',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0021',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0026',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0027',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0024',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0025',
           '__MIDL___MIDL_itf_DbgEng_0001_0066_0007',
           '__MIDL___MIDL_itf_DbgEng_0001_0078_0009',
           'DEBUG_CSS_SCOPE',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0106',
           'DEBUG_REGSRC_FRAME', 'DEBUG_BREAK_EXECUTE',
           '__MIDL___MIDL_itf_DbgEng_0001_0078_0008',
           'DEBUG_USER_WINDOWS_PROCESS', 'DEBUG_FORMAT_NO_OVERWRITE',
           'DEBUG_STATUS_NO_CHANGE', 'DEBUG_DUMP_FULL',
           'DEBUG_SYSOBJINFO_THREAD_BASIC_INFORMATION',
           'DEBUG_REGISTERS_FLOAT', 'DEBUG_BREAKPOINT_CODE',
           'DEBUG_CSS_PATHS', 'DEBUG_GSEL_ALLOW_HIGHER',
           'DEBUG_DATA_SuiteMask', 'DEBUG_ATTACH_NONINVASIVE',
           'DEBUG_EXT_PVALUE_DEFAULT',
           '__MIDL___MIDL_itf_DbgEng_0001_0078_0003',
           'DEBUG_MODULE_UNLOADED',
           '__MIDL___MIDL_itf_DbgEng_0001_0066_0004',
           'IDebugControl3',
           '__MIDL___MIDL_itf_DbgEng_0001_0066_0002',
           '__MIDL___MIDL_itf_DbgEng_0001_0091_0016',
           'DEBUG_PROCESS_ONLY_THIS_PROCESS',
           '__MIDL___MIDL_itf_DbgEng_0001_0091_0014',
           '__MIDL___MIDL_itf_DbgEng_0001_0075_0011',
           '__MIDL___MIDL_itf_DbgEng_0001_0075_0010',
           'IDebugAdvanced',
           '__MIDL___MIDL_itf_DbgEng_0001_0091_0010',
           'DEBUG_ONLY_THIS_PROCESS',
           'DEBUG_STATUS_REVERSE_STEP_BRANCH',
           '__MIDL___MIDL_itf_DbgEng_0001_0066_0008',
           '__MIDL___MIDL_itf_DbgEng_0001_0066_0009',
           'DEBUG_REQUEST_TARGET_CAN_DETACH',
           'DEBUG_DATA_MmNonPagedPoolStartAddr',
           '__MIDL___MIDL_itf_DbgEng_0001_0091_0018',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0116',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0117',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0114',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0115',
           'DEBUG_OUTTYPE_ADDRESS_OF_FIELD',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0113',
           '__MIDL___MIDL_itf_DbgEng_0001_0081_0007',
           '__MIDL___MIDL_itf_DbgEng_0001_0081_0006',
           '__MIDL___MIDL_itf_DbgEng_0001_0081_0009',
           '__MIDL___MIDL_itf_DbgEng_0001_0098_0015',
           '__MIDL___MIDL_itf_DbgEng_0001_0098_0016',
           '__MIDL___MIDL_itf_DbgEng_0001_0098_0010',
           '__MIDL___MIDL_itf_DbgEng_0001_0098_0011',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0118',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0119',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0080',
           'DEBUG_CMDEX_RESET_EVENT_STRINGS',
           '_DEBUG_READ_USER_MINIDUMP_STREAM',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0059',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0081',
           'DEBUG_DISASM_EFFECTIVE_ADDRESS',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0056',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0055',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0054',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0053',
           '__MIDL___MIDL_itf_DbgEng_0001_0089_0003',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0051',
           'CREATE_PRESERVE_CODE_AUTHZ_LEVEL',
           '__MIDL___MIDL_itf_DbgEng_0001_0089_0002',
           'DEBUG_MODULE_SYNTHETIC',
           'DEBUG_ATTACH_NONINVASIVE_ALLOW_PARTIAL',
           'DEBUG_DATA_MmPagedPoolInformationAddr',
           'DEBUG_DATA_MmPfnDatabaseAddr',
           '_DEBUG_LAST_EVENT_INFO_EXCEPTION',
           'DEBUG_FORMAT_USER_SMALL_FILTER_MEMORY',
           'DEBUG_LOG_APPEND', 'CREATE_BREAKAWAY_FROM_JOB',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0016',
           'DEBUG_DATA_MmSystemPtesStartAddr',
           '__MIDL___MIDL_itf_DbgEng_0001_0093_0012',
           '__MIDL___MIDL_itf_DbgEng_0001_0089_0007',
           'DEBUG_MODNAME_LOADED_IMAGE',
           'DEBUG_DATA_MmTriageActionTakenAddr',
           'DEBUG_STATUS_STEP_INTO',
           'DEBUG_OUTPUT_SYMBOLS_NO_OFFSETS',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0110',
           'DEBUG_DATA_MmNumberOfPagingFilesAddr',
           '__MIDL___MIDL_itf_DbgEng_0001_0088_0003',
           'DEBUG_SESSION_END_SESSION_ACTIVE_TERMINATE',
           'DEBUG_SCOPE_GROUP_ALL',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0029',
           'DEBUG_FILTER_INITIAL_BREAKPOINT',
           '__MIDL___MIDL_itf_DbgEng_0001_0081_0047',
           'DEBUG_ATTACH_NONINVASIVE_NO_SUSPEND',
           'DEBUG_DATA_OffsetKThreadInitialStack',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0112',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0113',
           'DEBUG_SESSION_FAILURE',
           'DEBUG_FORMAT_USER_SMALL_NO_OPTIONAL_DATA',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0116', 'IDebugClient4',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0114',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0115',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0118',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0119',
           'DEBUG_OUTPUT_DEBUGGEE', 'DEBUG_PHYSICAL_DEFAULT',
           'DEBUG_GSEL_DEFAULT', 'DEBUG_SYMTYPE_SYM',
           'DEBUG_DATA_MmSessionSize', 'DEBUG_EINDEX_FROM_END',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0014',
           'DEBUG_OFFSINFO_VIRTUAL_SOURCE', 'IDebugInputCallbacks',
           '__MIDL___MIDL_itf_DbgEng_0001_0089_0005',
           'DEBUG_ENGOPT_INITIAL_MODULE_BREAK',
           'DEBUG_SYMENT_IS_PARAMETER', 'IDebugBreakpoint2',
           'DEBUG_DATA_MmTotalCommitLimitAddr',
           '__MIDL___MIDL_itf_DbgEng_0001_0089_0010',
           'DEBUG_DATA_MmSubsectionBaseAddr',
           '__MIDL___MIDL_itf_DbgEng_0001_0081_0034',
           'DEBUG_DATA_OffsetEprocessPeb',
           'BELOW_NORMAL_PRIORITY_CLASS',
           'DEBUG_DATA_MmPagedPoolCommitAddr',
           'DEBUG_OUTCTL_AMBIENT_TEXT',
           'DEBUG_GET_TEXT_COMPLETIONS_IS_DOT_COMMAND',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0043',
           'DEBUG_DUMP_FILE_ORIGINAL_CAB_INDEX',
           'DEBUG_ADDSYNTHMOD_DEFAULT', 'DEBUG_BREAKPOINT_DEFERRED',
           'DEBUG_GET_TEXT_COMPLETIONS_NO_SYMBOLS', 'IDebugRegisters',
           'CREATE_NEW_PROCESS_GROUP', 'DEBUG_ENGOPT_FINAL_BREAK',
           'DEBUG_EVENT_CHANGE_ENGINE_STATE',
           'DEBUG_HANDLE_DATA_TYPE_MINI_MUTANT_2',
           'DEBUG_DATA_PspCidTableAddr', 'DEBUG_CSS_TYPE_OPTIONS',
           'DEBUG_MANAGED_DLL_LOADED',
           'DEBUG_DATA_OffsetKThreadApcProcess',
           'DEBUG_OUTPUT_SYMBOLS_NO_NAMES',
           '__MIDL___MIDL_itf_DbgEng_0001_0064_0006',
           'DEBUG_ENGOPT_DISABLE_EXECUTION_COMMANDS',
           'DEBUG_DATA_CmNtCSDVersionAddr',
           '__MIDL___MIDL_itf_DbgEng_0001_0080_0008',
           '__MIDL___MIDL_itf_DbgEng_0001_0080_0009',
           '__MIDL___MIDL_itf_DbgEng_0001_0080_0006',
           '__MIDL___MIDL_itf_DbgEng_0001_0080_0007',
           '__MIDL___MIDL_itf_DbgEng_0001_0080_0004',
           '__MIDL___MIDL_itf_DbgEng_0001_0080_0005',
           '__MIDL___MIDL_itf_DbgEng_0001_0080_0002',
           '__MIDL___MIDL_itf_DbgEng_0001_0080_0003',
           '__MIDL___MIDL_itf_DbgEng_0001_0080_0001',
           '__MIDL___MIDL_itf_DbgEng_0001_0091_0017',
           'DEBUG_FILTER_INITIAL_MODULE_LOAD',
           '__MIDL___MIDL_itf_DbgEng_0001_0066_0003',
           'DEBUG_ATTACH_EXISTING', 'DEBUG_VSOURCE_MAPPED_IMAGE',
           'DEBUG_GET_PROC_FULL_MATCH',
           'DEBUG_DATA_KdPrintCircularBufferAddr',
           'DEBUG_FILTER_CREATE_PROCESS',
           '__MIDL___MIDL_itf_DbgEng_0001_0091_0015',
           'DEBUG_DISASM_MATCHING_SYMBOLS',
           '__MIDL___MIDL_itf_DbgEng_0001_0064_0007',
           'DEBUG_LEVEL_SOURCE', 'DEBUG_EXECUTE_ECHO',
           '__MIDL___MIDL_itf_DbgEng_0001_0066_0001',
           'DEBUG_MODNAME_MODULE', '_DEBUG_CACHED_SYMBOL_INFO',
           'DEBUG_DATA_MmSystemPtesEndAddr', 'DEBUG_ASMOPT_VERBOSE',
           '__MIDL___MIDL_itf_DbgEng_0001_0091_0013',
           'DEBUG_DATA_MmLowestPhysicalPageAddr',
           'DEBUG_OUTCBI_EXPLICIT_FLUSH',
           '__MIDL___MIDL_itf_DbgEng_0001_0093_0017',
           'IDebugDataSpaces',
           '__MIDL___MIDL_itf_DbgEng_0001_0069_0018',
           '__MIDL___MIDL_itf_DbgEng_0001_0069_0019',
           '_DEBUG_MODULE_PARAMETERS', 'DEBUG_DUMP_IMAGE_FILE',
           '__MIDL___MIDL_itf_DbgEng_0001_0091_0011',
           'DEBUG_ENGOPT_DISALLOW_IMAGE_FILE_MAPPING',
           '__MIDL___MIDL_itf_DbgEng_0001_0069_0010',
           '__MIDL___MIDL_itf_DbgEng_0001_0069_0011',
           '__MIDL___MIDL_itf_DbgEng_0001_0069_0012',
           '__MIDL___MIDL_itf_DbgEng_0001_0069_0013',
           '__MIDL___MIDL_itf_DbgEng_0001_0069_0014',
           '__MIDL___MIDL_itf_DbgEng_0001_0069_0015',
           '__MIDL___MIDL_itf_DbgEng_0001_0069_0016',
           '__MIDL___MIDL_itf_DbgEng_0001_0069_0017',
           '__MIDL___MIDL_itf_DbgEng_0000_0000_0007',
           'DEBUG_TBINFO_PRIORITY', 'DEBUG_OUTTYPE_DEFAULT',
           'DEBUG_DATA_MmFreePageListHeadAddr',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0025',
           '_DEBUG_SYMBOL_SOURCE_ENTRY',
           'DEBUG_HANDLE_DATA_TYPE_MINI_MUTANT_1', 'IDebugClient3',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0013',
           'DEBUG_FILTER_SYSTEM_ERROR',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0068',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0069',
           'DEBUG_DATA_MmResidentAvailablePagesAddr',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0016',
           'DEBUG_FORMAT_USER_SMALL_PROCESS_THREAD_DATA',
           'DEBUG_DATA_KernBase',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0062',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0063',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0060',
           '__MIDL___MIDL_itf_DbgEng_0001_0064_0001',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0066',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0067',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0064',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0065',
           'DEBUG_REQUEST_TARGET_EXCEPTION_RECORD',
           'DEBUG_BREAKPOINT_ONE_SHOT',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0022',
           '__MIDL___MIDL_itf_DbgEng_0001_0091_0019',
           'DEBUG_BREAKPOINT_TIME', 'DEBUG_DATA_DumpWriterVersion',
           'ABOVE_NORMAL_PRIORITY_CLASS',
           'DEBUG_REQUEST_SET_ADDITIONAL_CREATE_OPTIONS',
           'DEBUG_OUTCTL_OVERRIDE_MASK',
           'DEBUG_OUTPUT_DEBUGGEE_PROMPT',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0088',
           '__MIDL___MIDL_itf_DbgEng_0001_0081_0001',
           'DEBUG_FORMAT_USER_SMALL_FULL_AUXILIARY_STATE',
           'DEBUG_PHYSICAL_CACHED', 'DEBUG_MANAGED_ALLOWED',
           'DEBUG_STACK_FRAME_NUMBERS',
           '__MIDL___MIDL_itf_DbgEng_0001_0064_0002',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0082',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0083',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0084',
           'DEBUG_ATTACH_INVASIVE_RESUME_PROCESS',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0086',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0087',
           '__MIDL___MIDL_itf_DbgEng_0001_0081_0045',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0127',
           '_DEBUG_PROCESSOR_IDENTIFICATION_ARM',
           '__MIDL___MIDL_itf_DbgEng_0001_0081_0002',
           '__MIDL___MIDL_itf_DbgEng_0001_0081_0041',
           '__MIDL___MIDL_itf_DbgEng_0001_0081_0040',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0053',
           '__MIDL___MIDL_itf_DbgEng_0001_0064_0005',
           '__MIDL___MIDL_itf_DbgEng_0001_0089_0012',
           '__MIDL___MIDL_itf_DbgEng_0001_0081_0005',
           'DEBUG_CES_TEXT_REPLACEMENTS',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0125',
           '__MIDL___MIDL_itf_DbgEng_0001_0081_0004',
           'DEBUG_DATA_KdPrintBufferSizeAddr',
           '__MIDL___MIDL_itf_DbgEng_0001_0064_0022',
           '__MIDL___MIDL_itf_DbgEng_0001_0098_0013',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0014',
           'DEBUG_TYPEOPTS_FORCERADIX_OUTPUT',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0020',
           '__MIDL___MIDL_itf_DbgEng_0001_0064_0003',
           'DEBUG_REQUEST_READ_CAPTURED_EVENT_CODE_STREAM',
           'IDebugClient5', 'DEBUG_DATA_MmTotalCommittedPagesAddr',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0021',
           'DEBUG_DUMP_SMALL', 'IDebugClient2',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0122',
           '__MIDL___MIDL_itf_DbgEng_0001_0098_0014',
           'DEBUG_DATA_PROCESSOR_SPEED',
           '__MIDL___MIDL_itf_DbgEng_0001_0064_0008',
           '__MIDL___MIDL_itf_DbgEng_0001_0064_0009',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0129',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0128',
           '__MIDL___MIDL_itf_DbgEng_0001_0064_0004',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0126',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0015',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0120',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0013',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0012',
           '__MIDL___MIDL_itf_DbgEng_0001_0073_0121',
           '__MIDL___MIDL_itf_DbgEng_0001_0077_0010']
from comtypes import _check_version; _check_version('')
